{
  if (dirtyAll) {
    return;
  }
  Object parent=e.getTreePath().getLastPathComponent();
  if (isNodeVisible(parent) && isNodeExpanded(parent)) {
    TreeItem parentItem=nodeToItemMap.get(parent);
    if (parentItem != null) {
      if (parentItem.getChildren() == null || parentItem.getChildren().isEmpty()) {
        invalidateNode(parent,true);
      }
      for (int i=0; i < e.getChildren().length; ++i) {
        Object node=e.getChildren()[i];
        int index=e.getChildIndices()[i];
        TreeItem item=newTreeItem(parentItem,node,parentItem.getLevel() + 1);
        itemContainer.add(item);
        parentItem.getChildren().add(index,item);
        markTheLastButOneChildDirty(parentItem,item);
        if (!dirtyItems.contains(item))         dirtyItems.add(item);
        if (!dirtyItemsCreateDOM.contains(item))         dirtyItemsCreateDOM.add(item);
      }
    }
  }
}
