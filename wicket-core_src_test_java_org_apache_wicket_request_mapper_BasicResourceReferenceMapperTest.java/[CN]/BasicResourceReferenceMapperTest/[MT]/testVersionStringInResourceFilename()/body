{
  final IStaticCacheableResource resource=new IStaticCacheableResource(){
    public Serializable getCacheKey(){
      return null;
    }
    public IResourceStream getCacheableResourceStream(){
      return new StringResourceStream("foo-bar");
    }
    public void respond(    Attributes attributes){
    }
  }
;
  final PackageResourceReference reference=new PackageResourceReference(getClass(),"versioned",Locale.ENGLISH,"style",null){
    private static final long serialVersionUID=1L;
    @Override public IResource getResource(){
      return resource;
    }
  }
;
  IResourceCachingStrategy strategy=new FilenameWithVersionResourceCachingStrategy("-version-",new StaticResourceVersion("foobar"));
  INamedParameters params=new PageParameters();
  ResourceUrl url=new ResourceUrl("test.js",params);
  strategy.decorateUrl(url,resource);
  assertEquals("test-version-foobar.js",url.getFileName());
  strategy.undecorateUrl(url);
  assertEquals("test.js",url.getFileName());
  url=new ResourceUrl("test",params);
  strategy.decorateUrl(url,resource);
  assertEquals("test-version-foobar",url.getFileName());
  strategy.undecorateUrl(url);
  assertEquals("test",url.getFileName());
  url=new ResourceUrl("test-version-older.txt",params);
  strategy.undecorateUrl(url);
  assertEquals("test.txt",url.getFileName());
  url=new ResourceUrl("test-version-.txt",params);
  strategy.undecorateUrl(url);
  assertEquals("test.txt",url.getFileName());
  url=new ResourceUrl("test-version--------",params);
  strategy.undecorateUrl(url);
  assertEquals("test",url.getFileName());
  url=new ResourceUrl("test-version-1.0.3-alpha.txt",params);
  strategy.undecorateUrl(url);
  assertEquals("test.txt",url.getFileName());
  strategy=new FilenameWithVersionResourceCachingStrategy("-version-",new StaticResourceVersion("1.0.4-beta"));
  url=new ResourceUrl("test.txt",params);
  strategy.decorateUrl(url,resource);
  assertEquals("test-version-1.0.4-beta.txt",url.getFileName());
}
