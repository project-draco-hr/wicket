{
  Class initCl=cl;
  while (Serializable.class.isAssignableFrom(initCl)) {
    if ((initCl=initCl.getSuperclass()) == null) {
      return null;
    }
  }
  try {
    Constructor cons=initCl.getDeclaredConstructor((Class[])null);
    int mods=cons.getModifiers();
    if ((mods & Modifier.PRIVATE) != 0 || ((mods & (Modifier.PUBLIC | Modifier.PROTECTED)) == 0 && !packageEquals(cl,initCl))) {
      return null;
    }
    cons=reflFactory.newConstructorForSerialization(cl,cons);
    cons.setAccessible(true);
    return cons;
  }
 catch (  NoSuchMethodException ex) {
    return null;
  }
}
