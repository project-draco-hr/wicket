{
  new Image(this,"bug");
  new ApplicationView(this,"application",Application.get());
  Link link=new Link(this,"togglelink"){
    private static final long serialVersionUID=1L;
    @Override public void onClick(){
      WebApplication webApplication=(WebApplication)Application.get();
      webApplication.getRequestLoggerSettings().setRequestsWindowSize(500);
      boolean enabled=webApplication.getRequestLoggerSettings().isRequestLoggerEnabled();
      webApplication.getRequestLoggerSettings().setRequestLoggerEnabled(!enabled);
    }
  }
;
  new Label(link,"toggletext",new Model(){
    private static final long serialVersionUID=1L;
    @Override public Object getObject(){
      WebApplication webApplication=(WebApplication)Application.get();
      IRequestLogger requestLogger=webApplication.getRequestLogger();
      if (requestLogger == null) {
        return "Enable request recording";
      }
 else {
        return "Disable request recording";
      }
    }
  }
);
  new Label(this,"totalSessions",new Model(){
    private static final long serialVersionUID=1L;
    @Override public Object getObject(){
      return new Integer(getRequestLogger().getTotalCreatedSessions());
    }
  }
);
  new Label(this,"peakSessions",new Model(){
    private static final long serialVersionUID=1L;
    @Override public Object getObject(){
      return new Integer(getRequestLogger().getPeakSessions());
    }
  }
);
  new Label(this,"liveSessions",new Model(){
    private static final long serialVersionUID=1L;
    @Override public Object getObject(){
      return new Integer(getRequestLogger().getPeakSessions());
    }
  }
);
  IModel<List<SessionData>> sessionModel=new Model<List<SessionData>>(){
    private static final long serialVersionUID=1L;
    @Override public List<SessionData> getObject(){
      return Arrays.asList(getRequestLogger().getLiveSessions());
    }
  }
;
  new Link(this,"requests"){
    private static final long serialVersionUID=1L;
    /** 
 * @see wicket.markup.html.link.Link#onClick()
 */
    @Override public void onClick(){
      setResponsePage(new RequestsPage(null));
    }
  }
;
  PageableListView<SessionData> listView=new PageableListView<SessionData>(this,"sessions",sessionModel,50){
    private static final long serialVersionUID=1L;
    private final SimpleDateFormat sdf=new SimpleDateFormat("dd MMM hh:mm:ss.SSS");
    @Override protected void populateItem(    ListItem<SessionData> item){
      final SessionData sd=item.getModelObject();
      Link link=new Link(item,"id"){
        private static final long serialVersionUID=1L;
        /** 
 * @see wicket.markup.html.link.Link#onClick()
 */
        @Override public void onClick(){
          setResponsePage(new RequestsPage(sd));
        }
      }
;
      new Label(link,"id",new Model<String>(sd.getSessionId()));
      new Label(item,"sessionInfo",new Model<Object>(sd.getSessionInfo()));
      new Label(item,"startDate",new Model<String>(sdf.format(sd.getStartDate())));
      new Label(item,"lastRequestTime",new Model<String>(sdf.format(sd.getLastActive())));
      new Label(item,"numberOfRequests",new Model<Long>(sd.getNumberOfRequests()));
      new Label(item,"totalTimeTaken",new Model<Long>(sd.getTotalTimeTaken()));
      new Label(item,"sessionSize",new Model<Bytes>(Bytes.bytes(sd.getSessionSize())));
    }
  }
;
  new PagingNavigator(this,"navigator",listView);
}
