{
  final TreeNode node=(TreeNode)item.getDefaultModelObject();
  SideColumnsView sideColumns=new SideColumnsView("sideColumns",node);
  item.add(sideColumns);
  if (columns != null) {
    for (int i=0; i < columns.length; i++) {
      IColumn column=columns[i];
      if ((column.getLocation().getAlignment() == Alignment.LEFT) || (column.getLocation().getAlignment() == Alignment.RIGHT)) {
        TreeTableItem component;
        IRenderable renderable=column.newCell(node,level);
        if (renderable == null) {
          component=new TreeTableItem(i);
          Component cell=column.newCell(sideColumns,TreeTableItem.ID,node,level);
          component.add(cell);
        }
 else {
          component=null;
        }
        sideColumns.addColumn(column,component,renderable);
      }
    }
  }
  MiddleColumnsView middleColumns=new MiddleColumnsView("middleColumns",node,hasLeftColumn());
  if (columns != null) {
    for (int i=0; i < columns.length; i++) {
      IColumn column=columns[i];
      if (column.getLocation().getAlignment() == Alignment.MIDDLE) {
        TreeTableItem component;
        IRenderable renderable=column.newCell(node,level);
        if (renderable == null) {
          component=new TreeTableItem(i);
          Component cell=column.newCell(middleColumns,TreeTableItem.ID,node,level);
          component.add(cell);
        }
 else {
          component=null;
        }
        middleColumns.addColumn(column,component,renderable);
      }
    }
  }
  item.add(middleColumns);
  item.add(new Behavior(){
    private static final long serialVersionUID=1L;
    @Override public void onComponentTag(    final Component component,    final ComponentTag tag){
      super.onComponentTag(component,tag);
      if (getTreeState().isNodeSelected(node)) {
        tag.put("class","row-selected");
      }
 else {
        tag.put("class","row");
      }
    }
  }
);
}
