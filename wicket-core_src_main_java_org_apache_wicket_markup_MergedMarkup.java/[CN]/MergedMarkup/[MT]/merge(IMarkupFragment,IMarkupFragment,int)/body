{
  boolean wicketHeadProcessed=false;
  boolean foundHeadTag=false;
  WicketTag childTag=null;
  int baseIndex=0;
  MarkupResourceStream markupResourceStream=baseMarkup.getMarkupResourceStream();
  IResourceStream resource=markupResourceStream.getResource();
  Class<? extends Component> markupClass=markupResourceStream.getMarkupClass();
  for (; baseIndex < baseMarkup.size(); baseIndex++) {
    MarkupElement element=baseMarkup.get(baseIndex);
    if (element instanceof RawMarkup) {
      addMarkupElement(element);
      continue;
    }
    final ComponentTag tag=(ComponentTag)element;
    if (resource != null && tag.getMarkupClass() == null) {
      tag.setMarkupClass(markupClass);
    }
    if (element instanceof WicketTag) {
      WicketTag wtag=(WicketTag)element;
      if (wtag.isChildTag() && tag.getMarkupClass() == markupClass) {
        if (wtag.isOpenClose()) {
          childTag=wtag;
          WicketTag childOpenTag=(WicketTag)wtag.mutable();
          childOpenTag.getXmlTag().setType(TagType.OPEN);
          childOpenTag.setMarkupClass(markupClass);
          addMarkupElement(childOpenTag);
          break;
        }
 else         if (wtag.isOpen()) {
          addMarkupElement(wtag);
          break;
        }
 else {
          throw new WicketRuntimeException("Did not expect a </wicket:child> tag in " + baseMarkup.toString());
        }
      }
      if (wicketHeadProcessed == false) {
        if (wtag.isClose() && wtag.isHeadTag() && (foundHeadTag == false)) {
          wicketHeadProcessed=true;
          addMarkupElement(wtag);
          copyWicketHead(markup,extendIndex);
          continue;
        }
        if (wtag.isOpen() && wtag.isMajorWicketComponentTag()) {
          wicketHeadProcessed=true;
          copyWicketHead(markup,extendIndex);
        }
      }
    }
    if (wicketHeadProcessed == false) {
      if (tag.isOpen() && TagUtils.isHeadTag(tag)) {
        foundHeadTag=true;
      }
      if ((tag.isClose() && TagUtils.isHeadTag(tag)) || (tag.isClose() && TagUtils.isWicketHeaderItemsTag(tag)) || (tag.isOpen() && TagUtils.isBodyTag(tag))) {
        wicketHeadProcessed=true;
        copyWicketHead(markup,extendIndex);
      }
    }
    addMarkupElement(element);
  }
  if (baseIndex == baseMarkup.size()) {
    throw new WicketRuntimeException("Expected to find <wicket:child/> in base markup: " + baseMarkup.toString());
  }
  for (; extendIndex < markup.size(); extendIndex++) {
    MarkupElement element=markup.get(extendIndex);
    addMarkupElement(element);
    if (element instanceof WicketTag) {
      WicketTag wtag=(WicketTag)element;
      if (wtag.isExtendTag() && wtag.isClose()) {
        break;
      }
    }
  }
  if (extendIndex == markup.size()) {
    throw new WicketRuntimeException("Missing close tag </wicket:extend> in derived markup: " + markup.toString());
  }
  if (((ComponentTag)baseMarkup.get(baseIndex)).isOpen()) {
    for (baseIndex++; baseIndex < baseMarkup.size(); baseIndex++) {
      MarkupElement element=baseMarkup.get(baseIndex);
      if (element instanceof WicketTag) {
        WicketTag tag=(WicketTag)element;
        if (tag.isChildTag() && tag.isClose()) {
          tag.setMarkupClass(markupClass);
          addMarkupElement(tag);
          break;
        }
 else {
          throw new WicketRuntimeException("Wicket tags like <wicket:xxx> are not allowed in between <wicket:child> and </wicket:child> tags: " + markup.toString());
        }
      }
 else       if (element instanceof ComponentTag) {
        throw new WicketRuntimeException("Wicket tags identified by wicket:id are not allowed in between <wicket:child> and </wicket:child> tags: " + markup.toString());
      }
    }
    if (baseIndex == baseMarkup.size()) {
      throw new WicketRuntimeException("Expected to find </wicket:child> in base markup: " + baseMarkup.toString());
    }
  }
 else {
    WicketTag childCloseTag=(WicketTag)childTag.mutable();
    childCloseTag.getXmlTag().setType(TagType.CLOSE);
    childCloseTag.setMarkupClass(markupClass);
    addMarkupElement(childCloseTag);
  }
  for (baseIndex++; baseIndex < baseMarkup.size(); baseIndex++) {
    MarkupElement element=baseMarkup.get(baseIndex);
    addMarkupElement(element);
    if (element instanceof ComponentTag && resource != null) {
      ComponentTag tag=(ComponentTag)element;
      tag.setMarkupClass(markupClass);
    }
  }
  if (Page.class.isAssignableFrom(markup.getMarkupResourceStream().getMarkupClass())) {
    int hasOpenWicketHead=-1;
    int hasCloseWicketHead=-1;
    int hasHead=-1;
    for (int i=0; i < size(); i++) {
      MarkupElement element=get(i);
      boolean isHeadTag=(element instanceof WicketTag) && ((WicketTag)element).isHeadTag();
      if ((hasOpenWicketHead == -1) && isHeadTag) {
        hasOpenWicketHead=i;
      }
 else       if (isHeadTag && ((ComponentTag)element).isClose()) {
        hasCloseWicketHead=i;
      }
 else       if ((hasHead == -1) && (element instanceof ComponentTag) && TagUtils.isHeadTag(element)) {
        hasHead=i;
      }
 else       if ((hasHead != -1) && (hasOpenWicketHead != -1)) {
        break;
      }
    }
    if ((hasOpenWicketHead != -1) && (hasHead == -1)) {
      final XmlTag headOpenTag=new XmlTag();
      headOpenTag.setName("head");
      headOpenTag.setType(TagType.OPEN);
      final ComponentTag openTag=new ComponentTag(headOpenTag);
      openTag.setId(HtmlHeaderSectionHandler.HEADER_ID);
      openTag.setAutoComponentTag(true);
      final XmlTag headCloseTag=new XmlTag();
      headCloseTag.setName(headOpenTag.getName());
      headCloseTag.setType(TagType.CLOSE);
      final ComponentTag closeTag=new ComponentTag(headCloseTag);
      closeTag.setOpenTag(openTag);
      closeTag.setId(HtmlHeaderSectionHandler.HEADER_ID);
      addMarkupElement(hasOpenWicketHead,openTag);
      addMarkupElement(hasCloseWicketHead + 2,closeTag);
    }
  }
}
