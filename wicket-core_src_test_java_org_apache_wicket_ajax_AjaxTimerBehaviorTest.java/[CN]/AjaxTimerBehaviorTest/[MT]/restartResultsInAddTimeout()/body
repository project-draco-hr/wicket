{
  final Integer labelInitialValue=Integer.valueOf(0);
  final Label label=new Label(MockPageWithLinkAndComponent.COMPONENT_ID,new Model<Integer>(labelInitialValue));
  final AbstractAjaxTimerBehavior timerBehavior=new AbstractAjaxTimerBehavior(Duration.seconds(2)){
    private static final long serialVersionUID=1L;
    @Override protected void onTimer(    AjaxRequestTarget target){
      label.setDefaultModelObject(((Integer)label.getDefaultModelObject()) + 1);
      target.add(label);
    }
  }
;
  final MockPageWithLinkAndComponent page=new MockPageWithLinkAndComponent();
  page.add(label);
  page.add(new AjaxLink<Void>(MockPageWithLinkAndComponent.LINK_ID){
    private static final long serialVersionUID=1L;
    @Override public void onClick(    AjaxRequestTarget target){
      if (timerBehavior.isStopped()) {
        timerBehavior.restart(target);
      }
 else {
        timerBehavior.stop(target);
      }
    }
  }
);
  label.setOutputMarkupId(true);
  label.add(timerBehavior);
  tester.startPage(page);
  final String labelPath=MockPageWithLinkAndComponent.COMPONENT_ID;
  tester.assertLabel(labelPath,String.valueOf(labelInitialValue));
  tester.executeBehavior(timerBehavior);
  tester.assertLabel(labelPath,String.valueOf(labelInitialValue + 1));
  tester.clickLink(MockPageWithLinkAndComponent.LINK_ID);
  tester.executeBehavior(timerBehavior);
  tester.assertLabel(labelPath,String.valueOf(labelInitialValue + 1));
  tester.clickLink(MockPageWithLinkAndComponent.LINK_ID);
  assertMatches("setTimeout",1);
  assertMatches("wicket:id=\"component\"",0);
  tester.executeBehavior(timerBehavior);
  tester.assertLabel(labelPath,String.valueOf(labelInitialValue + 2));
}
