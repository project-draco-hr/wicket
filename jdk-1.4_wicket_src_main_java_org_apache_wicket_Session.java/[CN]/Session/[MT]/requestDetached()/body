{
  List touchedPages=(List)Session.touchedPages.get();
  Session.touchedPages.set(null);
  if (touchedPages != null) {
    for (int i=0; i < touchedPages.size(); i++) {
      Page page=(Page)touchedPages.get(i);
      page.getPageMap().put(page);
    }
  }
  if (dirty) {
    dirty=false;
    setAttribute(SESSION_ATTRIBUTE_NAME,this);
  }
 else {
    if (log.isDebugEnabled()) {
      log.debug("update: Session not dirty.");
    }
  }
  List dirtyObjects=(List)Session.dirtyObjects.get();
  Session.dirtyObjects.set(null);
  Map tempMap=new HashMap();
  if (dirtyObjects != null) {
    for (final Iterator iterator=dirtyObjects.iterator(); iterator.hasNext(); ) {
      String attribute=null;
      Object object=iterator.next();
      if (object instanceof Page) {
        final Page page=(Page)object;
        if (page.isPageStateless()) {
          continue;
        }
        attribute=page.getPageMap().attributeForId(page.getNumericId());
        if (getAttribute(attribute) == null) {
          continue;
        }
        object=page.getPageMapEntry();
      }
 else       if (object instanceof IPageMap) {
        attribute=attributeForPageMapName(((IPageMap)object).getName());
      }
      tempMap.put(attribute,object);
    }
  }
  if (tempMap.isEmpty() == false) {
    for (Iterator i=tempMap.entrySet().iterator(); i.hasNext(); ) {
      Map.Entry entry=(Map.Entry)i.next();
      setAttribute((String)entry.getKey(),entry.getValue());
    }
  }
  if (pageMapsUsedInRequest != null) {
synchronized (pageMapsUsedInRequest) {
      Thread t=Thread.currentThread();
      Iterator it=pageMapsUsedInRequest.entrySet().iterator();
      while (it.hasNext()) {
        Entry entry=(Entry)it.next();
        if (((PageMapsUsedInRequestEntry)entry.getValue()).thread == t) {
          it.remove();
        }
      }
      pageMapsUsedInRequest.notifyAll();
    }
  }
}
