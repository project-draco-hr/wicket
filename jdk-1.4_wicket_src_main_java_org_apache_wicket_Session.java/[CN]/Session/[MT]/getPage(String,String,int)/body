{
  if (log.isDebugEnabled()) {
    log.debug("Getting page [path = " + path + ", versionNumber = "+ versionNumber+ "]");
  }
  IPageMap pageMap=pageMapForName(pageMapName,pageMapName == PageMap.DEFAULT_NAME);
  if (pageMap != null) {
synchronized (usedPageMaps) {
      if (pageMapsUsedInRequest == null) {
        pageMapsUsedInRequest=new HashMap(3);
      }
    }
synchronized (pageMapsUsedInRequest) {
      long startTime=System.currentTimeMillis();
      Duration timeout=Application.get().getRequestCycleSettings().getTimeout();
      PageMapsUsedInRequestEntry entry=(PageMapsUsedInRequestEntry)pageMapsUsedInRequest.get(pageMap);
      Thread t=entry != null ? entry.thread : null;
      while (t != null && t != Thread.currentThread()) {
        if (isCurrentRequestValid(entry.requestCycle) == false) {
          throw new IgnoreAjaxRequestException();
        }
        try {
          pageMapsUsedInRequest.wait(timeout.getMilliseconds());
        }
 catch (        InterruptedException ex) {
          throw new WicketRuntimeException(ex);
        }
        entry=(PageMapsUsedInRequestEntry)pageMapsUsedInRequest.get(pageMap);
        t=entry != null ? entry.thread : null;
        if (t != null && t != Thread.currentThread() && (startTime + timeout.getMilliseconds()) < System.currentTimeMillis()) {
          throw new WicketRuntimeException("After " + timeout + " the Pagemap "+ pageMapName+ " is still locked by: "+ t+ ", giving up trying to get the page for path: "+ path);
        }
      }
      PageMapsUsedInRequestEntry newEntry=new PageMapsUsedInRequestEntry();
      newEntry.thread=Thread.currentThread();
      newEntry.requestCycle=RequestCycle.get();
      pageMapsUsedInRequest.put(pageMap,newEntry);
      final String id=Strings.firstPathComponent(path,Component.PATH_SEPARATOR);
      Page page=pageMap.get(Integer.parseInt(id),versionNumber);
      if (page == null) {
        pageMapsUsedInRequest.remove(pageMap);
        pageMapsUsedInRequest.notifyAll();
      }
 else {
        page.attach();
        touch(page);
      }
      return page;
    }
  }
  return null;
}
