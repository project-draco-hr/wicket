{
  final String path=request.getParameter("component");
  if (path != null) {
    log.debug("Getting page " + path);
    final Page page=session.getPage(path);
    final int rendering=Integer.parseInt(request.getParameter("rendering"));
    if (page != null) {
      if (page.isStale()) {
        final Page freshestPage=session.getFreshestPage();
        if (freshestPage != null) {
          setPage(newPage(application.getPages().getStaleDataErrorPage(),freshestPage));
        }
 else {
          setPage(newPage(application.getPages().getHomePage()));
        }
        return true;
      }
 else       if (page.isRenderingStale(rendering)) {
        setPage(newPage(application.getPages().getStaleDataErrorPage(),page));
        return true;
      }
 else {
        final Component component=page.get(Strings.afterFirstPathComponent(path,'.'));
        if (component != null) {
          setPage(page);
          session.removeNewerThan(page);
          final String interfaceName=request.getParameter("interface");
          final Method method=getInterfaceMethod(interfaceName);
          try {
            method.invoke(component,new Object[]{});
          }
 catch (          IllegalAccessException e) {
            throw new WicketRuntimeException("Cannot access method " + method + " of interface "+ interfaceName,e);
          }
catch (          InvocationTargetException e) {
            throw new WicketRuntimeException("Method " + method + " of interface "+ interfaceName+ " threw an exception",e);
          }
          setFormComponentValuesFromCookies(page);
          return true;
        }
 else {
          log.error("No component found for " + path);
          setPage(newPage(application.getPages().getInternalErrorPage()));
          return true;
        }
      }
    }
 else {
      setPage(newPage(application.getPages().getPageExpiredErrorPage()));
      return true;
    }
  }
  return false;
}
