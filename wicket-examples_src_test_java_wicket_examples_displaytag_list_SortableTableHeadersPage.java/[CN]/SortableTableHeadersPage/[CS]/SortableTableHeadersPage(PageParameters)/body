{
  super();
  List<User> list=new ArrayList<User>();
  addUser(list,1,"Name-aaa","mail-1");
  addUser(list,2,"Name-bbb","mail-2");
  addUser(list,3,"Name-ccc","mail-3");
  addUser(list,4,"Name-ddd","mail-4");
  addUser(list,5,"Name-eee","mail-5");
  addUser(list,6,"Name-aba","mail-6");
  addUser(list,7,"Name-bab","mail-7");
  addUser(list,8,"Name-dca","mail-8");
  addUser(list,9,"Name-eaa","mail-9");
  ListView<User> table=new ListView<User>(this,"table",list){
    @Override protected void populateItem(    ListItem listItem){
      User user=(User)listItem.getModelObject();
      new Label(listItem,"id",new PropertyModel(user,"id"));
      new Label(listItem,"name",new PropertyModel(user,"name"));
      new Label(listItem,"email",new PropertyModel(user,"email"));
    }
  }
;
  new SortableListViewHeaders<User>(this,"header",table){
    @Override protected int compareTo(    final SortableListViewHeader header,    final Object o1,    final Object o2){
      if (header.getId().equals("id")) {
        return ((User)o1).id - ((User)o2).id;
      }
      return super.compareTo(header,o1,o2);
    }
    /** 
 * Define how to do sorting
 * @see SortableListViewHeaders#getObjectToCompare(SortableListViewHeader,java.lang.Object)
 */
    @Override protected Comparable getObjectToCompare(    final SortableListViewHeader header,    final Object object){
      final String name=header.getId();
      if (name.equals("name")) {
        return ((User)object).name;
      }
      if (name.equals("email")) {
        return ((User)object).email;
      }
      return "";
    }
  }
;
}
