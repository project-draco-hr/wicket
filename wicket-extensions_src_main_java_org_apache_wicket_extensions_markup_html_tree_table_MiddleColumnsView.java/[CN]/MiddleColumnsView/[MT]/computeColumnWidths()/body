{
  double result[]=new double[columns.size()];
  Arrays.fill(result,0d);
  double sum=0d;
  double whole=99.8d;
  for (Iterator<IColumn> i=columns.iterator(); i.hasNext(); ) {
    IColumn column=i.next();
    if (column.getLocation().getUnit() != Unit.PROPORTIONAL) {
      throw new IllegalStateException("Middle columns must have PROPORTIONAL unit set.");
    }
    sum+=column.getLocation().getSize();
  }
  int index=0;
  int spanColumn=0;
  int spanLeft=0;
  for (Iterator<IColumn> i=columns.iterator(); i.hasNext(); ) {
    IColumn column=i.next();
    int ix=index;
    if (spanLeft > 0) {
      ix=spanColumn;
      --spanLeft;
    }
    result[ix]+=Math.round((column.getLocation().getSize()) / sum * whole);
    if (spanLeft == 0 && column.getSpan(node) > 1) {
      int maxSpan=columns.size() - columns.indexOf(column);
      int span=column.getSpan(node) - 1;
      spanColumn=index;
      spanLeft=span < maxSpan ? span : maxSpan;
    }
    ++index;
  }
  double together=0d;
  for (int i=0; i < result.length; i++) {
    together+=result[i];
  }
  if (together > 99.8d) {
    for (int i=result.length - 1; i >= 0; --i) {
      if (result[i] != 0d) {
        result[i]-=together - 99.8d;
        break;
      }
    }
  }
  return result;
}
