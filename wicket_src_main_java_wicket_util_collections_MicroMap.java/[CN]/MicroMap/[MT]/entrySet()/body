{
  return new AbstractSet<Map.Entry<K,T>>(){
    @Override public Iterator<Map.Entry<K,T>> iterator(){
      return new Iterator<Map.Entry<K,T>>(){
        public boolean hasNext(){
          return index < MicroMap.this.size();
        }
        public Map.Entry<K,T> next(){
          index++;
          return new Map.Entry<K,T>(){
            public K getKey(){
              return key;
            }
            public T getValue(){
              return value;
            }
            public T setValue(            final T value){
              final T oldValue=MicroMap.this.value;
              MicroMap.this.value=value;
              return oldValue;
            }
          }
;
        }
        public void remove(){
          clear();
        }
        int index=0;
      }
;
    }
    @Override public int size(){
      return MicroMap.this.size();
    }
  }
;
}
