{
  final MockPageWithLinkAndComponent page=new MockPageWithLinkAndComponent();
  page.add(new WebComponent(MockPageWithLinkAndComponent.COMPONENT_ID).setOutputMarkupId(true));
  page.add(new AjaxLink<Void>(MockPageWithLinkAndComponent.LINK_ID){
    private static final long serialVersionUID=1L;
    @Override public void onClick(    AjaxRequestTarget target){
      try {
        Constructor<? extends Component> con=componentClass.getConstructor(new Class[]{String.class});
        Component comp=con.newInstance(MockPageWithLinkAndComponent.COMPONENT_ID);
        page.replace(comp);
        comp.setOutputMarkupId(true);
        target.add(comp);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
);
  tester.startPage(page);
  tester.debugComponentTrees();
  tester.clickLink(MockPageWithLinkAndComponent.LINK_ID);
  String document=tester.getLastResponseAsString();
  String headerContribution=null;
  Pattern pat=Pattern.compile(".*<header-contribution.*?>(.*?)</header-contribution>.*",Pattern.DOTALL);
  Matcher mat=pat.matcher(document);
  if (mat.matches()) {
    headerContribution=mat.group(1);
  }
  if (expectedFile == null) {
    assertNull("There was a header contribution on the response " + "(though we didn't expect one): <" + headerContribution + ">",headerContribution);
  }
 else   if (headerContribution == null) {
    fail("Failed to find header contribution: \n" + document);
  }
 else {
    DiffUtil.validatePage(headerContribution,getClass(),expectedFile,true);
  }
}
