{
  super(parent,name,new CompoundPropertyModel<FormInputModel>(new FormInputModel()));
  new LocaleDropDownChoice(this,"localeSelect");
  new Link(this,"defaultLocaleLink"){
    @Override public void onClick(){
      WebRequest request=(WebRequest)getRequest();
      setLocale(request.getLocale());
    }
  }
;
  RequiredTextField stringTextField=new RequiredTextField<String>(this,"stringProperty");
  stringTextField.setLabel(new Model<String>("String"));
  RequiredTextField integerTextField=new RequiredTextField<Integer>(this,"integerProperty",Integer.class);
  integerTextField.add(NumberValidator.POSITIVE);
  new RequiredTextField<Double>(this,"doubleProperty",Double.class);
  new RequiredTextField<Integer>(this,"integerInRangeProperty",Integer.class).add(NumberValidator.range(0,100));
  new CheckBox(this,"booleanProperty");
  new Multiply(this,"multiply");
  new Label(this,"multiplyLabel",new PropertyModel(getModel(),"multiply"));
  RadioChoice<String> rc=new RadioChoice<String>(this,"numberRadioChoice",NUMBERS).setSuffix("");
  rc.setLabel(new Model<String>("number"));
  rc.setRequired(true);
  RadioGroup group=new RadioGroup(this,"numbersGroup");
  new ListView<String>(group,"numbers",NUMBERS){
    @Override protected void populateItem(    ListItem<String> item){
      new Radio<String>(item,"radio",item.getModel());
      new Label(item,"number",item.getModelObject());
    }
  }
;
  CheckGroup checks=new CheckGroup(this,"numbersCheckGroup");
  new ListView<String>(checks,"numbers",NUMBERS){
    @Override protected void populateItem(    ListItem<String> item){
      new Check<String>(item,"check",item.getModel());
      new Label(item,"number",item.getModelObject());
    }
  }
;
  new ListMultipleChoice<String>(this,"siteSelection",SITES);
  new TextField<URL>(this,"urlProperty",URL.class){
    /** 
 * @see wicket.Component#getConverter(java.lang.Class)
 */
    @Override public IConverter getConverter(    Class type){
      return new SimpleConverterAdapter(){
        @Override public Object toObject(        String value){
          try {
            return new URL(value.toString());
          }
 catch (          MalformedURLException e) {
            throw new ConversionException("'" + value + "' is not a valid URL");
          }
        }
        @Override public String toString(        Object value){
          return value != null ? value.toString() : null;
        }
      }
;
    }
  }
;
  new TextField<UsPhoneNumber>(this,"phoneNumberUS",UsPhoneNumber.class){
    /** 
 * @see wicket.Component#getConverter(java.lang.Class)
 */
    @Override public IConverter getConverter(    Class type){
      return new MaskConverter("(###) ###-####",UsPhoneNumber.class);
    }
  }
;
  new LinesListView(this,"lines");
  new Button<String>(this,"saveButton",new ResourceModel("save")){
    @Override public void onSubmit(){
    }
  }
;
  new Button<String>(this,"resetButton",new ResourceModel("reset")){
    @Override public void onSubmit(){
      InputForm.this.modelChanged();
    }
  }
.setDefaultFormProcessing(false);
}
