{
  if (obj == null) {
    out.write(ClassStreamHandler.NULL);
    return;
  }
  int handle=handledObjects.lookup(obj);
  if (handle != -1) {
    out.write(ClassStreamHandler.HANDLE);
    out.writeShort((int)handle);
  }
 else {
    if (obj instanceof Class) {
      ClassStreamHandler classHandler=ClassStreamHandler.lookup((Class)obj);
      out.write(ClassStreamHandler.CLASS);
      out.writeShort(classHandler.getClassId());
    }
 else {
      handledObjects.assign(obj);
      Class cls=obj.getClass();
      if (cls.isArray()) {
        Class componentType=cls.getComponentType();
        ClassStreamHandler classHandler=ClassStreamHandler.lookup(componentType);
        if (componentType.isPrimitive()) {
          out.write(ClassStreamHandler.PRIMITIVE_ARRAY);
          out.writeShort(classHandler.getClassId());
          int length=Array.getLength(obj);
          out.writeInt(length);
          for (int i=0; i < length; i++) {
            writeObjectOverride(Array.get(obj,i));
          }
        }
 else {
          out.write(ClassStreamHandler.ARRAY);
          out.writeShort(classHandler.getClassId());
          int length=Array.getLength(obj);
          out.writeInt(length);
          for (int i=0; i < length; i++) {
            writeObjectOverride(Array.get(obj,i));
          }
        }
        return;
      }
 else {
        classHandler=ClassStreamHandler.lookup(cls);
        out.write(ClassStreamHandler.CLASS_DEF);
        out.writeShort(classHandler.getClassId());
        if (obj instanceof String) {
          out.writeUTF((String)obj);
        }
 else {
          stack.push(obj);
          if (!classHandler.invokeWriteMethod(this,obj)) {
            classHandler.writeFields(this,obj);
          }
          stack.pop();
        }
      }
    }
  }
}
