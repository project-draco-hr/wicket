{
  new Image(this,"bug");
  new ApplicationView(this,"application",Application.get());
  Link link=new Link(this,"togglelink"){
    private static final long serialVersionUID=1L;
    @Override public void onClick(){
      WebApplication webApplication=(WebApplication)Application.get();
      IRequestLogger requestLogger=webApplication.getRequestLogger();
      if (requestLogger == null) {
        webApplication.setRequestLogger(new RequestLogger());
      }
 else {
        webApplication.setRequestLogger(null);
      }
    }
  }
;
  new Label(link,"toggletext",new Model(){
    private static final long serialVersionUID=1L;
    @Override public Object getObject(){
      WebApplication webApplication=(WebApplication)Application.get();
      IRequestLogger requestLogger=webApplication.getRequestLogger();
      if (requestLogger == null) {
        return "Enable request recording";
      }
 else {
        return "Disable request recording";
      }
    }
  }
);
  new Label(this,"totalSessions",new Model(){
    private static final long serialVersionUID=1L;
    @Override public Object getObject(){
      return new Integer(getRequestLogger().getTotalCreatedSessions());
    }
  }
);
  new Label(this,"peakSessions",new Model(){
    private static final long serialVersionUID=1L;
    @Override public Object getObject(){
      return new Integer(getRequestLogger().getPeakSessions());
    }
  }
);
  new Label(this,"liveSessions",new Model(){
    private static final long serialVersionUID=1L;
    @Override public Object getObject(){
      return new Integer(getRequestLogger().getPeakSessions());
    }
  }
);
  IModel<List<RequestData>> sessionModel=new Model<List<RequestData>>(){
    private static final long serialVersionUID=1L;
    @Override public List<RequestData> getObject(){
      List<RequestData> returnLst=new ArrayList<RequestData>();
      HashSet<String> ids=new HashSet<String>();
      List<RequestData> data=getRequestLogger().getRequests();
      for (      RequestData rd : data) {
        String sessionId=rd.getSessionId();
        if (sessionId != null && !ids.contains(sessionId)) {
          ids.add(sessionId);
          returnLst.add(rd);
        }
      }
      return returnLst;
    }
  }
;
  new Link(this,"requests"){
    private static final long serialVersionUID=1L;
    /** 
 * @see wicket.markup.html.link.Link#onClick()
 */
    @Override public void onClick(){
      setResponsePage(new RequestsPage(null));
    }
  }
;
  PageableListView<RequestData> listView=new PageableListView<RequestData>(this,"sessions",sessionModel,50){
    private static final long serialVersionUID=1L;
    private final SimpleDateFormat sdf=new SimpleDateFormat("dd MMM hh:mm:ss.SSS");
    @Override protected void populateItem(    ListItem item){
      final RequestData sd=(RequestData)item.getModelObject();
      Link link=new Link(item,"id"){
        private static final long serialVersionUID=1L;
        /** 
 * @see wicket.markup.html.link.Link#onClick()
 */
        @Override public void onClick(){
          setResponsePage(new RequestsPage(sd));
        }
      }
;
      new Label(link,"id",new Model<String>(sd.getSessionId()));
      new Label(item,"lastRequestTime",new Model<String>(sdf.format(sd.getStartDate())));
      new Label(item,"sessionSize",new Model<Bytes>(Bytes.bytes(sd.getSessionSize())));
    }
  }
;
  new PagingNavigator(this,"navigator",listView);
}
