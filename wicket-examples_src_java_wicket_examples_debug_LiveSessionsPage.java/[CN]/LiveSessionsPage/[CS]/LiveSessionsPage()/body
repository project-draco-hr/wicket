{
  new Image(this,"bug");
  new ApplicationView(this,"application",Application.get());
  Link link=new Link(this,"togglelink"){
    private static final long serialVersionUID=1L;
    @Override public void onClick(){
      WebApplication webApplication=(WebApplication)Application.get();
      RequestLogger requestLogger=webApplication.getRequestLogger();
      if (requestLogger == null) {
        webApplication.setRequestLogger(new RequestLogger());
      }
 else {
        webApplication.setRequestLogger(null);
      }
    }
  }
;
  new Label(link,"toggletext",new Model(){
    private static final long serialVersionUID=1L;
    @Override public Object getObject(    Component component){
      WebApplication webApplication=(WebApplication)Application.get();
      RequestLogger requestLogger=webApplication.getRequestLogger();
      if (requestLogger == null) {
        return "Enable request recording";
      }
 else {
        return "Disable request recording";
      }
    }
  }
);
  new Label(this,"totalSessions",new Model(){
    private static final long serialVersionUID=1L;
    @Override public Object getObject(    Component component){
      return new Integer(getRequestLogger().getTotalCreatedSessions());
    }
  }
);
  new Label(this,"peakSessions",new Model(){
    private static final long serialVersionUID=1L;
    @Override public Object getObject(    Component component){
      return new Integer(getRequestLogger().getLiveSessions().size());
    }
  }
);
  new Label(this,"liveSessions",new Model(){
    private static final long serialVersionUID=1L;
    @Override public Object getObject(    Component component){
      return new Integer(getRequestLogger().getPeakSessions());
    }
  }
);
  Model sessionModel=new Model(){
    private static final long serialVersionUID=1L;
    @Override public Object getObject(    Component component){
      return new ArrayList(getRequestLogger().getLiveSessions());
    }
  }
;
  PageableListView listView=new PageableListView(this,"sessions",sessionModel,50){
    private static final long serialVersionUID=1L;
    @Override protected void populateItem(    ListItem item){
      final SessionData sd=(SessionData)item.getModelObject();
      Link link=new Link(item,"id"){
        private static final long serialVersionUID=1L;
        /** 
 * @see wicket.markup.html.link.Link#onClick()
 */
        @Override public void onClick(){
          setResponsePage(new RequestsPage(sd));
        }
      }
;
      new Label(link,"id",new Model(sd.getId()));
      new Label(item,"requestCount",new Model(new Integer(sd.getRequests().size())));
      new Label(item,"requestsTime",new Model(sd.getRequestsTime()));
      new Label(item,"sessionSize",new Model(Bytes.bytes(sd.getSessionSize())));
    }
  }
;
  PagingNavigator navigator=new PagingNavigator(this,"navigator",listView);
}
