{
  final IRequestablePage page=getPage();
  final boolean freshPage=pageComponentProvider.isPageInstanceFresh();
  final boolean isAjax=((WebRequest)requestCycle.getRequest()).isAjax();
  IRequestableComponent component;
  try {
    component=getComponent();
  }
 catch (  ComponentNotFoundException e) {
    component=null;
  }
  if ((component == null && !freshPage) || (component != null && component.getPage() != page)) {
    throw new ComponentNotFoundException("Component '" + getComponentPath() + "' has been removed from page.");
  }
  if (page instanceof Page) {
    ((Page)page).internalInitialize();
  }
  final boolean isStateless=page.isPageStateless();
  RedirectPolicy policy=isStateless ? RedirectPolicy.NEVER_REDIRECT : RedirectPolicy.AUTO_REDIRECT;
  final boolean canCallListenerInterfaceAfterExpiry=component != null ? component.canCallListenerInterfaceAfterExpiry() : false;
  if (!canCallListenerInterfaceAfterExpiry && freshPage && (isStateless == false || component == null)) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("A ListenerInterface assigned to '{}' is executed on an expired stateful page. " + "Scheduling re-create of the page and ignoring the listener interface...",getComponentPath());
    }
    if (isAjax) {
      policy=RedirectPolicy.ALWAYS_REDIRECT;
    }
    requestCycle.scheduleRequestHandlerAfterCurrent(new RenderPageRequestHandler(new PageProvider(page),policy));
    return;
  }
  invokeListener(requestCycle,policy,isAjax);
}
