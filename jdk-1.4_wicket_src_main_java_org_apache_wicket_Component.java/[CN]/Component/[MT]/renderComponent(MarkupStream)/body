{
  markupIndex=markupStream.getCurrentIndex();
  final ComponentTag openTag=markupStream.getTag();
  final ComponentTag tag=openTag.mutable();
  onComponentTag(tag);
  if (!tag.isOpenClose() && !tag.isOpen()) {
    markupStream.throwMarkupException("Method renderComponent called on bad markup element: " + tag);
  }
  if (tag.isOpenClose() && openTag.isOpen()) {
    markupStream.throwMarkupException("You can not modify a open tag to open-close: " + tag);
  }
  try {
    if (getRenderBodyOnly() == false) {
      renderComponentTag(tag);
    }
    markupStream.next();
    if (tag.isOpen()) {
      onComponentTagBody(markupStream,tag);
    }
    if (tag.isOpen()) {
      if (openTag.isOpen()) {
        renderClosingComponentTag(markupStream,tag,getRenderBodyOnly());
      }
 else {
        if (getRenderBodyOnly() == false) {
          final boolean ajaxRequest=getRequest() instanceof WebRequest && ((WebRequest)getRequest()).isAjax();
          final boolean stripWicketTags=ajaxRequest || Application.get().getMarkupSettings().getStripWicketTags();
          if (!(openTag instanceof WicketTag) || !stripWicketTags) {
            getResponse().write(openTag.syntheticCloseTagString());
          }
        }
      }
    }
  }
 catch (  RuntimeException re) {
    if (re instanceof WicketRuntimeException || re instanceof AbortException) {
      throw re;
    }
    throw new WicketRuntimeException("Exception in rendering component: " + this,re);
  }
}
