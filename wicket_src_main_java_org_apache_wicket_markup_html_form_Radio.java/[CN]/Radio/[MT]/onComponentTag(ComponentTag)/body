{
  super.onComponentTag(tag);
  checkComponentTag(tag,"input");
  checkComponentTagAttribute(tag,"type","radio");
  final String value=getValue();
  RadioGroup<?> group=findParent(RadioGroup.class);
  if (group == null) {
    throw new WicketRuntimeException("Radio component [" + getPath() + "] cannot find its parent RadioGroup. All Radio components must be a child of or below in the hierarchy of a RadioGroup component.");
  }
  tag.put("name",group.getInputName());
  tag.put("value",value);
  if (group.hasRawInput()) {
    String rawInput=group.getRawInput();
    if (rawInput != null && rawInput.equals(value)) {
      tag.put("checked","checked");
    }
  }
 else   if (Objects.equal(group.getDefaultModelObject(),getDefaultModelObject())) {
    tag.put("checked","checked");
  }
  if (group.wantOnSelectionChangedNotifications()) {
    CharSequence url=group.urlFor(IOnChangeListener.INTERFACE);
    Form<?> form=group.findParent(Form.class);
    if (form != null) {
      RequestContext rc=RequestContext.get();
      if (rc.isPortletRequest()) {
        url=((PortletRequestContext)rc).getLastEncodedPath();
      }
      tag.put("onclick",form.getJsForInterfaceUrl(url));
    }
 else {
      tag.put("onclick","window.location.href='" + url + (url.toString().indexOf('?') > -1 ? "&amp;" : "?")+ group.getInputName()+ "=' + this.value;");
    }
  }
  if (!isEnableAllowed() || !isEnabled() || !group.isEnabled()|| !group.isEnableAllowed()) {
    tag.put(ATTR_DISABLED,ATTR_DISABLED);
  }
}
