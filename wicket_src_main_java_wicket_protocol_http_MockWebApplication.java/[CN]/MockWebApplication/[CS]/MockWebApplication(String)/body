{
  context=new MockServletContext(this,path);
  Application.set(this);
  WicketFilter filter=new WicketFilter(){
    protected IWebApplicationFactory getApplicationFactory(){
      return new IWebApplicationFactory(){
        public WebApplication createApplication(        WicketFilter filter){
          return MockWebApplication.this;
        }
      }
;
    }
  }
;
  try {
    filter.init(new FilterConfig(){
      public ServletContext getServletContext(){
        return context;
      }
      public Enumeration getInitParameterNames(){
        return null;
      }
      public String getInitParameter(      String name){
        if (name.equals(WicketFilter.FILTER_PATH_PARAM)) {
          return MockWebApplication.this.getName();
        }
        return null;
      }
      public String getFilterName(){
        return "WicketMockServlet";
      }
    }
);
  }
 catch (  ServletException e) {
    throw new RuntimeException(e);
  }
  Application.set(this);
  this.internalInit();
  getDebugSettings().setSerializeSessionAttributes(false);
  this.init();
  this.initializeComponents();
  servletSession=new MockHttpSession(context);
  servletRequest=new MockHttpServletRequest(this,servletSession,context);
  servletResponse=new MockHttpServletResponse();
  wicketRequest=newWebRequest(servletRequest);
  wicketSession=getSession(wicketRequest);
  requestCycleFactory=wicketSession.getRequestCycleFactory();
  getApplicationSettings().setContextPath(context.getServletContextName());
  getRequestCycleSettings().setRenderStrategy(IRequestCycleSettings.ONE_PASS_RENDER);
  getResourceSettings().setResourceFinder(new WebApplicationPath(context));
  getPageSettings().setAutomaticMultiWindowSupport(false);
  getResourceSettings().setResourcePollFrequency(null);
  createRequestCycle();
}
