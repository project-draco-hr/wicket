{
  this.cachingStore=new IStore(){
    Map<String,SoftReference<Map<String,SoftReference<Page>>>> sessionMap=new ConcurrentHashMap<String,SoftReference<Map<String,SoftReference<Page>>>>();
    public void unbind(    String sessionId){
      sessionMap.remove(sessionId);
      store.unbind(sessionId);
    }
    public void removePage(    String sessionId,    Page page){
      SoftReference sr=sessionMap.get(sessionId);
      if (sr != null) {
        Map map=(Map)sr.get();
        if (map != null) {
          map.remove(page.getId());
        }
      }
      store.removePage(sessionId,page);
    }
    public Page getPage(    String sessionId,    int id,    int versionNumber){
      SoftReference sr=sessionMap.get(sessionId);
      if (sr != null) {
        Map map=(Map)sr.get();
        if (map != null) {
          SoftReference sr2=(SoftReference)map.get(Integer.toString(id));
          if (sr2 != null) {
            Page page=(Page)sr2.get();
            if (page != null) {
              page=page.getVersion(versionNumber);
            }
            if (page != null) {
              return page;
            }
          }
        }
      }
      return store.getPage(sessionId,id,versionNumber);
    }
    public void storePage(    String sessionId,    Page page){
      Map<String,SoftReference<Page>> pageMap=null;
      SoftReference<Map<String,SoftReference<Page>>> sr=sessionMap.get(sessionId);
      if (sr == null || (pageMap=sr.get()) == null) {
        pageMap=new ConcurrentHashMap<String,SoftReference<Page>>();
        sessionMap.put(sessionId,new SoftReference<Map<String,SoftReference<Page>>>(pageMap));
      }
      pageMap.put(page.getId(),new SoftReference<Page>(page));
      store.storePage(sessionId,page);
    }
  }
;
}
