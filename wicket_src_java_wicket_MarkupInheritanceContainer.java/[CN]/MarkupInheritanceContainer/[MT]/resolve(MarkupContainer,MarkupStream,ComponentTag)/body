{
  if (openTag == null) {
    return false;
  }
  log.debug("inherit: resolve: " + markupStream.toString());
  if (!(tag instanceof WicketTag)) {
    MarkupContainer parent=this.getParent();
    while (parent instanceof MarkupInheritanceContainer) {
      parent=parent.getParent();
    }
    final String name=tag.getId();
    final Component component=parent.get(name);
    if (component != null) {
      log.debug("inherit: render component: " + component.getId());
      component.render();
      return true;
    }
    return false;
  }
  if (this.resolved == true) {
    return false;
  }
  this.resolved=true;
  final WicketTag wtag=(WicketTag)tag;
  if (!wtag.isChildTag()) {
    return false;
  }
  ComponentTag bodyTag=tag;
  if (tag.isOpen()) {
    markupStream.next();
    markupStream.skipRawMarkup();
  }
 else   if (tag.isOpenClose()) {
    bodyTag=tag.mutable();
    bodyTag.setType(XmlTag.OPEN);
  }
 else {
    markupStream.throwMarkupException("A <wicket:child> tag must be an open or open-close tag.");
  }
  log.debug("inherit: render child tag: " + markupStream.toString());
  renderComponentTag(bodyTag);
  markupStream.next();
  this.dual.incrementMarkupStreamIndex();
  log.debug("inherit: render body (<wicket:child>): " + dual.getCurrentMarkupStream().toString());
  super.onComponentTagBody(this.dual,openTag);
  this.dual.decrementMarkupStreamIndex();
  log.debug("inherit: back from render </wicket:child>: " + dual.getCurrentMarkupStream().toString());
  if (tag.isOpenClose()) {
    bodyTag.setType(XmlTag.CLOSE);
    renderComponentTag(bodyTag);
  }
  return true;
}
