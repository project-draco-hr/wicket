{
  IModel<List<? extends T>> choiceModel=new AbstractReadOnlyModel<List<? extends T>>(){
    private static final long serialVersionUID=1L;
    @Override public List<? extends T> getObject(){
      return choices.getObject();
    }
  }
;
  DropDownChoice<T> editor=new DropDownChoice<T>(componentId,model,choiceModel,renderer){
    private static final long serialVersionUID=1L;
    @Override protected void onModelChanged(){
      AjaxEditableChoiceLabel.this.onModelChanged();
    }
    @Override protected void onModelChanging(){
      AjaxEditableChoiceLabel.this.onModelChanging();
    }
  }
;
  editor.setOutputMarkupId(true);
  editor.setVisible(false);
  editor.add(new EditorAjaxBehavior(){
    private static final long serialVersionUID=1L;
    @Override protected void updateAjaxAttributes(    AjaxRequestAttributes attributes){
      super.updateAjaxAttributes(attributes);
      attributes.setEventNames("change","blur","keyup");
      CharSequence dynamicExtraParameters="var result = [], " + "kc=Wicket.Event.keyCode(attrs.event)," + "evtType=attrs.event.type;console.log(evtType);"+ "if (evtType === 'blur' || (evtType === 'keyup' && kc===27)) {"+ "  result.push( { name: 'save', value: false } );"+ "}"+ "else {"+ "  result = Wicket.Form.serializeElement(attrs.c);"+ "  result.push( { name: 'save', value: true } );"+ "}"+ "return result;";
      attributes.getDynamicExtraParameters().add(dynamicExtraParameters);
      CharSequence precondition="var kc=Wicket.Event.keyCode(attrs.event)," + "evtType=attrs.event.type," + "ret=false;"+ "if(evtType==='blur' || evtType==='change' || (evtType==='keyup' && kc===27)) ret = true;"+ "return ret;";
      AjaxCallListener ajaxCallListener=new AjaxCallListener();
      ajaxCallListener.onPrecondition(precondition);
      attributes.getAjaxCallListeners().add(ajaxCallListener);
    }
  }
);
  return editor;
}
