{
  Label<T> label=new Label<T>(componentId,model){
    private static final long serialVersionUID=1L;
    @Override public IConverter<T> getConverter(    Class<T> type){
      IConverter<T> c=AjaxEditableChoiceLabel.this.getConverter(type);
      return c != null ? c : super.getConverter(type);
    }
    @Override protected void onComponentTagBody(    MarkupStream markupStream,    ComponentTag openTag){
      String displayValue=getModelObjectAsString();
      if (renderer != null) {
        Object displayObject=renderer.getDisplayValue(getModelObject());
        Class<?> objectClass=(displayObject == null ? null : displayObject.getClass());
        if (objectClass != null && objectClass != String.class) {
          final IConverter converter=Application.get().getConverterLocator().getConverter(objectClass);
          displayValue=converter.convertToString(displayObject,getLocale());
        }
      }
      if (displayValue == null || "".equals(displayValue)) {
        replaceComponentTagBody(markupStream,openTag,defaultNullLabel());
      }
 else {
        replaceComponentTagBody(markupStream,openTag,displayValue);
      }
    }
  }
;
  label.setOutputMarkupId(true);
  label.add(new LabelAjaxBehavior(getLabelAjaxEvent()));
  return label;
}
