{
  Label label=new Label(componentId,model){
    private static final long serialVersionUID=1L;
    /** 
 * {@inheritDoc}
 */
    @Override public <C>IConverter<C> getConverter(    final Class<C> type){
      IConverter<C> c=AjaxEditableChoiceLabel.this.getConverter(type);
      return c != null ? c : super.getConverter(type);
    }
    /** 
 * {@inheritDoc}
 */
    @SuppressWarnings("unchecked") @Override public void onComponentTagBody(    final MarkupStream markupStream,    final ComponentTag openTag){
      String displayValue=getDefaultModelObjectAsString();
      if (renderer != null) {
        Object displayObject=renderer.getDisplayValue(getModelObject());
        Class<?> objectClass=(displayObject == null ? null : displayObject.getClass());
        if ((objectClass != null) && (objectClass != String.class)) {
          @SuppressWarnings("rawtypes") final IConverter converter=getConverter(objectClass);
          displayValue=converter.convertToString(displayObject,getLocale());
        }
 else         if (displayObject != null) {
          displayValue=displayObject.toString();
        }
      }
      if (Strings.isEmpty(displayValue)) {
        replaceComponentTagBody(markupStream,openTag,defaultNullLabel());
      }
 else {
        replaceComponentTagBody(markupStream,openTag,displayValue);
      }
    }
  }
;
  label.setOutputMarkupId(true);
  label.add(new LabelAjaxBehavior(getLabelAjaxEvent()));
  return label;
}
