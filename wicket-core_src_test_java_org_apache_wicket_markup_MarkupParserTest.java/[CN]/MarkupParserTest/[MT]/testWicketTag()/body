{
  WicketTagIdentifier.registerWellKnownTagName("body");
  WicketTagIdentifier.registerWellKnownTagName("border");
  WicketTagIdentifier.registerWellKnownTagName("panel");
  new MarkupParser("<span wicket:id=\"test\"/>").parse();
  new MarkupParser("<span wicket:id=\"test\">Body</span>").parse();
  new MarkupParser("This is a test <span wicket:id=\"test\"/>").parse();
  new MarkupParser("This is a test <span wicket:id=\"test\">Body</span>").parse();
  new MarkupParser("<a wicket:id=\"[autolink]\" href=\"test.html\">Home</a>").parse();
  new MarkupParser("<wicket:body/>").parse();
  new MarkupParser("<wicket:border/>").parse();
  new MarkupParser("<wicket:panel/>").parse();
  try {
    new MarkupParser("<wicket:remove/>").parse();
    assertTrue("Should have thrown an exception",false);
  }
 catch (  MarkupException ex) {
    assertTrue(ex.getMessage().startsWith("Wicket remove tag must not be an open-close tag: '<wicket:remove/>' (line 1, column 1)"));
  }
  IMarkupFragment markup=new MarkupParser("<wicket:remove>  </wicket:remove>").parse();
  assertEquals(0,markup.size());
  markup=new MarkupParser("<wicket:remove> <span id=\"test\"/> </wicket:remove>").parse();
  assertEquals(0,markup.size());
  markup=new MarkupParser("<div><wicket:remove> <span id=\"test\"/> </wicket:remove></div>").parse();
  assertEquals(2,markup.size());
  assertEquals("<div>",markup.get(0).toString());
  assertEquals("</div>",markup.get(1).toString());
  try {
    new MarkupParser("<wicket:remove> <wicket:remove> </wicket:remove> </wicket:remove>").parse();
    assertTrue("Should have thrown an exception: remove regions must not contain wicket-components",false);
  }
 catch (  MarkupException ex) {
    assertTrue(ex.getMessage().startsWith("Markup remove regions must not contain Wicket component tags: '<wicket:remove>' (line 1, column 17)"));
  }
  new MarkupParser("<wicket:component name = \"componentName\" class = \"classname\" param1 = \"value1\"/>").parse();
  new MarkupParser("<wicket:component name = \"componentName\" class = \"classname\" param1 = \"value1\">    </wicket:component>").parse();
  new MarkupParser("<wicket:component name = \"componentName\" class = \"classname\" param1 = \"value1\">  <span wicket:id=\"msg\">hello world!</span></wicket:component>").parse();
  new MarkupParser("<wicket:panel><div id=\"definitionsContentBox\"><span wicket:id=\"contentPanel\"/></div></wicket:panel>").parse();
}
