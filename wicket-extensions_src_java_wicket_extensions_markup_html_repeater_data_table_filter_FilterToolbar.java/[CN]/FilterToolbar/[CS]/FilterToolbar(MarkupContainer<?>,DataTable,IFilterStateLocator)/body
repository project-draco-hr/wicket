{
  super(parent,table);
  if (table == null) {
    throw new IllegalArgumentException("argument [table] cannot be null");
  }
  if (stateLocator == null) {
    throw new IllegalArgumentException("argument [stateLocator] cannot be null");
  }
  final FilterForm form=new FilterForm(this,"filter-form",stateLocator){
    private static final long serialVersionUID=1L;
    protected void onSubmit(){
      table.setCurrentPage(0);
    }
  }
;
  add(form);
  add(new WebMarkupContainer(this,"focus-restore"){
    private static final long serialVersionUID=1L;
    protected void onComponentTagBody(    MarkupStream markupStream,    ComponentTag openTag){
      AppendingStringBuffer script=new AppendingStringBuffer("<script>_filter_focus_restore('").append(form.getFocusTrackerFieldCssId()).append("');</script>");
      replaceComponentTagBody(markupStream,openTag,script);
    }
  }
);
  RepeatingView filters=new RepeatingView(form,"filters");
  form.add(filters);
  IColumn[] cols=table.getColumns();
  for (int i=0; i < cols.length; i++) {
    WebMarkupContainer item=new WebMarkupContainer(filters,filters.newChildId());
    item.setRenderBodyOnly(true);
    IColumn col=cols[i];
    Component filter=null;
    if (col instanceof IFilteredColumn) {
      IFilteredColumn filteredCol=(IFilteredColumn)col;
      filter=filteredCol.getFilter(item,FILTER_COMPONENT_ID,form);
    }
    if (filter == null) {
      filter=new NoFilter(item,FILTER_COMPONENT_ID);
    }
 else {
      if (!filter.getId().equals(FILTER_COMPONENT_ID)) {
        throw new IllegalStateException("filter component returned  with an invalid component id. invalid component id [" + filter.getId() + "] required component id ["+ FILTER_COMPONENT_ID+ "] generating column ["+ col.toString()+ "] ");
      }
    }
    item.add(filter);
    filters.add(item);
  }
}
