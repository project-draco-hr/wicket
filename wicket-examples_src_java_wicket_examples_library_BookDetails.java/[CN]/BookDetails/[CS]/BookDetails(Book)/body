{
  Model bookModel=new Model(book);
  new Label(this,"title",book.getTitle());
  new Label(this,"author",book.getAuthor());
  new Label(this,"fiction",Boolean.toString(book.getFiction()));
  BookDetails.link(this,"companion",book.getCompanionBook(),getLocalizer().getString("noBookTitle",this));
  BookDetails.link(this,"related",book.getRelatedBook(),getLocalizer().getString("noBookTitle",this));
  String writingStyles;
  final boolean hasStyles=(book.getWritingStyles() != null) && (book.getWritingStyles().size() > 0);
  if (hasStyles) {
    StringList styles=new StringList();
    for (Iterator iterator=book.getWritingStyles().iterator(); iterator.hasNext(); ) {
      Book.WritingStyle style=(Book.WritingStyle)iterator.next();
      styles.add(getLocalizer().getString(style.toString(),this));
    }
    writingStyles=styles.toString();
  }
 else {
    writingStyles=getLocalizer().getString("noWritingStyles",this);
  }
  Label writingStylesLabel=new Label(this,"writingStyles",writingStyles);
  final AttributeModifier italic=new AttributeModifier("class",new Model("italic"));
  italic.setEnabled(!hasStyles);
  writingStylesLabel.add(italic);
  EditBook.link(this,"edit",book.getId());
}
