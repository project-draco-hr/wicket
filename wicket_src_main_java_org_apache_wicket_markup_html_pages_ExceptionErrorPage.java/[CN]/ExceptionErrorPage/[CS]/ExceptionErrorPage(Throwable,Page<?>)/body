{
  this.throwable=throwable;
  add(new MultiLineLabel<String>("exception",Strings.toString(throwable)));
  String resource="";
  String markup="";
  MarkupStream markupStream=null;
  if (throwable instanceof MarkupException) {
    markupStream=((MarkupException)throwable).getMarkupStream();
    if (markupStream != null) {
      markup=markupStream.toHtmlDebugString();
      resource=markupStream.getResource().toString();
    }
  }
  final MultiLineLabel<String> markupLabel=new MultiLineLabel<String>("markup",markup);
  markupLabel.setEscapeModelStrings(false);
  final WebMarkupContainer<String> markupHighlight=new WebMarkupContainer<String>("markupHighlight");
  markupHighlight.add(markupLabel);
  markupHighlight.add(new Label<String>("resource",resource));
  add(markupHighlight);
  markupHighlight.setVisible(markupStream != null);
  add(new Link<Object>("displayPageViewLink"){
    private static final long serialVersionUID=1L;
    @Override public void onClick(){
      ExceptionErrorPage.this.replace(new PageView("componentTree",page));
      setVisible(false);
    }
  }
);
  add(new Label<String>("componentTree",""));
}
