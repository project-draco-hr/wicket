{
  this.throwable=throwable;
  add(new MultiLineLabel("exception",getErrorMessage(throwable)));
  add(new MultiLineLabel("stacktrace",getStackTrace(throwable)));
  String resource="";
  String markup="";
  MarkupStream markupStream=null;
  if (throwable instanceof MarkupException) {
    markupStream=((MarkupException)throwable).getMarkupStream();
    if (markupStream != null) {
      markup=markupStream.toHtmlDebugString();
      resource=markupStream.getResource().toString();
    }
  }
  final MultiLineLabel markupLabel=new MultiLineLabel("markup",markup);
  markupLabel.setEscapeModelStrings(false);
  final WebMarkupContainer markupHighlight=new WebMarkupContainer("markupHighlight");
  markupHighlight.add(markupLabel);
  markupHighlight.add(new Label("resource",resource));
  add(markupHighlight);
  markupHighlight.setVisible(markupStream != null);
  add(new Link<Void>("displayPageViewLink"){
    private static final long serialVersionUID=1L;
    @Override public void onClick(){
      ExceptionErrorPage.this.replace(new PageView("componentTree",page));
      setVisible(false);
    }
  }
);
  add(new Label("componentTree",""));
}
