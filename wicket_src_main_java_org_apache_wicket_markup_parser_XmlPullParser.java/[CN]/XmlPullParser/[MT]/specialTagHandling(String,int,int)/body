{
  if (tagText.startsWith("!--")) {
    int pos=input.find("-->",openBracketIndex + 1);
    if (pos == -1) {
      throw new ParseException("Unclosed comment beginning at" + getLineAndColumnText(),openBracketIndex);
    }
    pos+=3;
    lastText=input.getSubstring(openBracketIndex,pos);
    lastType=ELEMENT_TYPE.COMMENT;
    if (tagText.startsWith("!--[if ") && tagText.endsWith("]") && lastText.toString().endsWith("<![endif]-->")) {
      lastType=ELEMENT_TYPE.CONDITIONAL_COMMENT;
      input.setPosition(closeBracketIndex + 1);
    }
 else {
      input.setPosition(pos);
    }
    return;
  }
  if (tagText.equals("![endif]--")) {
    lastType=ELEMENT_TYPE.CONDITIONAL_COMMENT;
    input.setPosition(closeBracketIndex + 1);
    return;
  }
  if (tagText.startsWith("![")) {
    final String startText=(tagText.length() <= 8 ? tagText : tagText.substring(0,8));
    if (startText.toUpperCase().equals("![CDATA[")) {
      int pos1=openBracketIndex;
      do {
        closeBracketIndex=findChar('>',pos1);
        if (closeBracketIndex == -1) {
          throw new ParseException("No matching close bracket at" + getLineAndColumnText(),input.getPosition());
        }
        tagText=input.getSubstring(openBracketIndex + 1,closeBracketIndex).toString();
        pos1=closeBracketIndex + 1;
      }
 while (tagText.endsWith("]]") == false);
      input.setPosition(closeBracketIndex + 1);
      lastText=tagText;
      lastType=ELEMENT_TYPE.CDATA;
      return;
    }
  }
  if (tagText.charAt(0) == '?') {
    lastType=ELEMENT_TYPE.PROCESSING_INSTRUCTION;
    input.setPosition(closeBracketIndex + 1);
    return;
  }
  if (tagText.startsWith("!DOCTYPE")) {
    lastType=ELEMENT_TYPE.DOCTYPE;
    doctype=input.getSubstring(openBracketIndex + 1,closeBracketIndex);
    input.setPosition(closeBracketIndex + 1);
    return;
  }
  lastType=ELEMENT_TYPE.SPECIAL_TAG;
  input.setPosition(closeBracketIndex + 1);
}
