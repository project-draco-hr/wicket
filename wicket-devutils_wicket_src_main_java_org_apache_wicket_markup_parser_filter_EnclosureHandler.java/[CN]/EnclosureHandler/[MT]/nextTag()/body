{
  final ComponentTag tag=nextComponentTag();
  if (tag == null) {
    return tag;
  }
  final boolean isWicketTag=tag instanceof WicketTag;
  final boolean isEnclosureTag=isWicketTag && ((WicketTag)tag).isEnclosureTag();
  if (isEnclosureTag) {
    if (tag.isOpen()) {
      if (stack == null) {
        stack=new Stack<ComponentTag>();
      }
      stack.push(tag);
    }
 else     if (tag.isClose()) {
      if (stack == null) {
        throw new ParseException("Missing open tag for Enclosure: " + tag.toString(),tag.getPos());
      }
      ComponentTag lastEnclosure=stack.pop();
      if (childId != null) {
        lastEnclosure.put(CHILD_ATTRIBUTE,childId);
        lastEnclosure.setModified(true);
        childId=null;
      }
      if (stack.size() == 0) {
        stack=null;
      }
    }
 else {
      throw new ParseException("Open-close tag not allowed for Enclosure: " + tag.toString(),tag.getPos());
    }
  }
 else   if ((tag.getId() != null) && (isWicketTag == false) && (stack != null)) {
    ComponentTag lastEnclosure=stack.lastElement();
    if (lastEnclosure.getString(CHILD_ATTRIBUTE) == null) {
      if (childId != null) {
        throw new ParseException("Use <wicket:enclosure child='xxx'> to name the child component",tag.getPos());
      }
      childId=tag.getId();
    }
  }
  return tag;
}
