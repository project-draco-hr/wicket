{
  final MarkupFilterList filters=new MarkupFilterList(){
    private static final long serialVersionUID=1L;
    /** 
 * @see org.apache.wicket.markup.MarkupFactory.MarkupFilterList#onAdd(org.apache.wicket.markup.parser.IMarkupFilter)
 */
    @Override protected IMarkupFilter onAdd(    final IMarkupFilter filter){
      return MarkupParser.this.onAppendMarkupFilter(filter);
    }
  }
;
  MarkupResourceStream markupResourceStream=markup.getMarkupResourceStream();
  filters.add(new WicketTagIdentifier(markupResourceStream));
  filters.add(new HtmlHandler());
  filters.add(new WicketRemoveTagHandler());
  filters.add(new WicketLinkTagHandler());
  filters.add(new WicketNamespaceHandler(markupResourceStream));
  if ((markupResourceStream != null) && (markupResourceStream.getResource() != null)) {
    final ContainerInfo containerInfo=markupResourceStream.getContainerInfo();
    if (containerInfo != null) {
      filters.add(new WicketMessageTagHandler());
      if (Page.class.isAssignableFrom(containerInfo.getContainerClass())) {
        filters.add(new HtmlHeaderSectionHandler(markup));
      }
      filters.add(new HeadForceTagIdHandler(containerInfo.getContainerClass()));
    }
  }
  filters.add(new OpenCloseTagExpander());
  filters.add(new RelativePathPrefixHandler());
  filters.add(new EnclosureHandler());
  filters.add(new InlineEnclosureHandler());
  filters.add(new StyleAndScriptIdentifier(markup));
  filters.add(new ConditionalCommentFilter());
  return filters;
}
