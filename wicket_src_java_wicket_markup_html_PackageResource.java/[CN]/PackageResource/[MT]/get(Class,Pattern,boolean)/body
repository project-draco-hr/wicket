{
  final List<PackageResource> resources=new ArrayList<PackageResource>();
  String packageRef=Strings.replaceAll(PackageName.forClass(scope).getName(),".","/").toString();
  ClassLoader loader=scope.getClassLoader();
  try {
    Enumeration packageResources=loader.getResources(packageRef);
    while (packageResources.hasMoreElements()) {
      URL resource=(URL)packageResources.nextElement();
      URLConnection connection=resource.openConnection();
      if (connection instanceof JarURLConnection) {
        JarFile jf=((JarURLConnection)connection).getJarFile();
        scanJarFile(scope,pattern,recurse,resources,packageRef,jf);
      }
 else {
        String absolutePath=scope.getResource("").toExternalForm();
        File basedir;
        URI uri;
        try {
          uri=new URI(absolutePath);
        }
 catch (        URISyntaxException e) {
          throw new RuntimeException(e);
        }
        try {
          basedir=new File(uri);
        }
 catch (        IllegalArgumentException e) {
          log.debug("Can't construct the uri as a file: " + absolutePath);
          String jarZipPart=uri.getSchemeSpecificPart();
          String lowerJarZipPart=jarZipPart.toLowerCase();
          int index=lowerJarZipPart.indexOf(".zip");
          if (index == -1) {
            index=lowerJarZipPart.indexOf(".jar");
          }
          if (index == -1) {
            throw e;
          }
          String filename=jarZipPart.substring(0,index + 4);
          log.debug("trying the filename: " + filename + " to load as a zip/jar.");
          JarFile jarFile=new JarFile(filename,false);
          scanJarFile(scope,pattern,recurse,resources,packageRef,jarFile);
          return resources.toArray(new PackageResource[resources.size()]);
        }
        if (!basedir.isDirectory()) {
          throw new IllegalStateException("unable to read resources from directory " + basedir);
        }
        addResources(scope,pattern,resources,new StringBuffer(""),basedir,recurse);
      }
    }
  }
 catch (  IOException e) {
    throw new WicketRuntimeException(e);
  }
  return resources.toArray(new PackageResource[resources.size()]);
}
