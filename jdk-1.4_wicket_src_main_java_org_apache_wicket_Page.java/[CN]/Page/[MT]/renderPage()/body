{
  if (!isAttached()) {
    attach();
  }
  if (!isActionAuthorized(RENDER)) {
    if (log.isDebugEnabled()) {
      log.debug("Page not allowed to render: " + this);
    }
    throw new UnauthorizedActionException(this,Component.RENDER);
  }
  renderedComponents=null;
  stateless=null;
  setFormComponentValuesFromCookies();
  visitChildren(IFeedback.class,new IVisitor(){
    public Object component(    Component component){
      ((IFeedback)component).updateFeedback();
      return IVisitor.CONTINUE_TRAVERSAL;
    }
  }
);
  if (this instanceof IFeedback) {
    ((IFeedback)this).updateFeedback();
  }
  try {
    prepareForRender();
  }
 catch (  RuntimeException e) {
    try {
      afterRender();
    }
 catch (    RuntimeException e2) {
    }
    throw e;
  }
  setRenderAllowed(isActionAuthorized(RENDER));
  visitChildren(new IVisitor(){
    public Object component(    final Component component){
      final boolean renderAllowed=component.isActionAuthorized(RENDER);
      component.setRenderAllowed(renderAllowed);
      return IVisitor.CONTINUE_TRAVERSAL;
    }
  }
);
  try {
    render(null);
  }
  finally {
    afterRender();
  }
  checkRendering(this);
  if (Application.get().getDebugSettings().getComponentUseCheck()) {
    visitChildren(new IVisitor(){
      public Object component(      Component component){
        component.setMetaData(Component.CONSTRUCTED_AT_KEY,null);
        component.setMetaData(Component.ADDED_AT_KEY,null);
        return CONTINUE_TRAVERSAL;
      }
    }
);
  }
  if (!isPageStateless()) {
    Session.get().getSessionStore().getSessionId(RequestCycle.get().getRequest(),true);
    getSession().touch(this);
  }
}
