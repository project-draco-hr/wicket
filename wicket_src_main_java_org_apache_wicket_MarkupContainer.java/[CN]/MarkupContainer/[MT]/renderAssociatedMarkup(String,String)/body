{
  final MarkupStream originalMarkupStream=getMarkupStream();
  final MarkupStream associatedMarkupStream=new MarkupStream(getMarkup(null));
  setMarkupStream(associatedMarkupStream);
  MarkupElement elem=associatedMarkupStream.get();
  if ((elem instanceof ComponentTag) == false) {
    associatedMarkupStream.throwMarkupException("Expected the open tag. " + exceptionMessage);
  }
  ComponentTag associatedMarkupOpenTag=(ComponentTag)elem;
  if (!((associatedMarkupOpenTag != null) && associatedMarkupOpenTag.isOpen() && (associatedMarkupOpenTag instanceof WicketTag))) {
    associatedMarkupStream.throwMarkupException(exceptionMessage);
  }
  try {
    setIgnoreAttributeModifier(true);
    renderComponentTag(associatedMarkupOpenTag);
    associatedMarkupStream.next();
    String className=null;
    if (getApplication().getDebugSettings().isOutputMarkupContainerClassName()) {
      Class<?> klass=getClass();
      while (klass.isAnonymousClass()) {
        klass=klass.getSuperclass();
      }
      className=klass.getName();
      getResponse().write("<!-- MARKUP FOR ");
      getResponse().write(className);
      getResponse().write(" BEGIN -->");
    }
    renderComponentTagBody(associatedMarkupStream,associatedMarkupOpenTag);
    if (getApplication().getDebugSettings().isOutputMarkupContainerClassName()) {
      getResponse().write("<!-- MARKUP FOR ");
      getResponse().write(className);
      getResponse().write(" END -->");
    }
    renderClosingComponentTag(associatedMarkupStream,associatedMarkupOpenTag,false);
    setMarkupStream(originalMarkupStream);
  }
  finally {
    setIgnoreAttributeModifier(false);
  }
}
