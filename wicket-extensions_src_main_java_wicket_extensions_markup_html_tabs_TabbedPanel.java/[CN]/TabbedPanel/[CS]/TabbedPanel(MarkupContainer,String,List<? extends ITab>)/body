{
  super(parent,id,new Model<Integer>(new Integer(-1)));
  if (tabs == null) {
    throw new IllegalArgumentException("argument [tabs] cannot be null");
  }
  if (tabs.size() < 1) {
    throw new IllegalArgumentException("argument [tabs] must contain a list of at least one tab");
  }
  this.tabs=tabs;
  final IModel<Integer> tabCount=new AbstractReadOnlyModel<Integer>(){
    private static final long serialVersionUID=1L;
    @Override public Integer getObject(){
      return TabbedPanel.this.tabs.size();
    }
  }
;
  new Loop(this,"tabs",tabCount){
    private static final long serialVersionUID=1L;
    @Override protected void populateItem(    LoopItem item){
      final int index=item.getIteration();
      final ITab tab=(TabbedPanel.this.tabs.get(index));
      final int selected=getSelectedTab();
      final WebMarkupContainer titleLink=newLink(item,"link",index);
      newTabLabel(titleLink,"title",tab.getTitle());
      item.add(new SimpleAttributeModifier("class","selected"){
        private static final long serialVersionUID=1L;
        @Override public boolean isEnabled(){
          return index == selected;
        }
      }
);
      if (item.getIteration() == getIterations() - 1) {
        item.add(new AttributeAppender("class",true,new Model<String>("last")," "));
      }
    }
  }
;
  setSelectedTab(0);
}
