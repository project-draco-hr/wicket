{
  if (this.row == row) {
    info.node=this;
    info.isNodeParentNode=false;
    info.childIndex=childIndex;
    return true;
  }
  TreeStateNode child;
  TreeStateNode lastChild=null;
  for (int counter=0, maxCounter=getChildCount(); counter < maxCounter; counter++) {
    child=(TreeStateNode)getChildAt(counter);
    if (child.row > row) {
      if (counter == 0) {
        info.node=this;
        info.isNodeParentNode=true;
        info.childIndex=row - this.row - 1;
        return true;
      }
 else       if (lastChild != null) {
        int lastChildEndRow=1 + child.row - (child.childIndex - lastChild.childIndex);
        if (row < lastChildEndRow) {
          return lastChild.getPathForRow(row,lastChildEndRow,info);
        }
        info.node=this;
        info.isNodeParentNode=true;
        info.childIndex=row - lastChildEndRow + lastChild.childIndex + 1;
        return true;
      }
    }
    lastChild=child;
  }
  if (lastChild != null) {
    int lastChildEndRow=nextRow - (childCount - lastChild.childIndex) + 1;
    if (row < lastChildEndRow) {
      return lastChild.getPathForRow(row,lastChildEndRow,info);
    }
    info.node=this;
    info.isNodeParentNode=true;
    info.childIndex=row - lastChildEndRow + lastChild.childIndex + 1;
    return true;
  }
 else {
    int retChildIndex=row - this.row - 1;
    if (retChildIndex >= childCount) {
      return false;
    }
    info.node=this;
    info.isNodeParentNode=true;
    info.childIndex=retChildIndex;
    return true;
  }
}
