{
  modelsMap.put("AUDI",Arrays.asList(new String[]{"A4","A6","TT"}));
  modelsMap.put("CADILLAC",Arrays.asList(new String[]{"CTS","DTS","ESCALADE","SRX","DEVILLE"}));
  modelsMap.put("FORD",Arrays.asList(new String[]{"CROWN","ESCAPE","EXPEDITION","EXPLORER","F-150"}));
  IModel<List<String>> makeChoices=new AbstractReadOnlyModel<List<String>>(){
    @Override public List<String> getObject(){
      Set<String> keys=modelsMap.keySet();
      List<String> list=new ArrayList<String>(keys);
      return list;
    }
  }
;
  IModel<List<String>> modelChoices=new AbstractReadOnlyModel<List<String>>(){
    @SuppressWarnings("unchecked") @Override public List<String> getObject(){
      List<String> models=modelsMap.get(selectedMake);
      if (models == null) {
        models=Collections.EMPTY_LIST;
      }
      return models;
    }
  }
;
  Form form=new Form(this,"form");
  final DropDownChoice makes=new DropDownChoice<String>(form,"makes",new PropertyModel<String>(this,"selectedMake"),makeChoices);
  final DropDownChoice<String> models=new DropDownChoice<String>(form,"models",new Model<String>(),modelChoices);
  models.setOutputMarkupId(true);
  makes.add(new AjaxFormComponentUpdatingBehavior(ClientEvent.CHANGE){
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      target.addComponent(models);
    }
  }
);
}
