{
  final WebRequestCycle cycle=(WebRequestCycle)getRequestCycle();
  final IRequestTarget target=cycle.getRequestTarget();
  int initialAccessStackSize=0;
  if (getApplication().getRequestCycleSettings().getRenderStrategy() == IRequestCycleSettings.REDIRECT_TO_RENDER && target instanceof RedirectPageRequestTarget) {
    initialAccessStackSize=1;
  }
  final ArrayListStack accessStack=getPageMap().getAccessStack();
  if (accessStack.size() > initialAccessStackSize) {
    CharSequence url=null;
    if (target instanceof IBookmarkablePageRequestTarget) {
      IBookmarkablePageRequestTarget current=(IBookmarkablePageRequestTarget)target;
      BookmarkablePageRequestTarget redirect=new BookmarkablePageRequestTarget(getSession().createAutoPageMapName(),current.getPageClass(),current.getPageParameters());
      url=cycle.urlFor(redirect);
    }
 else {
      url=urlFor(INewBrowserWindowListener.INTERFACE);
    }
    final BodyContainer body=getBodyContainer();
    final Cookie[] cookies=cycle.getWebRequest().getCookies();
    if (cookies == null || body == null) {
      if (cookies != null && body == null && log.isWarnEnabled()) {
        Application app=getApplication();
        MissingBodyTagLoggedMetaData meta=(MissingBodyTagLoggedMetaData)app.getMetaData(MISSING_BODY_TAG_LOGGED_MDK);
        if (meta == null) {
          meta=new MissingBodyTagLoggedMetaData();
          app.setMetaData(MISSING_BODY_TAG_LOGGED_MDK,meta);
        }
        Class pageClass=WebPage.this.getClass();
        if (!meta.missingBodyTagsLogged.contains(pageClass)) {
          log.warn("Page with class " + pageClass.getName() + " does not have a body tag. It is advisable to have"+ " a body tag pair, as multi window support might be problematic without.");
          meta.missingBodyTagsLogged.add(pageClass);
        }
      }
      response.write("<script language=\"javascript\">if((history.length == 0 && document.all) || (history.length == 1 && !document.all)){ if (!document.all) window.location.hash='some-random-hash!'; document.location.href = '");
      response.write(url);
      response.write("'}</script>");
    }
 else {
      if (onUnLoadModel == null) {
        onUnLoadModel=new Model(){
          private static final long serialVersionUID=1L;
          /** 
 * @see wicket.model.Model#getObject(wicket.Component)
 */
          public Object getObject(          Component component){
            return "deleteCookie('pagemap-" + getPageMap().getName() + "');";
          }
        }
;
        body.addOnUnLoadModifier(onUnLoadModel);
      }
      final String pageMapName=getPageMap().getName();
      response.write("<script type=\"text/javascript\" src=\"");
      response.write(urlFor(cookiesResource));
      response.write("\"></script>\n");
      response.write("<script language=\"javascript\">\n");
      response.write("var pagemapcookie = getCookie('pagemap-");
      response.write(pageMapName);
      response.write("');\n");
      response.write("if(!pagemapcookie && pagemapcookie != '1'){setCookie('pagemap-");
      response.write(pageMapName);
      response.write("',1);}\n");
      response.write("else {document.location.href = '");
      response.write(url);
      response.write("';}\n");
      response.write("</script>\n");
    }
  }
}
