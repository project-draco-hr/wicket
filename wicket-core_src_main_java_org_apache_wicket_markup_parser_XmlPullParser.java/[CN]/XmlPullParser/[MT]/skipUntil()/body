{
  final int startIndex=input.getPosition();
  final int tagNameLen=skipUntilText.length();
  int pos=input.getPosition() - 1;
  String endTagText=null;
  int lastPos=0;
  while (!skipUntilText.equalsIgnoreCase(endTagText)) {
    pos=input.find("</",pos + 1);
    if ((pos == -1) || ((pos + (tagNameLen + 2)) >= input.size())) {
      throw new ParseException(skipUntilText + " tag not closed" + getLineAndColumnText(),startIndex);
    }
    lastPos=pos + 2;
    endTagText=input.getSubstring(lastPos,lastPos + tagNameLen).toString();
  }
  input.setPosition(pos);
  lastText=input.getSubstring(startIndex,pos);
  lastType=HttpTagType.BODY;
  lastPos=input.find('>',lastPos + tagNameLen);
  if (lastPos == -1) {
    throw new ParseException(skipUntilText + " tag not closed" + getLineAndColumnText(),startIndex);
  }
  skipUntilText=null;
}
