{
  if (uploadedFiles == null && useMultiPartContentType == false) {
    if (post.getParameterNames().size() == 0) {
      return "".getBytes();
    }
    Url url=new Url();
    for (    final String parameterName : post.getParameterNames()) {
      List<StringValue> values=post.getParameterValues(parameterName);
      for (      StringValue value : values) {
        url.addQueryParameter(parameterName,value.toString());
      }
    }
    String body=url.toString().substring(1);
    return body.getBytes();
  }
  try {
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    for (    final String parameterName : post.getParameterNames()) {
      List<StringValue> values=post.getParameterValues(parameterName);
      for (      StringValue value : values) {
        newAttachment(out);
        out.write("; name=\"".getBytes());
        out.write(parameterName.getBytes());
        out.write("\"".getBytes());
        out.write(crlf.getBytes());
        out.write(crlf.getBytes());
        out.write(value.toString().getBytes());
        out.write(crlf.getBytes());
      }
    }
    if (uploadedFiles != null) {
      for (      Map.Entry<String,List<UploadedFile>> entry : uploadedFiles.entrySet()) {
        String fieldName=entry.getKey();
        List<UploadedFile> files=entry.getValue();
        for (        UploadedFile uf : files) {
          newAttachment(out);
          out.write("; name=\"".getBytes());
          out.write(fieldName.getBytes());
          out.write("\"; filename=\"".getBytes());
          if (uf.getFile() != null) {
            out.write(uf.getFile().getName().getBytes());
          }
          out.write("\"".getBytes());
          out.write(crlf.getBytes());
          out.write("Content-Type: ".getBytes());
          out.write(uf.getContentType().getBytes());
          out.write(crlf.getBytes());
          out.write(crlf.getBytes());
          if (uf.getFile() != null) {
            FileInputStream fis=new FileInputStream(uf.getFile());
            try {
              IOUtils.copy(fis,out);
            }
  finally {
              fis.close();
            }
          }
          out.write(crlf.getBytes());
        }
      }
    }
    out.write(boundary.getBytes());
    out.write("--".getBytes());
    out.write(crlf.getBytes());
    return out.toByteArray();
  }
 catch (  IOException e) {
    throw new WicketRuntimeException(e);
  }
}
