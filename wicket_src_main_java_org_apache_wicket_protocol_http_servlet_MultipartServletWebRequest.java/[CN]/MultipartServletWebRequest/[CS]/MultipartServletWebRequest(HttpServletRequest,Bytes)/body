{
  super(request);
  if (maxSize == null) {
    throw new IllegalArgumentException("argument maxSize must be not null");
  }
  final boolean isMultipart=ServletFileUpload.isMultipartContent(request);
  if (!isMultipart) {
    throw new IllegalStateException("ServletRequest does not contain multipart content");
  }
  DiskFileItemFactory factory=new DiskFileItemFactory();
  ServletFileUpload upload=new ServletFileUpload(factory);
  String encoding=request.getCharacterEncoding();
  if (encoding != null) {
    upload.setHeaderEncoding(encoding);
  }
  upload.setSizeMax(maxSize.bytes());
  final List<FileItem> items;
  if (wantUploadProgressUpdates()) {
    ServletRequestContext ctx=new ServletRequestContext(request){
      @Override public InputStream getInputStream() throws IOException {
        return new CountingInputStream(super.getInputStream());
      }
    }
;
    totalBytes=request.getContentLength();
    onUploadStarted(totalBytes);
    items=upload.parseRequest(ctx);
    onUploadCompleted();
  }
 else {
    items=upload.parseRequest(request);
  }
  for (Iterator<FileItem> i=items.iterator(); i.hasNext(); ) {
    final FileItem item=i.next();
    if (item.isFormField()) {
      final String value;
      if (encoding != null) {
        try {
          value=item.getString(encoding);
        }
 catch (        UnsupportedEncodingException e) {
          throw new WicketRuntimeException(e);
        }
      }
 else {
        value=item.getString();
      }
      addParameter(item.getFieldName(),value);
    }
 else {
      files.put(item.getFieldName(),item);
    }
  }
}
