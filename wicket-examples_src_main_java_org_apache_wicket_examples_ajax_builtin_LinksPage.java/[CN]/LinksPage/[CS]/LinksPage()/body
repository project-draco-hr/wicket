{
  final Label c1=new Label("c1",new PropertyModel<Integer>(this,"counter1"));
  c1.setOutputMarkupId(true);
  add(c1);
  final Label c2=new Label("c2",new PropertyModel<Integer>(this,"counter2"));
  c2.setOutputMarkupId(true);
  add(c2);
  final Label c3=new Label("c3",new PropertyModel<Integer>(this,"counter3"));
  c3.setOutputMarkupId(true);
  add(c3);
  add(new AjaxLink<Void>("c1-link"){
    @Override public void onClick(    AjaxRequestTarget target){
      counter1++;
      target.add(c1);
    }
  }
);
  add(new AjaxFallbackLink<Void>("c2-link"){
    @Override public void onClick(    AjaxRequestTarget target){
      counter2++;
      if (target != null) {
        target.add(c2);
      }
    }
  }
);
  add(new IndicatingAjaxLink("c3-link"){
    @Override public void onClick(    AjaxRequestTarget target){
      counter3++;
      target.add(c3);
      try {
        Thread.sleep(5000);
      }
 catch (      InterruptedException e) {
      }
    }
  }
);
  add(new AjaxLink<Void>("success-link"){
    @Override public void onClick(    AjaxRequestTarget target){
    }
    @Override protected void updateAjaxAttributes(    AjaxRequestAttributes attributes){
      super.updateAjaxAttributes(attributes);
      IAjaxCallListener ajaxCallListener=new AjaxCallListener(){
        @Override public CharSequence getSuccessHandler(        Component component){
          return "alert('Success');";
        }
        @Override public CharSequence getBeforeHandler(        Component component){
          return "alert('Before ajax call');";
        }
        @Override public CharSequence getFailureHandler(        Component component){
          return "alert('Failure');";
        }
      }
;
      attributes.getAjaxCallListeners().add(ajaxCallListener);
      List<CharSequence> urlArgumentMethods=attributes.getDynamicExtraParameters();
      urlArgumentMethods.add("return {'htmlname': document.documentElement.tagName};");
      urlArgumentMethods.add("return {'bodyname': document.body.tagName};");
    }
  }
);
  add(new AjaxLink<Void>("failure-link"){
    @Override public void onClick(    AjaxRequestTarget target){
      getApplication().getExceptionSettings().setAjaxErrorHandlingStrategy(AjaxErrorStrategy.INVOKE_FAILURE_HANDLER);
      throw new WicketRuntimeException("Failure link clicked");
    }
    @Override protected void updateAjaxAttributes(    AjaxRequestAttributes attributes){
      super.updateAjaxAttributes(attributes);
      IAjaxCallListener ajaxCallListener=new AjaxCallListener(){
        @Override public CharSequence getBeforeHandler(        Component component){
          return "alert('Before ajax call');";
        }
        @Override public CharSequence getSuccessHandler(        Component component){
          return "alert('Success');";
        }
        @Override public CharSequence getFailureHandler(        Component component){
          return "alert('Failure');";
        }
      }
;
      attributes.getAjaxCallListeners().add(ajaxCallListener);
    }
  }
);
  add(new AjaxLink<Void>("set-response-page"){
    @Override public void onClick(    AjaxRequestTarget target){
      setResponsePage(new LinksPage());
    }
  }
);
  add(new AjaxLink<Void>("exception"){
    @Override public void onClick(    AjaxRequestTarget target){
      getApplication().getExceptionSettings().setAjaxErrorHandlingStrategy(AjaxErrorStrategy.REDIRECT_TO_ERROR_PAGE);
      throw new RuntimeException("test whether the exception handling works");
    }
  }
);
}
