{
  JSONObject attributesJson=new JSONObject();
  try {
    attributesJson.put("u",getCallbackUrl());
    Method method=attributes.getMethod();
    if (Method.POST == method) {
      attributesJson.put("m",method);
    }
    if (component instanceof Page == false) {
      String componentId=component.getMarkupId();
      attributesJson.put("c",componentId);
    }
    String formId=attributes.getFormId();
    if (Strings.isEmpty(formId) == false) {
      attributesJson.put("f",formId);
    }
    if (attributes.isMultipart()) {
      attributesJson.put("mp",true);
    }
    String submittingComponentId=attributes.getSubmittingComponentName();
    if (Strings.isEmpty(submittingComponentId) == false) {
      attributesJson.put("sc",submittingComponentId);
    }
    String indicatorId=findIndicatorId();
    if (Strings.isEmpty(indicatorId) == false) {
      attributesJson.put("i",indicatorId);
    }
    for (    IAjaxCallListener ajaxCallListener : attributes.getAjaxCallListeners()) {
      CharSequence beforeHandler=ajaxCallListener.getBeforeHandler(component);
      if (Strings.isEmpty(beforeHandler) == false) {
        attributesJson.append("bh",beforeHandler);
      }
      CharSequence afterHandler=ajaxCallListener.getAfterHandler(component);
      if (Strings.isEmpty(afterHandler) == false) {
        attributesJson.append("ah",afterHandler);
      }
      CharSequence successHandler=ajaxCallListener.getSuccessHandler(component);
      if (Strings.isEmpty(successHandler) == false) {
        attributesJson.append("sh",successHandler);
      }
      CharSequence failureHandler=ajaxCallListener.getFailureHandler(component);
      if (Strings.isEmpty(failureHandler) == false) {
        attributesJson.append("fh",failureHandler);
      }
      CharSequence completeHandler=ajaxCallListener.getCompleteHandler(component);
      if (Strings.isEmpty(completeHandler) == false) {
        attributesJson.append("coh",completeHandler);
      }
    }
    for (    JavaScriptPrecondition pre : attributes.getPreconditions()) {
      String precondition=pre.toString();
      if (Strings.isEmpty(precondition) == false) {
        attributesJson.append("pre",precondition);
      }
    }
    JSONObject extraParameters=new JSONObject();
    Iterator<Entry<String,Object>> itor=attributes.getExtraParameters().entrySet().iterator();
    while (itor.hasNext()) {
      Entry<String,Object> entry=itor.next();
      String name=entry.getKey();
      Object value=entry.getValue();
      extraParameters.accumulate(name,value);
    }
    if (extraParameters.length() > 0) {
      attributesJson.put("ep",extraParameters);
    }
    List<CharSequence> urlArgumentMethods=attributes.getDynamicExtraParameters();
    if (urlArgumentMethods != null) {
      for (      CharSequence urlArgument : urlArgumentMethods) {
        attributesJson.append("dep",urlArgument);
      }
    }
    if (attributes.isAsynchronous() == false) {
      attributesJson.put("async",false);
    }
    String[] eventNames=attributes.getEventNames();
    if (eventNames.length == 1) {
      attributesJson.put("e",eventNames[0]);
    }
 else {
      for (      String eventName : eventNames) {
        attributesJson.append("e",eventName);
      }
    }
    AjaxChannel channel=attributes.getChannel();
    if (channel != null) {
      attributesJson.put("ch",channel);
    }
    if (attributes.isAllowDefault()) {
      attributesJson.put("ad",true);
    }
    Integer requestTimeout=attributes.getRequestTimeout();
    if (requestTimeout != null) {
      attributesJson.put("rt",requestTimeout);
    }
    boolean wicketAjaxResponse=attributes.isWicketAjaxResponse();
    if (wicketAjaxResponse == false) {
      attributesJson.put("wr",false);
    }
    String dataType=attributes.getDataType();
    if (AjaxRequestAttributes.XML_DATA_TYPE.equals(dataType) == false) {
      attributesJson.put("dt",dataType);
    }
    ThrottlingSettings throttlingSettings=attributes.getThrottlingSettings();
    if (throttlingSettings != null) {
      JSONObject throttlingSettingsJson=new JSONObject();
      throttlingSettingsJson.put("id",throttlingSettings.getId());
      throttlingSettingsJson.put("d",throttlingSettings.getDelay().getMilliseconds());
      if (throttlingSettings.getPostponeTimerOnUpdate()) {
        throttlingSettingsJson.put("p",true);
      }
      attributesJson.put("tr",throttlingSettingsJson);
    }
    postprocessConfiguration(attributesJson,component);
  }
 catch (  JSONException e) {
    throw new WicketRuntimeException(e);
  }
  String attributesAsJson=attributesJson.toString();
  return attributesAsJson;
}
