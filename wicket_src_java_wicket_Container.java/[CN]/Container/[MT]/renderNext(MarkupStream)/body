{
  final MarkupElement element=markupStream.get();
  if ((element instanceof ComponentTag) && !markupStream.atCloseTag()) {
    final ComponentTag tag=(ComponentTag)element;
    final String componentName=tag.getComponentName();
    Component component=get(componentName);
    if (component != null) {
      if (log.isDebugEnabled()) {
        log.debug("Begin render of sub-component " + component);
      }
      component.render();
      if (log.isDebugEnabled()) {
        log.debug("End render of sub-component " + component);
      }
    }
 else {
      final List componentResolvers=this.getApplicationSettings().getComponentResolvers();
      final Iterator iter=componentResolvers.iterator();
      while (iter.hasNext()) {
        final IComponentResolver resolver=(IComponentResolver)iter.next();
        if (resolver.resolve(this,markupStream,tag) == true) {
          return;
        }
      }
      Container container=this;
      while (container != null) {
        if (container.resolveComponent(markupStream,tag) == true) {
          return;
        }
        container=container.findParent(Container.class);
      }
      markupStream.throwMarkupException("Unable to find component named '" + componentName + "' in "+ this);
    }
  }
 else {
    log.debug("Rendering raw markup");
    getResponse().write(element.toString());
    markupStream.next();
  }
}
