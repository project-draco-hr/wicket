{
  final MarkupStream stream=getMarkupStream(component);
  final Response response=component.getResponse();
  stream.setCurrentIndex(0);
  boolean insideBorderMarkup=false;
  while (stream.hasMore()) {
    MarkupElement e=stream.get();
    stream.next();
    if (e instanceof WicketTag) {
      WicketTag wt=(WicketTag)e;
      if (!insideBorderMarkup) {
        if (wt.isBorderTag() && wt.isOpen()) {
          insideBorderMarkup=true;
          continue;
        }
 else {
          throw new WicketRuntimeException("Unexpected tag encountered in markup of component border " + getClass().getName() + ". Tag: "+ wt.toString()+ ", expected tag: <wicket:border>");
        }
      }
 else {
        if (wt.isBodyTag()) {
          break;
        }
 else {
          throw new WicketRuntimeException("Unexpected tag encountered in markup of component border " + getClass().getName() + ". Tag: "+ wt.toString()+ ", expected tag: <wicket:body> or </wicket:body>");
        }
      }
    }
    if (insideBorderMarkup) {
      response.write(e.toCharSequence());
    }
  }
  if (!stream.hasMore()) {
    throw new WicketRuntimeException("Markup for component border " + getClass().getName() + " ended prematurely, was expecting </wicket:border>");
  }
}
