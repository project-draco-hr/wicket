{
  final String methodName="set" + name;
  final Method[] methods=object.getClass().getMethods();
  Method method=null;
  for (int i=0; i < methods.length; i++) {
    if (methods[i].getName().equalsIgnoreCase(methodName)) {
      method=methods[i];
    }
  }
  if (method == null) {
    throw new MarkupException("Unable to initialize Component. Method with name " + methodName + " not found");
  }
  final Class[] parameterClasses=method.getParameterTypes();
  if (parameterClasses.length != 1) {
    throw new MarkupException("Unable to initialize Component. Method with name " + methodName + " must have one and only one parameter");
  }
  final Class paramClass=parameterClasses[0];
  try {
    if (paramClass.equals(String.class)) {
      method.invoke(object,new Object[]{value});
    }
 else     if (paramClass.equals(int.class)) {
      method.invoke(object,new Object[]{new Integer(value)});
    }
 else     if (paramClass.equals(long.class)) {
      method.invoke(object,new Object[]{new Long(value)});
    }
  }
 catch (  IllegalAccessException ex) {
    throw new MarkupException("Unable to initialize Component. Failure while invoking method " + methodName + ". Cause: "+ ex);
  }
catch (  InvocationTargetException ex) {
    throw new MarkupException("Unable to initialize Component. Failure while invoking method " + methodName + ". Cause: "+ ex);
  }
catch (  NumberFormatException ex) {
    throw new MarkupException("Unable to initialize Component. Failure while invoking method " + methodName + ". Cause: "+ ex);
  }
}
