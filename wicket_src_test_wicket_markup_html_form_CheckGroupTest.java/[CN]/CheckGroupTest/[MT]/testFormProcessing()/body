{
  final String check1="check1-selection";
  final String check2="check2-selection";
  MockModelObject modelObject=new MockModelObject();
  modelObject.setProp2(check2);
  List list=new ArrayList();
  Model<List> model=new Model<List>(list);
  final CheckGroup group2=new CheckGroup(new EmptyPage(),"group2",model);
  assertTrue(group2.getModelObject() == list);
  final CheckGroup group3=new CheckGroup(new EmptyPage(),"group3",list);
  assertTrue(group3.getModelObject() == list);
  RequestCycle cycle=application.createRequestCycle();
  MockPage page=new MockPage();
  final Form form=new Form(page,"form",new CompoundPropertyModel(modelObject));
  final CheckGroup group=new CheckGroup(form,"prop1");
  final WebMarkupContainer container=new WebMarkupContainer(group,"container");
  final Check<String> choice1=new Check<String>(container,"check1",new Model<String>(check1));
  final Check choice2=new Check(group,"prop2");
  modelObject.getProp1().add(check1);
  form.onFormSubmitted();
  assertTrue("running with nothing selected - model must be empty",modelObject.getProp1().size() == 0);
  application.getServletRequest().setParameter(group.getInputName(),choice1.getPath());
  form.onFormSubmitted();
  assertTrue("running with choice1 selected - model must only contain value of check1",modelObject.getProp1().size() == 1 && modelObject.getProp1().contains(check1));
  application.getServletRequest().setParameter(group.getInputName(),choice2.getPath());
  form.onFormSubmitted();
  assertTrue("running with choice2 selected - model must only contain value of check2",modelObject.getProp1().size() == 1 && modelObject.getProp1().contains(check2));
  application.getServletRequest().getParameterMap().put(group.getInputName(),new String[]{null,choice1.getPath(),null,choice2.getPath()});
  form.onFormSubmitted();
  assertTrue("running with choice1 and choice2 selected - model must only contain values of check1 and check2",modelObject.getProp1().size() == 2 && modelObject.getProp1().contains(check2) && modelObject.getProp1().contains(check1));
  application.getServletRequest().getParameterMap().put(group.getInputName(),new String[]{"some weird path to test error"});
  try {
    form.onFormSubmitted();
    fail("running with an invalid choice value in the request param, should fail");
  }
 catch (  WicketRuntimeException e) {
  }
}
