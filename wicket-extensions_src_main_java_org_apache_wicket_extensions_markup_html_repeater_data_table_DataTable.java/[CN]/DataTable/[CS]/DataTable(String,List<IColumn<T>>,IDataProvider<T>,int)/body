{
  super(id);
  if ((columns == null) || (columns.size() < 1)) {
    throw new IllegalArgumentException("Argument `columns` cannot be null or empty");
  }
  this.columns=columns;
  body=newBodyContainer("body");
  datagrid=new DataGridView<T>("rows",columns,dataProvider){
    private static final long serialVersionUID=1L;
    @SuppressWarnings({"rawtypes","unchecked"}) @Override protected Item newCellItem(    final String id,    final int index,    final IModel model){
      Item item=DataTable.this.newCellItem(id,index,model);
      final IColumn<T> column=DataTable.this.columns.get(index);
      if (column instanceof IStyledColumn) {
        item.add(new DataTable.CssAttributeBehavior(){
          private static final long serialVersionUID=1L;
          @Override protected String getCssClass(){
            return ((IStyledColumn<?>)column).getCssClass();
          }
        }
);
      }
      return item;
    }
    @Override protected Item<T> newRowItem(    final String id,    final int index,    final IModel<T> model){
      return DataTable.this.newRowItem(id,index,model);
    }
  }
;
  datagrid.setItemsPerPage(rowsPerPage);
  body.add(datagrid);
  add(body);
  topToolbars=new ToolbarsContainer("topToolbars");
  bottomToolbars=new ToolbarsContainer("bottomToolbars");
  add(topToolbars);
  add(bottomToolbars);
}
