{
  final String check1="check1-selection";
  final String check2="check2-selection";
  MockModelObject modelObject=new MockModelObject();
  modelObject.setProp2(check2);
  List list=new ArrayList();
  Model model=new Model((Serializable)list);
  final CheckGroup group2=new CheckGroup("group2",model);
  assertTrue(group2.getDefaultModelObject() == list);
  final CheckGroup group3=new CheckGroup("group3",list);
  assertTrue(group3.getDefaultModelObject() == list);
  RequestCycle cycle=tester.createRequestCycle();
  MockPage page=new MockPage();
  final Form form=new Form("form",new CompoundPropertyModel(modelObject)){
    private static final long serialVersionUID=1L;
    public String getMarkupId(){
      return "foo";
    }
  }
;
  final CheckGroup group=new CheckGroup("prop1");
  final WebMarkupContainer container=new WebMarkupContainer("container");
  final Check choice1=new Check("check1",new Model(check1));
  final Check choice2=new Check("prop2");
  page.add(form);
  form.add(group);
  group.add(container);
  container.add(choice1);
  group.add(choice2);
  modelObject.getProp1().add(check1);
  form.onFormSubmitted();
  assertTrue("running with nothing selected - model must be empty",modelObject.getProp1().size() == 0);
  tester.getServletRequest().setParameter(group.getInputName(),String.valueOf(choice1.getValue()));
  form.onFormSubmitted();
  assertTrue("running with choice1 selected - model must only contain value of check1",modelObject.getProp1().size() == 1 && modelObject.getProp1().contains(check1));
  tester.getServletRequest().setParameter(group.getInputName(),String.valueOf(choice2.getValue()));
  form.onFormSubmitted();
  assertTrue("running with choice2 selected - model must only contain value of check2",modelObject.getProp1().size() == 1 && modelObject.getProp1().contains(check2));
  tester.getServletRequest().getParameterMap().put(group.getInputName(),new String[]{null,String.valueOf(choice1.getValue()),null,String.valueOf(choice2.getValue())});
  form.onFormSubmitted();
  assertTrue("running with choice1 and choice2 selected - model must only contain values of check1 and check2",modelObject.getProp1().size() == 2 && modelObject.getProp1().contains(check2) && modelObject.getProp1().contains(check1));
  tester.getServletRequest().getParameterMap().put(group.getInputName(),new String[]{"some weird choice uuid to test error"});
  try {
    form.onFormSubmitted();
    fail("running with an invalid choice value in the request param, should fail");
  }
 catch (  WicketRuntimeException e) {
  }
}
