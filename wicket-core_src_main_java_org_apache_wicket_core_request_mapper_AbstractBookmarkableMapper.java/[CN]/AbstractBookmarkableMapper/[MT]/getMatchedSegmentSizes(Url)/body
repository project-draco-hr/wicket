{
  int[] ret=new int[pathSegments.size()];
  int segmentIndex=0;
  int pathSegmentIndex=0;
  for (  MountPathSegment curPathSegment : pathSegments.subList(0,pathSegments.size() - 1)) {
    boolean foundFixedPart=false;
    segmentIndex+=curPathSegment.getMinParameters();
    int max=Math.min(curPathSegment.getOptionalParameters() + 1,url.getSegments().size() - segmentIndex);
    for (int count=max - 1; count >= 0; count--) {
      if (url.getSegments().get(segmentIndex + count).equals(curPathSegment.getFixedPart())) {
        foundFixedPart=true;
        segmentIndex+=count + 1;
        ret[pathSegmentIndex]=count + curPathSegment.getMinParameters() + 1;
        break;
      }
    }
    if (!foundFixedPart)     return null;
    pathSegmentIndex++;
  }
  MountPathSegment lastSegment=pathSegments.get(pathSegments.size() - 1);
  segmentIndex+=lastSegment.getMinParameters();
  if (segmentIndex > url.getSegments().size())   return null;
  ret[pathSegmentIndex]=Math.min(lastSegment.getMaxParameters(),url.getSegments().size() - segmentIndex + lastSegment.getMinParameters());
  return ret;
}
