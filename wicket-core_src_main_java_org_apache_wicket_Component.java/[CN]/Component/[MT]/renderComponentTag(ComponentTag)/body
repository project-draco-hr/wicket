{
  if (needToRenderTag(tag)) {
    if (tag.hasBehaviors()) {
      Iterator<? extends Behavior> tagBehaviors=tag.getBehaviors();
      while (tagBehaviors.hasNext()) {
        final Behavior behavior=tagBehaviors.next();
        if (behavior.isEnabled(this)) {
          behavior.onComponentTag(this,tag);
        }
        behavior.detach(this);
      }
    }
    List<? extends Behavior> behaviors=getBehaviors();
    if ((behaviors != null) && !behaviors.isEmpty() && !tag.isClose()&& (isIgnoreAttributeModifier() == false)) {
      tag=tag.mutable();
      for (      Behavior behavior : behaviors) {
        if (isBehaviorAccepted(behavior)) {
          behavior.onComponentTag(this,tag);
        }
      }
    }
    if ((tag instanceof WicketTag) && !tag.isClose() && !getFlag(FLAG_IGNORE_ATTRIBUTE_MODIFIER)) {
      if (getFlag(FLAG_OUTPUT_MARKUP_ID)) {
        log.warn(String.format("Markup id set on a component that is usually not rendered into markup. " + "Markup id: %s, component id: %s, component tag: %s.",getMarkupId(),getId(),tag.getName()));
      }
      if (getFlag(FLAG_PLACEHOLDER)) {
        log.warn(String.format("Placeholder tag set on a component that is usually not rendered into markup. " + "Component id: %s, component tag: %s.",getId(),tag.getName()));
      }
    }
    tag.writeOutput(getResponse(),!needToRenderTag(null),getMarkup().getMarkupResourceStream().getWicketNamespace());
  }
}
