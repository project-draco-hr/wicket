{
  SortableContactDataProvider dp=new SortableContactDataProvider();
  final DataView<Contact> dataView=new DataView<Contact>("oir",dp){
    private static final long serialVersionUID=1L;
    @Override protected void populateItem(    final Item<Contact> item){
      Contact contact=item.getModelObject();
      item.add(new ActionPanel("actions",item.getModel()));
      item.add(new Link<Void>("toggleHighlite"){
        private static final long serialVersionUID=1L;
        @Override public void onClick(){
          HighlitableDataItem<Contact> hitem=(HighlitableDataItem<Contact>)item;
          hitem.toggleHighlite();
        }
      }
);
      item.add(new Label("contactid",String.valueOf(contact.getId())));
      item.add(new Label("firstname",contact.getFirstName()));
      item.add(new Label("lastname",contact.getLastName()));
      item.add(new Label("homephone",contact.getHomePhone()));
      item.add(new Label("cellphone",contact.getCellPhone()));
      item.add(AttributeModifier.replace("class",new AbstractReadOnlyModel<String>(){
        private static final long serialVersionUID=1L;
        @Override public String getObject(){
          return (item.getIndex() % 2 == 1) ? "even" : "odd";
        }
      }
));
    }
    @Override protected Item<Contact> newItem(    String id,    int index,    IModel<Contact> model){
      return new HighlitableDataItem<>(id,index,model);
    }
  }
;
  dataView.setItemsPerPage(8L);
  dataView.setItemReuseStrategy(ReuseIfModelsEqualStrategy.getInstance());
  add(new OrderByBorder("orderByFirstName","firstName",dp){
    private static final long serialVersionUID=1L;
    @Override protected void onSortChanged(){
      dataView.setCurrentPage(0);
    }
  }
);
  add(new OrderByBorder("orderByLastName","lastName",dp){
    private static final long serialVersionUID=1L;
    @Override protected void onSortChanged(){
      dataView.setCurrentPage(0);
    }
  }
);
  add(dataView);
  add(new PagingNavigator("navigator",dataView));
}
