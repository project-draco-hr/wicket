{
  base64Data=discardNonBase64(base64Data);
  if (base64Data.length == 0) {
    return new byte[0];
  }
  int numberQuadruple=(base64Data.length + 3) / FOURBYTE;
  byte decodedData[]=new byte[base64Data.length - numberQuadruple];
  byte b1=0, b2=0, b3=0, b4=0;
  int encodedIndex=0;
  int dataIndex=0;
  for (int i=0; i < numberQuadruple; i++) {
    dataIndex=i * 4;
    b1=base64Alphabet[base64Data[dataIndex]];
    b2=base64Alphabet[base64Data[dataIndex + 1]];
    if ((dataIndex + 3) < base64Data.length) {
      b3=base64Alphabet[base64Data[dataIndex + 2]];
      b4=base64Alphabet[base64Data[dataIndex + 3]];
      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);
      decodedData[encodedIndex + 1]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
      decodedData[encodedIndex + 2]=(byte)(b3 << 6 | b4);
    }
 else     if ((dataIndex + 2) < base64Data.length) {
      b3=base64Alphabet[base64Data[dataIndex + 2]];
      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);
      decodedData[encodedIndex + 1]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
    }
 else     if ((dataIndex + 1) < base64Data.length) {
      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);
    }
    encodedIndex+=3;
  }
  return decodedData;
}
