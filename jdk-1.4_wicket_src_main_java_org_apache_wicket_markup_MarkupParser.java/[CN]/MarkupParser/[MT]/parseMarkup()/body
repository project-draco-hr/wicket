{
  final boolean stripComments=markupSettings.getStripComments();
  final boolean compressWhitespace=markupSettings.getCompressWhitespace();
  try {
    int size=markup.size();
    ComponentTag tag;
    while (null != (tag=getNextTag())) {
      boolean add=(tag.getId() != null);
      if (!add && tag.getXmlTag().isClose()) {
        add=((tag.getOpenTag() != null) && (tag.getOpenTag().getId() != null));
      }
      if (add || tag.isModified() || (markup.size() != size)) {
        final CharSequence text=xmlParser.getInputFromPositionMarker(tag.getPos());
        if (text.length() > 0) {
          String rawMarkup=text.toString();
          if (stripComments) {
            rawMarkup=removeComment(rawMarkup);
          }
          if (compressWhitespace) {
            rawMarkup=compressWhitespace(rawMarkup);
          }
          markup.addMarkupElement(size,new RawMarkup(rawMarkup));
        }
        xmlParser.setPositionMarker();
        if (add) {
          if (tag.isIgnore() == false) {
            markup.addMarkupElement(tag);
          }
        }
 else         if (tag.isModified()) {
          markup.addMarkupElement(new RawMarkup(tag.toCharSequence()));
        }
 else {
          xmlParser.setPositionMarker(tag.getPos());
        }
      }
      size=markup.size();
    }
  }
 catch (  final ParseException ex) {
    final CharSequence text=xmlParser.getInputFromPositionMarker(-1);
    if (text.length() > 0) {
      markup.addMarkupElement(new RawMarkup(text));
    }
    markup.getMarkupResourceData().setEncoding(xmlParser.getEncoding());
    markup.getMarkupResourceData().setXmlDeclaration(xmlParser.getXmlDeclaration());
    final MarkupStream markupStream=new MarkupStream(markup);
    markupStream.setCurrentIndex(markup.size() - 1);
    throw new MarkupException(markupStream,ex.getMessage(),ex);
  }
  final CharSequence text=xmlParser.getInputFromPositionMarker(-1);
  if (text.length() > 0) {
    String rawMarkup=text.toString();
    if (stripComments) {
      rawMarkup=removeComment(rawMarkup);
    }
    if (compressWhitespace) {
      rawMarkup=compressWhitespace(rawMarkup);
    }
    markup.addMarkupElement(new RawMarkup(rawMarkup));
  }
  markup.makeImmutable();
}
