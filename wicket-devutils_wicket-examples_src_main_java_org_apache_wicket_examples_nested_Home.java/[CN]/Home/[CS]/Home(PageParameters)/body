{
  List<Object> l1=new ArrayList<Object>();
  l1.add("test 1.1");
  l1.add("test 1.2");
  List<Object> l2=new ArrayList<Object>();
  l2.add("test 2.1");
  l2.add("test 2.2");
  l2.add("test 2.3");
  List<String> l3=new ArrayList<String>();
  l3.add("test 3.1");
  l2.add(l3);
  l2.add("test 2.4");
  l1.add(l2);
  l1.add("test 1.3");
  add(new RecursivePanel("panels",l1));
  TreeModel treeModel=convertToTreeModel(l1);
  final Tree tree=new Tree("tree",treeModel){
    @Override protected String renderNode(    TreeNode node){
      DefaultMutableTreeNode treeNode=(DefaultMutableTreeNode)node;
      Object userObject=treeNode.getUserObject();
      return (userObject instanceof List) ? "<subtree>" : String.valueOf(treeNode.getUserObject());
    }
  }
;
  tree.setLinkType(LinkType.REGULAR);
  add(tree);
  add(new Link("expandAll"){
    @Override public void onClick(){
      tree.getTreeState().expandAll();
    }
  }
);
  add(new Link("collapseAll"){
    @Override public void onClick(){
      tree.getTreeState().collapseAll();
    }
  }
);
  add(new BookmarkablePageLink("ajaxTreeLink",SimpleTreePage.class));
}
