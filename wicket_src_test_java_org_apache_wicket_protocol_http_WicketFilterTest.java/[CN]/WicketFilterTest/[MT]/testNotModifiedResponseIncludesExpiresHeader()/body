{
  application=new DummyWebApplication();
  WicketFilter filter=new WicketFilter();
  filter.init(new FilterTestingConfig());
  Application.set(application);
  DynamicImageResource resource=new DynamicImageResource(){
    @Override protected byte[] getImageData(){
      throw new UnsupportedOperationException("Not implemented");
    }
  }
;
  resource.setCacheable(true);
  application.getSharedResources().add("foo.gif",resource);
  MockHttpServletRequest request=new MockHttpServletRequest(application,null,null);
  request.setURL(request.getContextPath() + "/app/" + "resources/"+ Application.class.getName()+ "/foo.gif");
  setIfModifiedSinceToNextWeek(request);
  MockHttpServletResponse response=new MockHttpServletResponse(request);
  filter.doFilter(request,response,new FilterChain(){
    public void doFilter(    ServletRequest servletRequest,    ServletResponse servletResponse) throws IOException, ServletException {
    }
  }
);
  assertEquals(HttpServletResponse.SC_NOT_MODIFIED,response.getStatus());
  String responseExpiresHeader=response.getHeader("Expires");
  assertNotNull("Expires header must be set on not modified response",responseExpiresHeader);
  Date responseExpires=headerDateFormat.parse(responseExpiresHeader);
  assertTrue("Expected later than current date but was " + responseExpires,responseExpires.after(new Date()));
}
