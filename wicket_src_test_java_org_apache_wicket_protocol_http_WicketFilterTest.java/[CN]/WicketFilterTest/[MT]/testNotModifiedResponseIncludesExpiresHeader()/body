{
  try {
    application=new MockApplication();
    WicketFilter filter=new WicketFilter();
    filter.init(new FilterTestingConfig());
    application.set();
    DynamicImageResource resource=new DynamicImageResource(){
      private static final long serialVersionUID=1L;
      @Override protected byte[] getImageData(      Attributes attributes){
        throw new UnsupportedOperationException("Not implemented");
      }
      @Override protected ResourceResponse newResourceResponse(      Attributes attributes){
        ResourceResponse response=super.newResourceResponse(attributes);
        response.setCacheable(true);
        return response;
      }
    }
;
    application.getSharedResources().add("foo.gif",resource);
    MockHttpServletRequest request=new MockHttpServletRequest(application,null,null);
    request.setURL(request.getContextPath() + request.getServletPath() + "/wicket/resource/"+ Application.class.getName()+ "/foo.gif");
    setIfModifiedSinceToNextWeek(request);
    MockHttpServletResponse response=new MockHttpServletResponse(request);
    filter.doFilter(request,response,new FilterChain(){
      public void doFilter(      ServletRequest servletRequest,      ServletResponse servletResponse) throws IOException, ServletException {
      }
    }
);
    assertEquals((Integer)HttpServletResponse.SC_NOT_MODIFIED,response.getStatus());
    String responseExpiresHeader=response.getHeader("Expires");
    assertNotNull("Expires header must be set on not modified response",responseExpiresHeader);
    Date responseExpires=headerDateFormat.parse(responseExpiresHeader);
    assertTrue("Expected later than current date but was " + responseExpires,responseExpires.after(new Date()));
  }
  finally {
    ThreadContext.detach();
  }
}
