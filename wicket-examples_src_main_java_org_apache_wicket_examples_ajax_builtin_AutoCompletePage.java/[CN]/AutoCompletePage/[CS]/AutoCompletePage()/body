{
  Form<Void> form=new Form<Void>("form");
  add(form);
  final AutoCompleteTextField<String> field=new AutoCompleteTextField<String>("ac",new Model<String>("")){
    @Override protected Iterator<String> getChoices(    String input){
      if (Strings.isEmpty(input)) {
        List<String> emptyList=Collections.emptyList();
        return emptyList.iterator();
      }
      List<String> choices=new ArrayList<String>(10);
      Locale[] locales=Locale.getAvailableLocales();
      for (      final Locale locale : locales) {
        final String country=locale.getDisplayCountry();
        if (country.toUpperCase().startsWith(input.toUpperCase())) {
          choices.add(country);
          if (choices.size() == 10) {
            break;
          }
        }
      }
      return choices.iterator();
    }
  }
;
  form.add(field);
  final Label label=new Label("selectedValue",field.getDefaultModel());
  label.setOutputMarkupId(true);
  form.add(label);
  field.add(new AjaxFormSubmitBehavior(form,"onchange"){
    @Override protected void onSubmit(    AjaxRequestTarget target){
      BookmarkablePageRequestHandler bookmarkablePageRequestHandler=new BookmarkablePageRequestHandler(new PageProvider(Index.class));
      RequestCycle requestCycle=RequestCycle.get();
      CharSequence urlFor=requestCycle.urlFor(bookmarkablePageRequestHandler);
      System.err.println("index:  " + urlFor);
      target.add(label);
    }
    @Override protected void onError(    AjaxRequestTarget target){
    }
  }
);
}
