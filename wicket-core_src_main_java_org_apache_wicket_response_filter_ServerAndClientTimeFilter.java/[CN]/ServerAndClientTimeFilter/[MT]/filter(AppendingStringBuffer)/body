{
  int headIndex=responseBuffer.indexOf("<head>");
  int bodyIndex=responseBuffer.indexOf("</body>");
  long timeTaken=System.currentTimeMillis() - RequestCycle.get().getStartTime();
  if (headIndex != -1 && bodyIndex != -1) {
    Map<String,String> map=new HashMap<>(4);
    map.put("clienttime","' + (new Date().getTime() - clientTimeVariable)/1000 +  's");
    map.put("servertime",((double)timeTaken) / 1000 + "s");
    AppendingStringBuffer defaultValue=new AppendingStringBuffer(128);
    defaultValue.append("Server parsetime: ");
    defaultValue.append(((double)timeTaken) / 1000);
    defaultValue.append("s, Client parsetime: ' + (new Date().getTime() - clientTimeVariable)/1000 +  's");
    String txt=Application.get().getResourceSettings().getLocalizer().getString("ServerAndClientTimeFilter.statustext",null,Model.ofMap(map),defaultValue.toString());
    AppendingStringBuffer endScript=new AppendingStringBuffer(150);
    endScript.append("\n").append(JavaScriptUtils.SCRIPT_OPEN_TAG);
    endScript.append("\nwindow.defaultStatus='");
    endScript.append(txt);
    endScript.append("';\n").append(JavaScriptUtils.SCRIPT_CLOSE_TAG).append("\n");
    responseBuffer.insert(bodyIndex - 1,endScript);
    responseBuffer.insert(headIndex + 6,"\n" + JavaScriptUtils.SCRIPT_OPEN_TAG + "\nvar clientTimeVariable = new Date().getTime();\n"+ JavaScriptUtils.SCRIPT_CLOSE_TAG+ "\n");
  }
  log.info(timeTaken + "ms server time taken for request " + RequestCycle.get().getRequest().getUrl()+ " response size: "+ responseBuffer.length());
  return responseBuffer;
}
