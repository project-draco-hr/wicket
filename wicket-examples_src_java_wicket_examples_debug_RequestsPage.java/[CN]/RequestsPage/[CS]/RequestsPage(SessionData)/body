{
  new Image(this,"bug");
  new SessionView(this,"session",sessionData.getSession());
  IModel<List<RequestData>> requestsModel=new Model<List<RequestData>>(){
    private static final long serialVersionUID=1L;
    @Override public List<RequestData> getObject(    Component component){
      return new ArrayList<RequestData>(sessionData.getRequests());
    }
  }
;
  PageableListView<RequestData> listView=new PageableListView<RequestData>(this,"requests",requestsModel,50){
    private static final long serialVersionUID=1L;
    private final SimpleDateFormat sdf=new SimpleDateFormat("dd MMM hh:mm:ss.SSS");
    @Override protected void populateItem(    ListItem item){
      RequestData rd=(RequestData)item.getModelObject();
      Label startDate=new Label(item,"startDate",new Model<Date>(rd.getStartDate())){
        private static final long serialVersionUID=1L;
        /** 
 * @see wicket.Component#getConverter(Class)
 */
        @Override public IConverter getConverter(        Class type){
          return new DateConverter(){
            private static final long serialVersionUID=1L;
            /** 
 * @see wicket.util.convert.converters.DateConverter#getDateFormat(java.util.Locale)
 */
            @Override public DateFormat getDateFormat(            Locale locale){
              return sdf;
            }
          }
;
        }
      }
;
      new Label(item,"timeTaken",new Model<Long>(rd.getTimeTaken()));
      new Label(item,"eventTarget",new Model<String>(rd.getEventTargert()));
      new Label(item,"responseTarget",new Model<String>(rd.getResponseTarget()));
      new Label(item,"alteredObjects",new Model<String>(rd.getAlteredObjects())).setEscapeModelStrings(false);
    }
  }
;
  PagingNavigator navigator=new PagingNavigator(this,"navigator",listView);
}
