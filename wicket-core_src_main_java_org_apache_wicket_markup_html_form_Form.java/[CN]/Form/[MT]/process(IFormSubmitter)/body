{
  final Page page=getPage();
  String hiddenFieldId=getHiddenFieldId();
  if (!isEnabledInHierarchy() || !isVisibleInHierarchy()) {
    return;
  }
  validate();
  if (hasError()) {
    markFormComponentsInvalid();
    callOnError(submittingComponent);
  }
 else {
    markFormComponentsValid();
    beforeUpdateFormComponentModels();
    updateFormComponentModels();
    onValidateModelObjects();
    if (hasError()) {
      callOnError(submittingComponent);
      return;
    }
    delegateSubmit(submittingComponent);
  }
  final PageParameters parameters=page.getPageParameters();
  if (parameters != null) {
    visitFormComponents(new IVisitor<FormComponent<?>,Void>(){
      public void component(      final FormComponent<?> formComponent,      final IVisit<Void> visit){
        parameters.remove(formComponent.getInputName());
      }
    }
);
    parameters.remove(hiddenFieldId);
    if (submittingComponent instanceof AbstractSubmitLink) {
      AbstractSubmitLink submitLink=(AbstractSubmitLink)submittingComponent;
      parameters.remove(submitLink.getInputName());
    }
  }
}
