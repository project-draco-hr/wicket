{
  super.onComponentTag(tag);
  checkComponentTag(tag,"input");
  checkComponentTagAttribute(tag,"type","checkbox");
  CheckGroup<?> group=findParent(CheckGroup.class);
  if (group == null) {
    throw new WicketRuntimeException("Check component [" + getPath() + "] cannot find its parent CheckGroup. All Check components must be a child of or below in the hierarchy of a CheckGroup component.");
  }
  final String value=getValue();
  tag.put("name",group.getInputName());
  tag.put("value",value);
  Collection collection=group.getModelObject();
  if (collection == null) {
    throw new WicketRuntimeException("CheckGroup [" + group.getPath() + "] contains a null model object, must be an object of type java.util.Collection");
  }
  if (group.hasRawInput()) {
    String[] inputs=group.getInputAsArray();
    if (inputs != null) {
      for (      String input : inputs) {
        if (value.equals(input)) {
          tag.put("checked","checked");
        }
      }
    }
  }
 else   if (collection.contains(getModelObject())) {
    tag.put("checked","checked");
  }
  if (group.wantOnSelectionChangedNotifications()) {
    final CharSequence url=group.urlFor(IOnChangeListener.INTERFACE);
    Form form=group.findParent(Form.class);
    if (form != null) {
      tag.put("onclick",form.getJsForInterfaceUrl(url));
    }
 else {
      tag.put("onclick","window.location.href='" + url + "&"+ group.getInputName()+ "=' + this.value;");
    }
  }
  if (!isActionAuthorized(ENABLE) || !isEnabled() || !group.isEnabled()) {
    tag.put(ATTR_DISABLED,ATTR_DISABLED);
  }
}
