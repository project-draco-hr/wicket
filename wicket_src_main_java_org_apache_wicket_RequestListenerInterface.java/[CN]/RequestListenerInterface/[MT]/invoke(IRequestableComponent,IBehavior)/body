{
  final Component component=(Component)rcomponent;
  if (!behavior.canCallListenerInterface(component)) {
    log.warn("behavior not enabled; ignore call. Behavior {} at component {}",behavior,component);
    throw new ListenerInvocationNotAllowedException(this,component,behavior,"Behavior rejected interface invocation");
  }
  try {
    method.invoke(behavior);
  }
 catch (  InvocationTargetException e) {
    if (e.getTargetException() instanceof ReplaceHandlerException || e.getTargetException() instanceof AuthorizationException || e.getTargetException() instanceof WicketRuntimeException) {
      throw (RuntimeException)e.getTargetException();
    }
    throw new WicketRuntimeException("Method " + method.getName() + " of "+ method.getDeclaringClass()+ " targeted at behavior "+ behavior+ " on component "+ component+ " threw an exception",e);
  }
catch (  Exception e) {
    throw new WicketRuntimeException("Method " + method.getName() + " of "+ method.getDeclaringClass()+ " targeted at behavior "+ behavior+ " on component "+ component+ " threw an exception",e);
  }
}
