{
  final ThreadContext previousThreadContext=ThreadContext.detach();
  boolean res=true;
  final ClassLoader previousClassLoader=Thread.currentThread().getContextClassLoader();
  final ClassLoader newClassLoader=getClassLoader();
  HttpServletRequest httpServletRequest=(HttpServletRequest)request;
  HttpServletResponse httpServletResponse=(HttpServletResponse)response;
  try {
    if (previousClassLoader != newClassLoader) {
      Thread.currentThread().setContextClassLoader(newClassLoader);
    }
    String filterPath=getFilterPath(httpServletRequest);
    if (filterPath == null) {
      throw new IllegalStateException("filter path was not configured");
    }
    if (shouldIgnorePath(httpServletRequest)) {
      log.debug("Ignoring request {}",httpServletRequest.getRequestURL());
      return false;
    }
    if ("OPTIONS".equalsIgnoreCase(httpServletRequest.getMethod())) {
      httpServletResponse.setStatus(HttpServletResponse.SC_OK);
      httpServletResponse.setHeader("Allow","GET,POST,OPTIONS,PUT,HEAD,PATCH,DELETE,TRACE");
      httpServletResponse.setHeader("Content-Length","0");
      return true;
    }
    String redirectURL=checkIfRedirectRequired(httpServletRequest);
    if (redirectURL == null) {
      ThreadContext.setApplication(application);
      WebRequest webRequest=application.createWebRequest(httpServletRequest,filterPath);
      WebResponse webResponse=application.createWebResponse(webRequest,httpServletResponse);
      RequestCycle requestCycle=application.createRequestCycle(webRequest,webResponse);
      res=processRequestCycle(requestCycle,webResponse,httpServletRequest,httpServletResponse);
    }
 else {
      if (Strings.isEmpty(httpServletRequest.getQueryString()) == false) {
        redirectURL+="?" + httpServletRequest.getQueryString();
      }
      try {
        httpServletResponse.sendRedirect(httpServletResponse.encodeRedirectURL(redirectURL));
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
  finally {
    ThreadContext.restore(previousThreadContext);
    if (newClassLoader != previousClassLoader) {
      Thread.currentThread().setContextClassLoader(previousClassLoader);
    }
    if (response.isCommitted() && httpServletRequest.isAsyncStarted() == false) {
      response.flushBuffer();
    }
  }
  return res;
}
