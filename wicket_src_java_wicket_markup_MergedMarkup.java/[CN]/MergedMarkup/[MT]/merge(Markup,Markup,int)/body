{
  final String onLoad=getBodyOnLoadString(markup);
  boolean wicketHeadProcessed=false;
  boolean headProcessed=false;
  WicketTag childTag=null;
  int baseIndex=0;
  for (; baseIndex < baseMarkup.size(); baseIndex++) {
    MarkupElement element=baseMarkup.get(baseIndex);
    if (element instanceof WicketTag) {
      WicketTag wtag=(WicketTag)element;
      if (wtag.isChildTag() && wtag.isOpenClose()) {
        childTag=wtag;
        WicketTag childOpenTag=(WicketTag)wtag.mutable();
        childOpenTag.getXmlTag().setType(XmlTag.OPEN);
        addMarkupElement(childOpenTag);
        break;
      }
    }
    if ((wicketHeadProcessed == false) && (element instanceof WicketTag)) {
      final WicketTag tag=(WicketTag)element;
      boolean hitPanel=tag.isOpen() && (tag.isPanelTag() || tag.isBorderTag());
      WicketTag openTag=null;
      if (hitPanel) {
        openTag=new WicketTag(new XmlTag());
        openTag.setName("head");
        openTag.setNamespace(tag.getNamespace());
        openTag.setType(XmlTag.OPEN);
        addMarkupElement(openTag);
      }
      boolean hitHead=tag.isClose() && tag.isHeadTag();
      if (hitHead || hitPanel) {
        boolean copy=false;
        for (int i=0; i < extendIndex; i++) {
          MarkupElement elem=markup.get(i);
          if (elem instanceof WicketTag) {
            WicketTag etag=(WicketTag)elem;
            if (etag.isHeadTag()) {
              if (etag.isOpen()) {
                wicketHeadProcessed=true;
                copy=true;
              }
 else {
                copy=false;
                break;
              }
              continue;
            }
          }
          if (copy == true) {
            addMarkupElement(elem);
          }
        }
      }
      if (hitPanel) {
        WicketTag closeTag=new WicketTag(new XmlTag());
        closeTag.setName("head");
        closeTag.setNamespace(tag.getNamespace());
        closeTag.setType(XmlTag.CLOSE);
        closeTag.setOpenTag(openTag);
        addMarkupElement(closeTag);
      }
    }
    if ((headProcessed == false) && (element instanceof ComponentTag)) {
      final ComponentTag tag=(ComponentTag)element;
      if (tag.isClose() && TagUtils.isHeadTag(tag)) {
        boolean copy=false;
        for (int i=0; i < extendIndex; i++) {
          MarkupElement elem=markup.get(i);
          if (elem instanceof WicketTag) {
            WicketTag etag=(WicketTag)elem;
            if (etag.isHeadTag()) {
              if (etag.isOpen()) {
                headProcessed=true;
                copy=true;
              }
 else {
                copy=false;
                break;
              }
              continue;
            }
          }
          if (copy == true) {
            addMarkupElement(elem);
          }
        }
      }
    }
    if (element instanceof ComponentTag) {
      ComponentTag tag=(ComponentTag)element;
      if (tag.isOpen() && TagUtils.isBodyTag(tag)) {
        String onLoadBase=tag.getAttributes().getString("onLoad");
        if (onLoadBase == null) {
          if (onLoad != null) {
            tag=tag.mutable();
            tag.getAttributes().put("onLoad",onLoad);
            element=tag;
          }
        }
 else         if (onLoad != null) {
          onLoadBase+=onLoad;
          tag=tag.mutable();
          tag.getAttributes().put("onLoad",onLoadBase);
          element=tag;
        }
      }
    }
    addMarkupElement(element);
  }
  if (baseIndex == baseMarkup.size()) {
    throw new WicketRuntimeException("Expected to find <wicket:child/> in base markup");
  }
  for (; extendIndex < markup.size(); extendIndex++) {
    MarkupElement element=markup.get(extendIndex);
    addMarkupElement(element);
    if (element instanceof WicketTag) {
      WicketTag wtag=(WicketTag)element;
      if (wtag.isExtendTag() && wtag.isClose()) {
        break;
      }
    }
  }
  if (extendIndex == markup.size()) {
    throw new WicketRuntimeException("Missing close tag </wicket:extend> in derived markup");
  }
  WicketTag childCloseTag=(WicketTag)childTag.mutable();
  childCloseTag.getXmlTag().setType(XmlTag.CLOSE);
  addMarkupElement(childCloseTag);
  for (baseIndex++; baseIndex < baseMarkup.size(); baseIndex++) {
    MarkupElement element=baseMarkup.get(baseIndex);
    addMarkupElement(element);
  }
}
