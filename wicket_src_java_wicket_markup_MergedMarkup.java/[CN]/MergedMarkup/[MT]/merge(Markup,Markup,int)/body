{
  final String onLoad=getBodyOnLoadString(markup);
  boolean wicketHeadProcessed=false;
  boolean headProcessed=false;
  WicketTag childTag=null;
  int baseIndex=0;
  for (; baseIndex < baseMarkup.size(); baseIndex++) {
    MarkupElement element=baseMarkup.get(baseIndex);
    if ((element instanceof ComponentTag) && (baseMarkup.getResource() != null)) {
      ComponentTag tag=(ComponentTag)element;
      if (tag.getMarkupClass() == null) {
        tag.setMarkupClass(baseMarkup.getResource().getMarkupClass());
      }
    }
    if (element instanceof WicketTag) {
      WicketTag wtag=(WicketTag)element;
      if (wtag.isChildTag() && wtag.isOpenClose()) {
        childTag=wtag;
        WicketTag childOpenTag=(WicketTag)wtag.mutable();
        childOpenTag.getXmlTag().setType(XmlTag.OPEN);
        addMarkupElement(childOpenTag);
        break;
      }
    }
    if ((wicketHeadProcessed == false) && (element instanceof WicketTag)) {
      final WicketTag tag=(WicketTag)element;
      boolean hitHead=tag.isClose() && tag.isHeadTag();
      if (hitHead) {
        addMarkupElement(tag);
      }
      boolean hitPanel=tag.isOpen() && (tag.isPanelTag() || tag.isBorderTag() || tag.isExtendTag());
      if (hitHead || hitPanel) {
        boolean copy=false;
        for (int i=0; i < extendIndex; i++) {
          MarkupElement elem=markup.get(i);
          if (elem instanceof WicketTag) {
            WicketTag etag=(WicketTag)elem;
            if (etag.isHeadTag()) {
              if (etag.isOpen()) {
                copy=true;
              }
 else {
                addMarkupElement(elem);
                copy=false;
              }
            }
          }
          if (copy == true) {
            addMarkupElement(elem);
          }
        }
        wicketHeadProcessed=true;
        if (hitHead) {
          continue;
        }
      }
    }
    if ((headProcessed == false) && (element instanceof ComponentTag)) {
      final ComponentTag tag=(ComponentTag)element;
      if (tag.isClose() && TagUtils.isHeadTag(tag)) {
        boolean copy=false;
        for (int i=0; i < extendIndex; i++) {
          MarkupElement elem=markup.get(i);
          if (elem instanceof WicketTag) {
            WicketTag etag=(WicketTag)elem;
            if (etag.isHeadTag()) {
              if (etag.isOpen()) {
                copy=true;
              }
 else {
                addMarkupElement(elem);
                copy=false;
              }
            }
          }
          if (copy == true) {
            addMarkupElement(elem);
          }
        }
      }
    }
    if (element instanceof ComponentTag) {
      ComponentTag tag=(ComponentTag)element;
      if (tag.isOpen() && TagUtils.isBodyTag(tag)) {
        String onLoadBase=tag.getAttributes().getString("onLoad");
        if (onLoadBase == null) {
          if (onLoad != null) {
            tag=tag.mutable();
            tag.getAttributes().put("onLoad",onLoad);
            element=tag;
          }
        }
 else         if (onLoad != null) {
          onLoadBase+=onLoad;
          tag=tag.mutable();
          tag.getAttributes().put("onLoad",onLoadBase);
          element=tag;
        }
      }
    }
    addMarkupElement(element);
  }
  if (baseIndex == baseMarkup.size()) {
    throw new WicketRuntimeException("Expected to find <wicket:child/> in base markup");
  }
  for (; extendIndex < markup.size(); extendIndex++) {
    MarkupElement element=markup.get(extendIndex);
    addMarkupElement(element);
    if (element instanceof WicketTag) {
      WicketTag wtag=(WicketTag)element;
      if (wtag.isExtendTag() && wtag.isClose()) {
        break;
      }
    }
  }
  if (extendIndex == markup.size()) {
    throw new WicketRuntimeException("Missing close tag </wicket:extend> in derived markup");
  }
  WicketTag childCloseTag=(WicketTag)childTag.mutable();
  childCloseTag.getXmlTag().setType(XmlTag.CLOSE);
  addMarkupElement(childCloseTag);
  for (baseIndex++; baseIndex < baseMarkup.size(); baseIndex++) {
    MarkupElement element=baseMarkup.get(baseIndex);
    addMarkupElement(element);
    if ((element instanceof ComponentTag) && (baseMarkup.getResource() != null)) {
      ComponentTag tag=(ComponentTag)element;
      tag.setMarkupClass(baseMarkup.getResource().getMarkupClass());
    }
  }
  if (Page.class.isAssignableFrom(markup.getResource().getMarkupClass())) {
    int hasOpenWicketHead=-1;
    int hasCloseWicketHead=-1;
    int hasHead=-1;
    for (int i=0; i < size(); i++) {
      MarkupElement element=get(i);
      if ((hasOpenWicketHead == -1) && (element instanceof WicketTag) && ((WicketTag)element).isHeadTag()) {
        hasOpenWicketHead=i;
      }
 else       if ((element instanceof WicketTag) && ((WicketTag)element).isHeadTag() && ((WicketTag)element).isClose()) {
        hasCloseWicketHead=i;
      }
 else       if ((hasHead == -1) && (element instanceof ComponentTag) && TagUtils.isHeadTag((ComponentTag)element)) {
        hasHead=i;
      }
 else       if ((hasHead != -1) && (hasOpenWicketHead != -1)) {
        break;
      }
    }
    if ((hasOpenWicketHead != -1) && (hasHead == -1)) {
      final XmlTag headOpenTag=new XmlTag();
      headOpenTag.setName("head");
      headOpenTag.setType(XmlTag.OPEN);
      final ComponentTag openTag=new ComponentTag(headOpenTag);
      openTag.setId(HtmlHeaderSectionHandler.HEADER_ID);
      final XmlTag headCloseTag=new XmlTag();
      headCloseTag.setName(headOpenTag.getName());
      headCloseTag.setType(XmlTag.CLOSE);
      final ComponentTag closeTag=new ComponentTag(headCloseTag);
      closeTag.setOpenTag(openTag);
      closeTag.setId(HtmlHeaderSectionHandler.HEADER_ID);
      addMarkupElement(hasOpenWicketHead,openTag);
      addMarkupElement(hasCloseWicketHead + 2,closeTag);
    }
  }
}
