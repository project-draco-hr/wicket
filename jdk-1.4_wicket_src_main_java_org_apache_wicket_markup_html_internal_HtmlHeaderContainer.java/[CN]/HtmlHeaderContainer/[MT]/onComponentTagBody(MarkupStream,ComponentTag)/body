{
  final Response webResponse=this.getResponse();
  try {
    final StringResponse response=new StringResponse();
    this.getRequestCycle().setResponse(response);
    super.onComponentTagBody(markupStream,openTag);
    MarkupContainer parent=getParent();
    while ((parent instanceof Border)) {
      parent=parent.getParent();
    }
    if (parent instanceof WebPage) {
      renderHeaderSections((WebPage)parent,this);
    }
 else {
      throw new WicketRuntimeException("Programming error: 'parent' should be a Page or a Border.");
    }
    CharSequence output=response.getBuffer();
    if (output.length() > 0) {
      if (output.charAt(0) == '\r') {
        for (int i=2; i < output.length(); i+=2) {
          char ch=output.charAt(i);
          if (ch != '\r') {
            output=output.subSequence(i - 2,output.length());
            break;
          }
        }
      }
 else       if (output.charAt(0) == '\n') {
        for (int i=1; i < output.length(); i++) {
          char ch=output.charAt(i);
          if (ch != '\n') {
            output=output.subSequence(i - 1,output.length());
            break;
          }
        }
      }
    }
    if (output.length() > 0) {
      webResponse.write("<head>");
      webResponse.write(output);
      webResponse.write("</head>");
    }
  }
  finally {
    this.getRequestCycle().setResponse(webResponse);
  }
}
