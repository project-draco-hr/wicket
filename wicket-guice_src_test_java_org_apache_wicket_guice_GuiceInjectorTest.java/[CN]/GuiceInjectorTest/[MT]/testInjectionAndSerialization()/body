{
  MockApplication app=new MockApplication();
  app.setServletContext(new MockServletContext(app,null));
  try {
    ThreadContext.setApplication(app);
    app.setName(getClass().getName());
    app.initApplication();
    Session session=new WebSession(new MockWebRequest(Url.parse("/")));
    app.getSessionStore().bind(null,session);
    ThreadContext.setSession(session);
    GuiceComponentInjector injector=new GuiceComponentInjector(app,new Module(){
      public void configure(      final Binder binder){
        binder.bind(ITestService.class).to(TestService.class);
        binder.bind(ITestService.class).annotatedWith(Red.class).to(TestServiceRed.class);
        binder.bind(ITestService.class).annotatedWith(Blue.class).to(TestServiceBlue.class);
        binder.bind(new TypeLiteral<Map<String,String>>(){
        }
).toProvider(new Provider<Map<String,String>>(){
          public Map<String,String> get(){
            Map<String,String> strings=new HashMap<String,String>();
            strings.put(ITestService.RESULT,ITestService.RESULT);
            return strings;
          }
        }
);
      }
    }
);
    app.getComponentInstantiationListeners().add(injector);
    TestComponent testComponent=new TestComponent("id");
    doChecksForComponent(testComponent);
    TestComponent clonedComponent=(TestComponent)WicketObjects.cloneObject(testComponent);
    doChecksForComponent(clonedComponent);
    TestNoComponent noncomponent=new TestNoComponent();
    doChecksForNoComponent(noncomponent);
  }
  finally {
    app.internalDestroy();
    ThreadContext.detach();
  }
}
