{
  final TreeNode node=(TreeNode)item.getModelObject();
  item.add(newIndentation(item,"indent",(TreeNode)item.getModelObject(),level));
  item.add(newJunctionLink(item,"link","image",node));
  MarkupContainer nodeLink=newNodeLink(item,"nodeLink",node);
  item.add(nodeLink);
  nodeLink.add(newNodeIcon(nodeLink,"icon",node));
  nodeLink.add(new Label("label",new AbstractReadOnlyModel(){
    private static final long serialVersionUID=1L;
    public Object getObject(    Component c){
      return renderNode(node);
    }
  }
));
  item.add(new AbstractBehavior(){
    private static final long serialVersionUID=1L;
    /** 
 * @see wicket.behavior.AbstractBehavior#onComponentTag(wicket.Component,wicket.markup.ComponentTag)
 */
    public void onComponentTag(    Component component,    ComponentTag tag){
      super.onComponentTag(component,tag);
      if (getTreeState().isNodeSelected(node)) {
        tag.put("class","row-selected");
      }
 else {
        tag.put("class","row");
      }
    }
  }
);
}
