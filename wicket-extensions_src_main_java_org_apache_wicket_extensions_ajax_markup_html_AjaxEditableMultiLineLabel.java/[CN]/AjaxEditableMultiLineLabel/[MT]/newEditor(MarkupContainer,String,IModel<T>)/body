{
  TextArea<T> editor=new TextArea<T>(componentId,model){
    private static final long serialVersionUID=1L;
    /** 
 * {@inheritDoc}
 */
    @Override protected void onModelChanged(){
      AjaxEditableMultiLineLabel.this.onModelChanged();
    }
    /** 
 * {@inheritDoc}
 */
    @Override protected void onModelChanging(){
      AjaxEditableMultiLineLabel.this.onModelChanging();
    }
  }
;
  editor.add(new AttributeModifier("rows",new AbstractReadOnlyModel<Integer>(){
    private static final long serialVersionUID=1L;
    @Override public Integer getObject(){
      return rows;
    }
  }
));
  editor.add(new AttributeModifier("cols",new AbstractReadOnlyModel<Integer>(){
    private static final long serialVersionUID=1L;
    @Override public Integer getObject(){
      return cols;
    }
  }
));
  editor.setOutputMarkupId(true);
  editor.setVisible(false);
  editor.add(new EditorAjaxBehavior(){
    private static final long serialVersionUID=1L;
    @Override protected void updateAjaxAttributes(    AjaxRequestAttributes attributes){
      super.updateAjaxAttributes(attributes);
      attributes.setMethod(Method.POST);
      attributes.setEventNames("blur","keyup");
      CharSequence dynamicExtraParameters="var result = {}, " + "kc=Wicket.Event.keyCode(attrs.event)," + "evtType=attrs.event.type;"+ "if (evtType === 'keyup') {"+ "if (kc===27) { result.save = false }"+ "}"+ "else if (evtType==='blur') { result = Wicket.Form.serializeElement(attrs.c); result.save = true; }"+ "return result;";
      List<CharSequence> dynamicParameters=attributes.getDynamicExtraParameters();
      dynamicParameters.add(dynamicExtraParameters);
      CharSequence precondition="var kc=Wicket.Event.keyCode(attrs.event)," + "evtType=attrs.event.type," + "ret=false;"+ "if(evtType==='blur' || (evtType==='keyup' && (kc===27))) ret = true;"+ "return ret;";
      JavaScriptPrecondition javaScriptPrecondition=new JavaScriptPrecondition(precondition);
      List<JavaScriptPrecondition> preconditions=attributes.getPreconditions();
      preconditions.add(javaScriptPrecondition);
    }
  }
);
  return editor;
}
