{
  TextArea<T> editor=new TextArea<T>(componentId,model){
    private static final long serialVersionUID=1L;
    @Override protected void onModelChanged(){
      AjaxEditableMultiLineLabel.this.onModelChanged();
    }
    @Override protected void onModelChanging(){
      AjaxEditableMultiLineLabel.this.onModelChanging();
    }
  }
;
  editor.add(new AttributeModifier("rows",new AbstractReadOnlyModel<Integer>(){
    private static final long serialVersionUID=1L;
    @Override public Integer getObject(){
      return new Integer(rows);
    }
  }
));
  editor.add(new AttributeModifier("cols",new AbstractReadOnlyModel<Integer>(){
    private static final long serialVersionUID=1L;
    @Override public Integer getObject(){
      return new Integer(cols);
    }
  }
));
  editor.setOutputMarkupId(true);
  editor.setVisible(false);
  editor.add(new EditorAjaxBehavior(){
    private static final long serialVersionUID=1L;
    /** 
 * @see org.apache.wicket.behavior.AbstractAjaxBehavior#onComponentTag(org.apache.wicket.markup.ComponentTag)
 */
    @Override protected void onComponentTag(    ComponentTag tag){
      super.onComponentTag(tag);
      final String saveCall="{wicketAjaxPost('" + getCallbackUrl() + "&save=true', "+ "wicketSerialize(this)); return true;}";
      final String cancelCall="{wicketAjaxGet('" + getCallbackUrl() + "&save=false');this.onblur='';return false;}";
      final String keypress="var kc=wicketKeyCode(event); if (kc==27) " + cancelCall + "; ";
      tag.put("onblur",saveCall);
      tag.put("onkeypress",keypress);
    }
  }
);
  return editor;
}
