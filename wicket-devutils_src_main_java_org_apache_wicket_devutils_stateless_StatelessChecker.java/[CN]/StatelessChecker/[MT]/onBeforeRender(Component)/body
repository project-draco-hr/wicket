{
  if (StatelessChecker.mustCheck(component)) {
    final IVisitor<Component> visitor=new Component.IVisitor<Component>(){
      public Object component(      final Component comp){
        if (component instanceof Page && StatelessChecker.mustCheck(comp)) {
          return IVisitor.CONTINUE_TRAVERSAL_BUT_DONT_GO_DEEPER;
        }
 else         if (!comp.isStateless()) {
          return comp;
        }
 else {
          return IVisitor.CONTINUE_TRAVERSAL;
        }
      }
    }
;
    final String msg="'" + component + "' claims to be stateless but isn't.";
    if (!component.isStateless()) {
      throw new IllegalArgumentException(msg + " Possible reasons: no stateless hint, statefull behaviors");
    }
    if (component instanceof MarkupContainer) {
      final Object o=((MarkupContainer)component).visitChildren(visitor);
      if (o != null) {
        throw new IllegalArgumentException(msg + " Offending component: " + o);
      }
    }
    if (component instanceof Page) {
      final Page p=(Page)component;
      if (!p.isBookmarkable()) {
        throw new IllegalArgumentException(msg + " Only bookmarkable pages can be stateless");
      }
      if (!p.isPageStateless()) {
        throw new IllegalArgumentException(msg + " for unknown reason");
      }
    }
  }
}
