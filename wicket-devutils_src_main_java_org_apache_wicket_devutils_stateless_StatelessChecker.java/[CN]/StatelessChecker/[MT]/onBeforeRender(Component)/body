{
  if (mustCheck(component)) {
    final IVisitor<Component,Component> visitor=new IVisitor<Component,Component>(){
      @Override public void component(      final Component comp,      final IVisit<Component> visit){
        if ((component instanceof Page) && mustCheck(comp)) {
          visit.dontGoDeeper();
        }
 else         if (!comp.isStateless()) {
          visit.stop(comp);
        }
 else {
        }
      }
    }
;
    final String msg="'" + component + "' claims to be stateless but isn't.";
    if (component.isStateless() == false) {
      StringList statefulBehaviors=new StringList();
      for (      Behavior b : component.getBehaviors()) {
        if (b.getStatelessHint(component) == false) {
          statefulBehaviors.add(Classes.name(b.getClass()));
        }
      }
      String reason;
      if (statefulBehaviors.size() == 0) {
        reason=" Possible reason: no stateless hint";
      }
 else {
        reason=" Stateful behaviors: " + statefulBehaviors.join();
      }
      throw new IllegalStateException(msg + reason);
    }
    if (component instanceof MarkupContainer) {
      final Object o=((MarkupContainer)component).visitChildren(visitor);
      if (o != null) {
        throw new IllegalArgumentException(msg + " Offending component: " + o);
      }
    }
    if (component instanceof Page) {
      final Page p=(Page)component;
      if (!p.isBookmarkable()) {
        throw new IllegalArgumentException(msg + " Only bookmarkable pages can be stateless");
      }
      if (!p.isPageStateless()) {
        throw new IllegalArgumentException(msg + " for unknown reason");
      }
    }
  }
}
