{
  if (mustCheck(component)) {
    final IVisitor<Component,Component> visitor=new IVisitor<Component,Component>(){
      public void component(      final Component comp,      final IVisit<Component> visit){
        if (component instanceof Page && mustCheck(comp)) {
          visit.dontGoDeeper();
        }
 else         if (!comp.isStateless()) {
          visit.stop(comp);
        }
 else {
        }
      }
    }
;
    final String msg="'" + component + "' claims to be stateless but isn't.";
    if (!component.isStateless()) {
      throw new IllegalArgumentException(msg + " Possible reasons: no stateless hint, statefull behaviors");
    }
    if (component instanceof MarkupContainer) {
      final Object o=((MarkupContainer)component).visitChildren(visitor);
      if (o != null) {
        throw new IllegalArgumentException(msg + " Offending component: " + o);
      }
    }
    if (component instanceof Page) {
      final Page p=(Page)component;
      if (!p.isBookmarkable()) {
        throw new IllegalArgumentException(msg + " Only bookmarkable pages can be stateless");
      }
      if (!p.isPageStateless()) {
        throw new IllegalArgumentException(msg + " for unknown reason");
      }
    }
  }
}
