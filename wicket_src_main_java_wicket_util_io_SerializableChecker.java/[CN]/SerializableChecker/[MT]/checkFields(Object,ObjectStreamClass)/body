{
  int numFields;
  try {
    numFields=((Integer)getNumObjFields.invoke(desc,null)).intValue();
  }
 catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
catch (  InvocationTargetException e) {
    throw new RuntimeException(e);
  }
  if (numFields > 0) {
    int numPrimFields;
    ObjectStreamField[] fields=desc.getFields();
    Object[] objVals=new Object[numFields];
    numPrimFields=fields.length - objVals.length;
    try {
      getObjFieldValues.invoke(desc,new Object[]{obj,objVals});
    }
 catch (    IllegalAccessException e) {
      throw new RuntimeException(e);
    }
catch (    InvocationTargetException e) {
      throw new RuntimeException(e);
    }
    for (int i=0; i < objVals.length; i++) {
      if (objVals[i] instanceof String || objVals[i] instanceof Number || objVals[i] instanceof Date|| objVals[i] instanceof Boolean|| objVals[i] instanceof Class) {
        continue;
      }
      try {
        if (checked.contains(objVals[i])) {
          continue;
        }
      }
 catch (      Exception e) {
        log.warn("error invoking hashCode: " + e.getMessage() + ", path:"+ currentPath()+ ": ");
        continue;
      }
      ObjectStreamField fieldDesc=fields[numPrimFields + i];
      Field field;
      try {
        field=(Field)fieldMethod.invoke(fieldDesc,null);
      }
 catch (      IllegalAccessException e) {
        throw new RuntimeException(e);
      }
catch (      InvocationTargetException e) {
        throw new RuntimeException(e);
      }
      String fieldName=field.getName();
      simpleName=field.getName();
      fieldDescription=field.toString();
      check(objVals[i]);
    }
  }
}
