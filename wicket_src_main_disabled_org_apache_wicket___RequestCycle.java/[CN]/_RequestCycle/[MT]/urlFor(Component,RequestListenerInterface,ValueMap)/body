{
  final Page page=component.getPage();
  final IRequestHandler target;
  if ((listener != IRedirectListener.INTERFACE) && component.isStateless() && page.isBookmarkable()&& page.getStatelessHint()) {
    PageParameters pageParameters=page.getPageParameters();
    if (pageParameters == null) {
      pageParameters=new PageParameters();
    }
 else {
      pageParameters=(PageParameters)pageParameters.clone();
    }
    if (params != null) {
      Iterator<Map.Entry<String,Object>> it=params.entrySet().iterator();
      while (it.hasNext()) {
        final Map.Entry<String,Object> entry=it.next();
        final String key=entry.getKey();
        final String value=entry.getValue().toString();
        pageParameters.add(key,value);
      }
    }
    target=new BookmarkableListenerInterfaceRequestTarget("default",page.getClass(),pageParameters,component,listener);
    return encodeUrlFor(target);
  }
 else {
    page.setPageStateless(Boolean.FALSE);
    final Session session=getSession();
    if (session.isTemporary()) {
      session.bind();
    }
    target=new ListenerInterfaceRequestTarget(page,component,listener);
    CharSequence url=encodeUrlFor(target);
    if (params != null) {
      AppendingStringBuffer buff=new AppendingStringBuffer(url);
      WebRequestEncoder encoder=new WebRequestEncoder(buff);
      for (      Entry<String,Object> stringObjectEntry : params.entrySet()) {
        final String key=stringObjectEntry.getKey();
        final String value=stringObjectEntry.getValue().toString();
        encoder.addValue(key,value);
      }
      url=buff;
    }
    return url;
  }
}
