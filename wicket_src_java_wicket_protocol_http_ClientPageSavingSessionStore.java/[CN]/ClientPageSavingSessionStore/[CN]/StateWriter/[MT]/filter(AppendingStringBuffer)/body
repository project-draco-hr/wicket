{
  IRequestTarget rt=RequestCycle.get().getRequestTarget();
  int index=responseBuffer.indexOf("<head>");
  int bodyIndex=responseBuffer.indexOf("</body>");
  if (index != -1 && bodyIndex != -1) {
    Page page=null;
    if (rt instanceof IPageRequestTarget) {
      page=((IPageRequestTarget)rt).getPage();
    }
 else     if (rt instanceof BookmarkablePageRequestTarget) {
      page=((BookmarkablePageRequestTarget)rt).getPage();
    }
    if (page == null || page.isStateless()) {
      return responseBuffer;
    }
    page.detachModels();
    String encodedState;
    try {
      ByteArrayOutputStream out=new ByteArrayOutputStream(256);
      GZIPOutputStream gzip=new GZIPOutputStream(out);
      ObjectOutputStream oos=new ObjectOutputStream(gzip);
      oos.writeObject(page);
      oos.close();
      byte[] unencoded=out.toByteArray();
      byte[] encoded=Base64.encodeBase64(unencoded);
      encodedState=new String(encoded);
    }
 catch (    IOException e) {
      throw new WicketRuntimeException("Internal error serializing object",e);
    }
    AppendingStringBuffer response=new AppendingStringBuffer(encodedState.length() + 100);
    response.append(JavascriptUtils.SCRIPT_OPEN_TAG);
    response.append("\n");
    response.append("var wicketState = '");
    response.append(encodedState);
    response.append("';\n");
    response.append(JavascriptUtils.SCRIPT_CLOSE_TAG);
    final AppendingStringBuffer forms=new AppendingStringBuffer(64);
    forms.append(JavascriptUtils.SCRIPT_OPEN_TAG);
    page.visitChildren(Form.class,new IVisitor(){
      public Object component(      Component component){
        forms.append("document.getElementById('");
        Form form=(Form)component;
        forms.append(form.getHiddenFieldId(Form.HIDDEN_FIELD_WICKET_STATE));
        forms.append("').value=wicketState;\n");
        return null;
      }
    }
);
    forms.append(JavascriptUtils.SCRIPT_CLOSE_TAG);
    responseBuffer.insert(bodyIndex,forms);
    responseBuffer.insert(index + 6,response);
  }
  return responseBuffer;
}
