{
  final Page page=container.getPage();
  if (tag.getId().equals(HtmlHeaderSectionHandler.HEADER_ID)) {
    return newHtmlHeaderContainer(HtmlHeaderSectionHandler.HEADER_ID + page.getAutoIndex(),tag);
  }
 else   if ((tag instanceof WicketTag) && ((WicketTag)tag).isHeadTag()) {
    if (container instanceof WebPage) {
      HtmlHeaderContainer header=container.visitChildren(new IVisitor<Component,HtmlHeaderContainer>(){
        @Override public void component(        final Component component,        final IVisit<HtmlHeaderContainer> visit){
          if (component instanceof HtmlHeaderContainer) {
            visit.stop((HtmlHeaderContainer)component);
          }
 else           if (component instanceof TransparentWebMarkupContainer == false) {
            visit.dontGoDeeper();
          }
        }
      }
);
      if (header == null) {
        header=newHtmlHeaderContainer(HtmlHeaderSectionHandler.HEADER_ID + page.getAutoIndex(),tag);
        header.add(new WicketHeadContainer());
        return header;
      }
      WicketHeadContainer wicketHeadContainer=header.visitChildren(new FindWicketHeadContainer());
      if (wicketHeadContainer == null) {
        wicketHeadContainer=new WicketHeadContainer();
        header.add(wicketHeadContainer);
      }
      return wicketHeadContainer;
    }
 else     if (container instanceof HtmlHeaderContainer) {
      WebMarkupContainer header=new WicketHeadContainer();
      return header;
    }
    final String pageClassName=(page != null) ? page.getClass().getName() : "unknown";
    final IResourceStream stream=markupStream.getResource();
    final String streamName=(stream != null) ? stream.toString() : "unknown";
    throw new MarkupException("Mis-placed <wicket:head>. <wicket:head> must be outside of <wicket:panel>, <wicket:border>, " + "and <wicket:extend>. Error occurred while rendering page: " + pageClassName + " using markup stream: "+ streamName);
  }
  return null;
}
