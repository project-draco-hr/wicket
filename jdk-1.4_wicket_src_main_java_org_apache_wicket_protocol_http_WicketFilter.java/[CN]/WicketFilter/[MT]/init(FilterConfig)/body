{
  this.filterConfig=filterConfig;
  if (SERVLET_PATH_HOLDER.equals(filterConfig.getInitParameter(FILTER_MAPPING_PARAM))) {
    servletMode=true;
  }
  final ClassLoader previousClassLoader=Thread.currentThread().getContextClassLoader();
  final ClassLoader newClassLoader=getClassLoader();
  try {
    if (previousClassLoader != newClassLoader) {
      Thread.currentThread().setContextClassLoader(newClassLoader);
    }
    String filterMapping=filterConfig.getInitParameter(WicketFilter.FILTER_MAPPING_PARAM);
    if (filterMapping == null || filterMapping.equals(WicketFilter.SERVLET_PATH_HOLDER)) {
      InputStream is=filterConfig.getServletContext().getResourceAsStream("/WEB-INF/web.xml");
      if (is != null) {
        try {
          filterPath=getFilterPath(filterConfig.getFilterName(),is);
        }
 catch (        ServletException e) {
          log.error("Error reading servlet/filter path from web.xml",e);
        }
catch (        SecurityException e) {
          log.info("Couldn't read web.xml to automatically pick up servlet/filter path: " + e.getMessage());
        }
        if (filterPath == null) {
          log.info("Unable to parse filter mapping web.xml for " + filterConfig.getFilterName() + ". "+ "Configure with init-param "+ FILTER_MAPPING_PARAM+ " if it is not \"/*\".");
        }
      }
    }
    IWebApplicationFactory factory=getApplicationFactory();
    this.webApplication=factory.createApplication(this);
    this.webApplication.setWicketFilter(this);
    String contextKey="wicket:" + filterConfig.getFilterName();
    filterConfig.getServletContext().setAttribute(contextKey,this.webApplication);
    Application.set(webApplication);
    this.webApplication.internalInit();
    this.webApplication.init();
    this.webApplication.initializeComponents();
    this.webApplication.logStarted();
  }
  finally {
    Application.unset();
    if (newClassLoader != previousClassLoader) {
      Thread.currentThread().setContextClassLoader(previousClassLoader);
    }
  }
}
