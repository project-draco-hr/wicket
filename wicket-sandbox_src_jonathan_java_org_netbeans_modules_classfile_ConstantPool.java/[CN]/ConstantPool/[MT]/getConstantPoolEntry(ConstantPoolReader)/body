{
  CPEntry newEntry=null;
  byte type=cpr.readByte();
switch (type) {
case CONSTANT_Utf8:
    newEntry=new CPUTF8Info(this,cpr.readRawUTF());
  break;
case CONSTANT_Integer:
newEntry=new CPIntegerInfo(this,cpr.readInt());
break;
case CONSTANT_Float:
newEntry=new CPFloatInfo(this,cpr.readFloat());
break;
case CONSTANT_Long:
newEntry=new CPLongInfo(this,cpr.readLong());
break;
case CONSTANT_Double:
newEntry=new CPDoubleInfo(this,cpr.readDouble());
break;
case CONSTANT_Class:
{
int nameIndex=cpr.readUnsignedShort();
newEntry=new CPClassInfo(this,nameIndex);
break;
}
case CONSTANT_String:
{
int nameIndex=cpr.readUnsignedShort();
newEntry=new CPStringInfo(this,nameIndex);
break;
}
case CONSTANT_FieldRef:
{
int classIndex=cpr.readUnsignedShort();
int natIndex=cpr.readUnsignedShort();
newEntry=new CPFieldInfo(this,classIndex,natIndex);
break;
}
case CONSTANT_MethodRef:
{
int classIndex=cpr.readUnsignedShort();
int natIndex=cpr.readUnsignedShort();
newEntry=new CPMethodInfo(this,classIndex,natIndex);
break;
}
case CONSTANT_InterfaceMethodRef:
{
int classIndex=cpr.readUnsignedShort();
int natIndex=cpr.readUnsignedShort();
newEntry=new CPInterfaceMethodInfo(this,classIndex,natIndex);
break;
}
case CONSTANT_NameAndType:
{
int nameIndex=cpr.readUnsignedShort();
int descIndex=cpr.readUnsignedShort();
newEntry=new CPNameAndTypeInfo(this,nameIndex,descIndex);
break;
}
default :
throw new IllegalArgumentException("invalid constant pool type: " + type);
}
return newEntry;
}
