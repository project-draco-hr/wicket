{
  WicketTester tester=new WicketTester();
  tester.getSecuritySettings().setAuthorizationStrategy(new RoleAuthorizationStrategy(new UserRolesAuthorizer("USER")));
final class Listener implements IUnauthorizedComponentInstantiationListener {
    private boolean eventReceived=false;
    public void onUnauthorizedInstantiation(    Component component){
      eventReceived=true;
    }
  }
  Listener listener=new Listener();
  tester.getSecuritySettings().setUnauthorizedComponentInstantiationListener(listener);
  try {
    tester.startPage(new ITestPageSource(){
      public Page getTestPage(){
        return new AdminPage();
      }
    }
);
    assertTrue("an authorization exception event should have been received",listener.eventReceived);
  }
 catch (  Exception e) {
    if (!(e.getCause() instanceof InvocationTargetException && ((InvocationTargetException)e.getCause()).getTargetException() instanceof UnauthorizedInstantiationException)) {
      throw e;
    }
  }
}
