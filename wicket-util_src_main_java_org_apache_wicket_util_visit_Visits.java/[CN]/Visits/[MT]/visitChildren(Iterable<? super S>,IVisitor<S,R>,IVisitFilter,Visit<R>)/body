{
  Args.notNull(visitor,"visitor");
  for (  final Object child : container) {
    if (filter.visitObject(child)) {
      Visit<R> childTraversal=new Visit<R>();
      S s=(S)child;
      visitor.component(s,childTraversal);
      if (childTraversal.isStopped()) {
        visit.stop(childTraversal.getResult());
        return;
      }
 else       if (childTraversal.isDontGoDeeper()) {
        continue;
      }
    }
    if (!visit.isDontGoDeeper() && (child instanceof Iterable<?>) && filter.visitChildren(child)) {
      visitChildren((Iterable<? super S>)child,visitor,filter,visit);
      if (visit.isStopped()) {
        return;
      }
    }
  }
}
