{
  boolean res=true;
  final ClassLoader previousClassLoader=Thread.currentThread().getContextClassLoader();
  final ClassLoader newClassLoader=getClassLoader();
  try {
    if (previousClassLoader != newClassLoader) {
      Thread.currentThread().setContextClassLoader(newClassLoader);
    }
    HttpServletRequest httpServletRequest=(HttpServletRequest)request;
    HttpServletResponse httpServletResponse=(HttpServletResponse)response;
    if (!Strings.isEmpty((String)request.getAttribute("javax.servlet.error.request_uri"))) {
      httpServletResponse.setStatus(HttpServletResponse.SC_OK);
    }
    String filterPath=getFilterPath(httpServletRequest);
    String redirectURL=checkIfRedirectRequired(httpServletRequest);
    if (redirectURL == null) {
      application.set();
      WebRequest webRequest=new ServletWebRequest(httpServletRequest,filterPath);
      WebResponse webResponse=new HeaderBufferingWebResponse(new ServletWebResponse(httpServletRequest,httpServletResponse));
      RequestCycle requestCycle=application.createRequestCycle(webRequest,webResponse);
      if (!requestCycle.processRequestAndDetach()) {
        if (chain != null) {
          chain.doFilter(request,response);
        }
        res=false;
      }
 else {
        webResponse.flush();
      }
    }
 else {
      if (Strings.isEmpty(httpServletRequest.getQueryString()) == false) {
        redirectURL+="?" + httpServletRequest.getQueryString();
      }
      try {
        httpServletResponse.sendRedirect(httpServletResponse.encodeRedirectURL(redirectURL));
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
  finally {
    ThreadContext.detach();
    if (newClassLoader != previousClassLoader) {
      Thread.currentThread().setContextClassLoader(previousClassLoader);
    }
    response.flushBuffer();
  }
  return res;
}
