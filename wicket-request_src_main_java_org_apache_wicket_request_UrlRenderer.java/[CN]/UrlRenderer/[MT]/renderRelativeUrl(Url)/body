{
  Args.notNull(url,"url");
  if (url instanceof IUrlRenderer) {
    IUrlRenderer renderer=(IUrlRenderer)url;
    return renderer.renderRelativeUrl(url,getBaseUrl());
  }
  List<String> baseUrlSegments=getBaseUrl().getSegments();
  List<String> urlSegments=new ArrayList<>(url.getSegments());
  removeCommonPrefixes(request,baseUrlSegments);
  removeCommonPrefixes(request,urlSegments);
  List<String> newSegments=new ArrayList<>();
  int common=0;
  String last=null;
  for (  String s : baseUrlSegments) {
    if (!urlSegments.isEmpty() && s.equals(urlSegments.get(0))) {
      ++common;
      last=urlSegments.remove(0);
    }
 else {
      break;
    }
  }
  if ((last != null) && (urlSegments.isEmpty() || (baseUrlSegments.size() == common))) {
    --common;
    urlSegments.add(0,last);
  }
  int baseUrlSize=baseUrlSegments.size();
  if (common + 1 == baseUrlSize && urlSegments.isEmpty()) {
    newSegments.add(".");
  }
 else {
    for (int i=common + 1; i < baseUrlSize; ++i) {
      newSegments.add("..");
    }
  }
  newSegments.addAll(urlSegments);
  Url relativeUrl=new Url(newSegments,url.getQueryParameters());
  relativeUrl.setFragment(url.getFragment());
  String renderedUrl=relativeUrl.toString();
  if (!renderedUrl.startsWith("..") && !renderedUrl.equals(".")) {
    renderedUrl="./" + renderedUrl;
  }
  if (renderedUrl.indexOf('?') == -1 && renderedUrl.endsWith("..")) {
    renderedUrl=renderedUrl + '/';
  }
  return renderedUrl;
}
