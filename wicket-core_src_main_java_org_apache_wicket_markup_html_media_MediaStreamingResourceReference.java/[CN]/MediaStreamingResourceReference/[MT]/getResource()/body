{
  return new PackageResource(getScope(),getName(),getLocale(),getStyle(),getVariation()){
    private static final long serialVersionUID=1L;
    @Override protected ResourceResponse newResourceResponse(    Attributes attributes){
      IResourceStream packageResourceStream=getResourceStream();
      Long startbyte=null;
      Long endbyte=null;
      try {
        Request request=attributes.getRequest();
        Response response=attributes.getResponse();
        if (!(request instanceof WebRequest) || !(response instanceof WebResponse)) {
          throw new IllegalStateException("Web request/response are required! Request: " + request + ", response: "+ response);
        }
        WebRequest webRequest=(WebRequest)request;
        WebResponse webResponse=(WebResponse)response;
        long length=packageResourceStream.length().bytes();
        ResourceResponse resourceResponse=new ResourceResponse();
        resourceResponse.setContentType(packageResourceStream.getContentType());
        resourceResponse.setFileName(MediaStreamingResourceReference.this.getName());
        resourceResponse.setContentDisposition(ContentDisposition.ATTACHMENT);
        resourceResponse.setLastModified(packageResourceStream.lastModifiedTime());
        webResponse.setHeader("Accept-Range","bytes");
        String rangeHeader=webRequest.getHeader("range");
        if (Strings.isEmpty(rangeHeader)) {
          resourceResponse.setStatusCode(200);
          resourceResponse.setContentLength(length);
        }
 else {
          rangeHeader=rangeHeader.replaceAll(" ","");
          resourceResponse.setStatusCode(206);
          String range=rangeHeader.substring(rangeHeader.indexOf('=') + 1,rangeHeader.length());
          String[] rangeParts=Strings.split(range,'-');
          if ("0".equals(rangeParts[0])) {
            webResponse.setHeader("Content-Range","bytes 0-" + (length - 1) + "/"+ length);
            resourceResponse.setContentLength(length);
          }
 else {
            startbyte=Long.parseLong(rangeParts[0]);
            if (rangeParts.length == 2) {
              endbyte=Long.parseLong(rangeParts[1]);
            }
 else {
              endbyte=length - 1;
            }
            webResponse.setHeader("Content-Range","bytes " + startbyte + '-'+ endbyte+ '/'+ length);
            resourceResponse.setContentLength((endbyte - startbyte) + 1);
          }
        }
        resourceResponse.setWriteCallback(new PartWriterCallback(packageResourceStream,startbyte,endbyte));
        return resourceResponse;
      }
 catch (      Exception e) {
        throw new WicketRuntimeException("A problem occurred while creating the video response.",e);
      }
 finally {
        if (packageResourceStream != null) {
          try {
            packageResourceStream.close();
          }
 catch (          IOException e) {
            throw new WicketRuntimeException("A problem occurred while closing the video response stream.",e);
          }
        }
      }
    }
  }
;
}
