{
  String name=getMethod.getName();
  if (name.startsWith(GET)) {
    name=SET + name.substring(3);
  }
 else {
    name=SET + name.substring(2);
  }
  try {
    Method method=clz.getMethod(name,new Class[]{getMethod.getReturnType()});
    if (method != null) {
      method.setAccessible(true);
    }
    return method;
  }
 catch (  NoSuchMethodException e) {
    Method[] methods=clz.getMethods();
    for (    Method method : methods) {
      if (method.getName().equals(name)) {
        Class<?>[] parameterTypes=method.getParameterTypes();
        if (parameterTypes.length == 1) {
          if (parameterTypes[0].isAssignableFrom(getMethod.getReturnType())) {
            return method;
          }
        }
      }
    }
    log.debug("Cannot find setter corresponding to " + getMethod);
  }
catch (  Exception e) {
    log.debug("Cannot find setter corresponding to " + getMethod);
  }
  return null;
}
