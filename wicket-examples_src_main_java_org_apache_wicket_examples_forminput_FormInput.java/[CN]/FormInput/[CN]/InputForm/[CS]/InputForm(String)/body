{
  super(name,new CompoundPropertyModel<FormInputModel>(new FormInputModel()));
  add(new LocaleDropDownChoice("localeSelect"));
  add(new Link<Void>("defaultLocaleLink"){
    @Override public void onClick(){
      WebRequest request=(WebRequest)getRequest();
      setLocale(request.getLocale());
    }
  }
);
  RequiredTextField<String> stringTextField=new RequiredTextField<String>("stringProperty");
  stringTextField.setLabel(new Model<String>("String"));
  add(stringTextField);
  RequiredTextField<Integer> integerTextField=new RequiredTextField<Integer>("integerProperty");
  add(integerTextField.add(NumberValidator.POSITIVE));
  add(new RequiredTextField<Double>("doubleProperty"));
  add(new RequiredTextField<Integer>("integerInRangeProperty").add(NumberValidator.range(0,100)));
  add(new CheckBox("booleanProperty"));
  add(new Multiply("multiply"));
  Label<Integer> multiplyLabel=new Label<Integer>("multiplyLabel",new PropertyModel<Integer>(getModel(),"multiply"));
  multiplyLabel.setComponentBorder(new BeforeAndAfterBorder());
  add(multiplyLabel);
  RadioChoice<String> rc=new RadioChoice<String>("numberRadioChoice",NUMBERS).setSuffix("");
  rc.setLabel(new Model<String>("number"));
  rc.setRequired(true);
  add(rc);
  RadioGroup<String> group=new RadioGroup<String>("numbersGroup");
  add(group);
  ListView<String> persons=new ListView<String>("numbers",NUMBERS){
    @Override protected void populateItem(    ListItem<String> item){
      item.add(new Radio<String>("radio",item.getModel()));
      item.add(new Label<String>("number",item.getModelObjectAsString()));
    }
  }
.setReuseItems(true);
  group.add(persons);
  CheckGroup<String> checks=new CheckGroup<String>("numbersCheckGroup");
  add(checks);
  ListView<String> checksList=new ListView<String>("numbers",NUMBERS){
    @Override protected void populateItem(    ListItem<String> item){
      item.add(new Check<String>("check",item.getModel()));
      item.add(new Label<String>("number",item.getModelObjectAsString()));
    }
  }
.setReuseItems(true);
  checks.add(checksList);
  add(new ListMultipleChoice<String>("siteSelection",SITES));
  add(new TextField<URL>("urlProperty",URL.class){
    @Override public IConverter<URL> getConverter(    final Class<URL> type){
      return new IConverter<URL>(){
        public URL convertToObject(        String value,        Locale locale){
          try {
            return new URL(value.toString());
          }
 catch (          MalformedURLException e) {
            throw new ConversionException("'" + value + "' is not a valid URL");
          }
        }
        public String convertToString(        URL value,        Locale locale){
          return value != null ? value.toString() : null;
        }
      }
;
    }
  }
);
  add(new TextField<UsPhoneNumber>("phoneNumberUS",UsPhoneNumber.class){
    @Override public IConverter<UsPhoneNumber> getConverter(    final Class<UsPhoneNumber> type){
      return new MaskConverter<UsPhoneNumber>("(###) ###-####",UsPhoneNumber.class);
    }
  }
);
  add(new LinesListView("lines"));
  add(new Button<Void>("saveButton"));
  add(new Button<Void>("resetButton"){
    @Override public void onSubmit(){
      setResponsePage(FormInput.class);
    }
  }
.setDefaultFormProcessing(false));
}
