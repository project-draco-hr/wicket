{
  super(name,new CompoundPropertyModel<>(new FormInputModel()));
  add(new LocaleDropDownChoice("localeSelect"));
  add(new Link<Void>("defaultLocaleLink"){
    @Override public void onClick(){
      WebRequest request=(WebRequest)getRequest();
      setLocale(request.getLocale());
    }
  }
);
  add(new TextField<String>("stringProperty").setRequired(true).setLabel(new Model<>("String")));
  add(new TextField<>("integerProperty",Integer.class).setRequired(true).add(new RangeValidator<>(1,Integer.MAX_VALUE)));
  add(new TextField<>("doubleProperty",Double.class).setRequired(true));
  add(new TextField<Integer>("integerInRangeProperty").setRequired(true).add(new RangeValidator<>(0,100)));
  add(new CheckBox("booleanProperty"));
  add(new Multiply("multiply"));
  Label multiplyLabel=new Label("multiplyLabel",new PropertyModel<Integer>(getDefaultModel(),"multiply"));
  multiplyLabel.add(new BeforeAndAfterBorder());
  add(multiplyLabel);
  RadioChoice<String> rc=new RadioChoice<>("numberRadioChoice",NUMBERS).setSuffix("");
  rc.setLabel(new Model<>("number"));
  rc.setRequired(true);
  add(rc);
  RadioGroup<String> group=new RadioGroup<>("numbersGroup");
  add(group);
  ListView<String> persons=new ListView<String>("numbers",NUMBERS){
    @Override protected void populateItem(    ListItem<String> item){
      Radio<String> radio=new Radio<>("radio",item.getModel());
      radio.setLabel(item.getModel());
      item.add(radio);
      item.add(new SimpleFormComponentLabel("number",radio));
    }
  }
.setReuseItems(true);
  group.add(persons);
  CheckGroup<String> checks=new CheckGroup<>("numbersCheckGroup");
  add(checks);
  ListView<String> checksList=new ListView<String>("numbers",NUMBERS){
    @Override protected void populateItem(    ListItem<String> item){
      Check<String> check=new Check<>("check",item.getModel());
      check.setLabel(item.getModel());
      item.add(check);
      item.add(new SimpleFormComponentLabel("number",check));
    }
  }
.setReuseItems(true);
  checks.add(checksList);
  add(new ListMultipleChoice<>("siteSelection",SITES));
  add(new TextField<URL>("urlProperty",URL.class){
    @SuppressWarnings("unchecked") @Override public <C>IConverter<C> getConverter(    final Class<C> type){
      if (URL.class.isAssignableFrom(type)) {
        return (IConverter<C>)URLConverter.INSTANCE;
      }
 else {
        return super.getConverter(type);
      }
    }
  }
);
  add(new TextField<UsPhoneNumber>("phoneNumberUS",UsPhoneNumber.class){
    @Override public <C>IConverter<C> getConverter(    final Class<C> type){
      if (UsPhoneNumber.class.isAssignableFrom(type)) {
        return new MaskConverter<>("(###) ###-####",UsPhoneNumber.class);
      }
 else {
        return super.getConverter(type);
      }
    }
  }
);
  add(new LinesListView("lines"));
  add(new Button("saveButton"));
  add(new Button("resetButton"){
    @Override public void onSubmit(){
      setResponsePage(FormInput.class);
    }
  }
.setDefaultFormProcessing(false));
}
