{
  IRequestCodingStrategy requestCodingStrategy=requestCycle.getProcessor().getRequestCodingStrategy();
  final String path=requestParameters.getPath();
  IRequestTarget target=null;
  if (requestParameters.getBookmarkablePageClass() != null) {
    target=resolveBookmarkablePage(requestCycle,requestParameters);
  }
 else   if (requestParameters.getComponentPath() != null) {
    boolean processRequest=true;
synchronized (requestCycle.getSession()) {
      if (requestParameters.isOnlyProcessIfPathActive()) {
        Session session=Session.get();
        IPageMap pageMap=session.pageMapForName(requestParameters.getPageMapName(),false);
        if (pageMap == null) {
          processRequest=false;
        }
 else         if (pageMap instanceof AccessStackPageMap) {
          AccessStackPageMap accessStackPageMap=(AccessStackPageMap)pageMap;
          if (accessStackPageMap.getAccessStack().size() > 0) {
            final Access access=(Access)accessStackPageMap.getAccessStack().peek();
            final int pageId=Integer.parseInt(Strings.firstPathComponent(requestParameters.getComponentPath(),Component.PATH_SEPARATOR));
            if (pageId != access.getId()) {
              processRequest=false;
            }
 else {
              final int version=requestParameters.getVersionNumber();
              if (version != Page.LATEST_VERSION && version != access.getVersion()) {
                processRequest=false;
              }
            }
          }
        }
 else {
        }
      }
    }
    if (processRequest) {
      try {
        target=resolveRenderedPage(requestCycle,requestParameters);
      }
 catch (      IgnoreAjaxRequestException e) {
        target=EmptyAjaxRequestTarget.getInstance();
      }
    }
 else {
      Request request=requestCycle.getRequest();
      if (request instanceof WebRequest && ((WebRequest)request).isAjax()) {
        target=EmptyAjaxRequestTarget.getInstance();
      }
 else {
        throw new PageExpiredException("Request cannot be processed");
      }
    }
  }
 else   if (requestParameters.getResourceKey() != null) {
    target=resolveSharedResource(requestCycle,requestParameters);
  }
 else   if (Strings.isEmpty(path) || ("/".equals(path))) {
    target=resolveHomePageTarget(requestCycle,requestParameters);
  }
  if (target == null) {
    target=requestCodingStrategy.targetForRequest(requestParameters);
    if (target == null && requestParameters.getComponentPath() != null) {
      throw new PageExpiredException("Cannot find the rendered page in session [pagemap=" + requestParameters.getPageMapName() + ",componentPath="+ requestParameters.getComponentPath()+ ",versionNumber="+ requestParameters.getVersionNumber()+ "]");
    }
  }
 else {
    if (Application.get().getSecuritySettings().getEnforceMounts() && requestCodingStrategy.pathForTarget(target) != null) {
      String msg="Direct access not allowed for mounted targets";
      log.error(msg + " [request=" + requestCycle.getRequest()+ ",target="+ target+ ",session="+ Session.get()+ "]");
      throw new AbortWithWebErrorCodeException(HttpServletResponse.SC_FORBIDDEN,msg);
    }
  }
  return target;
}
