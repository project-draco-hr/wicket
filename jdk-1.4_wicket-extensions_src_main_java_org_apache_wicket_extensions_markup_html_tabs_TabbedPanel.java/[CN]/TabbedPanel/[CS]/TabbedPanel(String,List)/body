{
  super(id,new Model(new Integer(-1)));
  if (tabs == null) {
    throw new IllegalArgumentException("argument [tabs] cannot be null");
  }
  if (tabs.size() < 1) {
    throw new IllegalArgumentException("argument [tabs] must contain a list of at least one tab");
  }
  this.tabs=tabs;
  final IModel tabCount=new AbstractReadOnlyModel(){
    private static final long serialVersionUID=1L;
    public Object getObject(){
      return new Integer(TabbedPanel.this.tabs.size());
    }
  }
;
  WebMarkupContainer tabsContainer=new WebMarkupContainer("tabs-container"){
    private static final long serialVersionUID=1L;
    protected void onComponentTag(    ComponentTag tag){
      super.onComponentTag(tag);
      tag.put("class",getTabContainerCssClass());
    }
  }
;
  add(tabsContainer);
  tabsContainer.add(new Loop("tabs",tabCount){
    private static final long serialVersionUID=1L;
    protected void populateItem(    LoopItem item){
      final int index=item.getIteration();
      final ITab tab=((ITab)TabbedPanel.this.tabs.get(index));
      final int selected=getSelectedTab();
      final WebMarkupContainer titleLink=newLink("link",index);
      titleLink.add(newTitle("title",tab.getTitle(),index));
      item.add(titleLink);
    }
    protected LoopItem newItem(    int iteration){
      return new LoopItem(iteration){
        private static final long serialVersionUID=1L;
        protected void onComponentTag(        ComponentTag tag){
          super.onComponentTag(tag);
          String cssClass=(String)tag.getString("class");
          if (cssClass == null) {
            cssClass=" ";
          }
          cssClass+=" tab" + getIteration();
          if (getIteration() == getSelectedTab()) {
            cssClass+=" selected";
          }
          if (getIteration() == getIterations() - 1) {
            cssClass+=" last";
          }
          tag.put("class",cssClass.trim());
        }
      }
;
    }
  }
);
  setSelectedTab(0);
}
