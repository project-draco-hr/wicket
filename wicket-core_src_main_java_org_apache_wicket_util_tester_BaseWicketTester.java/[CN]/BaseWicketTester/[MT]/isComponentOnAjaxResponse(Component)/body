{
  String failMessage="A component which is null could not have been added to the AJAX response";
  notNull(failMessage,component);
  Result result;
  String componentInfo=component.toString();
  if (!component.isVisible()) {
    failMessage="A component which is invisible and doesn't render a placeholder tag" + " will not be rendered at all and thus won't be accessible for subsequent AJAX interaction. " + componentInfo;
    result=isTrue(failMessage,component.getOutputMarkupPlaceholderTag());
    if (result.wasFailed()) {
      return result;
    }
  }
  String ajaxResponse=getLastResponseAsString();
  failMessage="The previous response was not an AJAX response. " + "You need to execute an AJAX event, using #clickLink() or " + "#executeAjaxEvent(), before using this assertion method";
  boolean isAjaxResponse=Pattern.compile("^<\\?xml version=\"1.0\" encoding=\".*?\"\\?><ajax-response>").matcher(ajaxResponse).find();
  result=isTrue(failMessage,isAjaxResponse);
  if (result.wasFailed()) {
    return result;
  }
  String markupId=component.getMarkupId();
  failMessage="The component doesn't have a markup id, " + "which means that it can't have been added to the AJAX response. " + componentInfo;
  result=isTrue(failMessage,!Strings.isEmpty(markupId));
  if (result.wasFailed()) {
    return result;
  }
  boolean isComponentInAjaxResponse=ajaxResponse.matches("(?s).*<component id=\"" + markupId + "\"[^>]*?>.*");
  failMessage="Component wasn't found in the AJAX response. " + componentInfo;
  return isTrue(failMessage,isComponentInAjaxResponse);
}
