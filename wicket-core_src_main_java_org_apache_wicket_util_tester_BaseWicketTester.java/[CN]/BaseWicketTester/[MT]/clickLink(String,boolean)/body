{
  Component linkComponent=getComponentFromLastRenderedPage(path);
  checkUsability(linkComponent,true);
  if (linkComponent instanceof AjaxLink) {
    if (isAjax == false) {
      fail("Link " + path + "is an AjaxLink and will "+ "not be invoked when AJAX (javascript) is disabled.");
    }
    List<AjaxEventBehavior> behaviors=WicketTesterHelper.findAjaxEventBehaviors(linkComponent,"click");
    for (    AjaxEventBehavior behavior : behaviors) {
      executeBehavior(behavior);
    }
  }
 else   if (linkComponent instanceof AjaxSubmitLink) {
    if (isAjax == false) {
      fail("Link " + path + " is an AjaxSubmitLink and "+ "will not be invoked when AJAX (javascript) is disabled.");
    }
    AjaxSubmitLink link=(AjaxSubmitLink)linkComponent;
    String pageRelativePath=link.getInputName();
    request.getPostParameters().setParameterValue(pageRelativePath,"x");
    submitAjaxFormSubmitBehavior(link,(AjaxFormSubmitBehavior)WicketTesterHelper.findAjaxEventBehavior(link,"click"));
  }
 else   if (linkComponent instanceof IAjaxLink && isAjax) {
    List<AjaxEventBehavior> behaviors=WicketTesterHelper.findAjaxEventBehaviors(linkComponent,"click");
    for (    AjaxEventBehavior behavior : behaviors) {
      executeBehavior(behavior);
    }
  }
 else   if (linkComponent instanceof SubmitLink) {
    SubmitLink submitLink=(SubmitLink)linkComponent;
    String pageRelativePath=submitLink.getInputName();
    request.getPostParameters().setParameterValue(pageRelativePath,"x");
    serializeFormToRequest(submitLink.getForm());
    submitForm(submitLink.getForm().getPageRelativePath());
  }
 else   if (linkComponent instanceof ExternalLink) {
    ExternalLink externalLink=(ExternalLink)linkComponent;
    String href=externalLink.getDefaultModelObjectAsString();
    try {
      getResponse().sendRedirect(href);
      recordRequestResponse();
      setupNextRequestCycle();
    }
 catch (    IOException iox) {
      throw new WicketRuntimeException("An error occurred while redirecting to: " + href,iox);
    }
  }
 else   if (linkComponent instanceof AbstractLink) {
    AbstractLink link=(AbstractLink)linkComponent;
    if (link instanceof BookmarkablePageLink) {
      BookmarkablePageLink<?> bookmarkablePageLink=(BookmarkablePageLink<?>)link;
      try {
        Method getParametersMethod=BookmarkablePageLink.class.getDeclaredMethod("getPageParameters",(Class<?>[])null);
        getParametersMethod.setAccessible(true);
        PageParameters parameters=(PageParameters)getParametersMethod.invoke(bookmarkablePageLink,(Object[])null);
        startPage(bookmarkablePageLink.getPageClass(),parameters);
      }
 catch (      Exception e) {
        throw new WicketRuntimeException("Internal error in WicketTester. " + "Please report this in Wicket's Issue Tracker.",e);
      }
    }
 else     if (link instanceof ResourceLink) {
      try {
        Method getURL=ResourceLink.class.getDeclaredMethod("getURL",new Class[0]);
        getURL.setAccessible(true);
        CharSequence url=(CharSequence)getURL.invoke(link);
        executeUrl(url.toString());
      }
 catch (      Exception x) {
        throw new RuntimeException("An error occurred while clicking on a ResourceLink",x);
      }
    }
 else {
      executeListener(link,ILinkListener.INTERFACE);
    }
  }
 else   if (linkComponent instanceof IAjaxLink && isAjax == false) {
    fail("Link " + path + "is an IAjaxLink and will "+ "not be invoked when AJAX (javascript) is disabled.");
  }
 else {
    fail("Link " + path + " is not a Link, AjaxLink, AjaxFallbackLink or AjaxSubmitLink");
  }
}
