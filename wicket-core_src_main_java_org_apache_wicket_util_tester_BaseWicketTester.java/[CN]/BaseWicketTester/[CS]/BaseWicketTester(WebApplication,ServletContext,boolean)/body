{
  if (!init) {
    Args.notNull(application,"application");
  }
  servletContext=servletCtx != null ? servletCtx : !init && application.getServletContext() != null ? application.getServletContext() : new MockServletContext(application,null);
  if (application.getWicketFilter() == null) {
    final FilterConfig filterConfig=new TestFilterConfig();
    WicketFilter filter=new WicketFilter(){
      @Override public FilterConfig getFilterConfig(){
        return filterConfig;
      }
    }
;
    application.setWicketFilter(filter);
  }
  httpSession=new MockHttpSession(servletContext);
  ThreadContext.detach();
  this.application=application;
  ThreadContext.setApplication(application);
  if (init) {
    if (application.getName() == null) {
      application.setName("WicketTesterApplication-" + UUID.randomUUID());
    }
    application.setServletContext(servletContext);
    application.initApplication();
  }
  application.getResourceSettings().setResourcePollFrequency(getResourcePollFrequency());
  application.setPageRendererProvider(new LastPageRecordingPageRendererProvider(application.getPageRendererProvider()));
  application.setRequestCycleProvider(new TestRequestCycleProvider(application.getRequestCycleProvider()));
  originalFeedbackMessageCleanupFilter=application.getApplicationSettings().getFeedbackMessageCleanupFilter();
  application.getApplicationSettings().setFeedbackMessageCleanupFilter(IFeedbackMessageFilter.NONE);
  IPageManagerProvider pageManagerProvider=newTestPageManagerProvider();
  if (pageManagerProvider != null) {
    application.setPageManagerProvider(pageManagerProvider);
  }
  application.getSessionStore().registerUnboundListener(new UnboundListener(){
    @Override public void sessionUnbound(    String sessionId){
      newSession();
    }
  }
);
  setupNextRequestCycle();
}
