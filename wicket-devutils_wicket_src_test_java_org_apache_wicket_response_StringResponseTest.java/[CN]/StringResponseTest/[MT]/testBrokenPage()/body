{
  tester.setupRequestAndResponse();
  tester.getApplication().getRequestCycleSettings().setUnexpectedExceptionDisplay(IExceptionSettings.SHOW_EXCEPTION_PAGE);
  WebRequestCycle cycle=tester.createRequestCycle();
  cycle.setResponse(new StringResponse());
  try {
    cycle.request(new BookmarkablePageRequestTarget(BrokenPage.class));
    Method method=MockWebApplication.class.getDeclaredMethod("generateLastRenderedPage",new Class[]{WebRequestCycle.class});
    method.setAccessible(true);
    Page page=(Page)method.invoke(tester,new Object[]{cycle});
    assertTrue("Page is not an ExceptionErrorPage",page instanceof ExceptionErrorPage);
    WebRequestCycle cycle2=tester.createRequestCycle();
    cycle2.setResponse(new StringResponse());
    page.render();
  }
 catch (  IllegalArgumentException e) {
    throw new RuntimeException(e);
  }
catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
catch (  InvocationTargetException e) {
    throw new RuntimeException(e);
  }
catch (  SecurityException e) {
    throw new RuntimeException(e);
  }
catch (  NoSuchMethodException e) {
    throw new RuntimeException(e);
  }
 finally {
    cycle.getResponse().close();
  }
}
