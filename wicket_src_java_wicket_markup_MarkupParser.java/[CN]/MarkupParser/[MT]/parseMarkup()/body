{
  final List autoAddList=new ArrayList();
  this.markupFilterChain=newFilterChain(autoAddList);
  initFilterChain();
  final List list=new ArrayList();
  int stripRemainingElements=-1;
  for (ComponentTag tag; null != (tag=(ComponentTag)markupFilterChain.nextTag()); ) {
    boolean add=(tag.getId() != null);
    if (!add && tag.getXmlTag().isClose()) {
      add=((tag.getOpenTag() != null) && (tag.getOpenTag().getId() != null));
    }
    if (tag.isOpen() && "html".equals(tag.getName().toLowerCase())) {
      determineWicketNamespace(tag);
    }
    if (add || (autoAddList.size() > 0)) {
      final CharSequence text=xmlParser.getInputFromPositionMarker(tag.getPos());
      if (text.length() > 0) {
        String rawMarkup=text.toString();
        if (stripComments) {
          rawMarkup=rawMarkup.replaceAll("<!--(.|\n|\r)*?-->","");
        }
        if (compressWhitespace) {
          rawMarkup=rawMarkup.replaceAll("[ \\t]+"," ");
          rawMarkup=rawMarkup.replaceAll("( ?[\\r\\n] ?)+","\n");
        }
        list.add(new RawMarkup(rawMarkup));
      }
      if (tag instanceof WicketTag) {
        final WicketTag wtag=(WicketTag)tag;
        if (wtag.isExtendTag()) {
          if (wtag.isOpen()) {
            list.clear();
          }
 else           if (wtag.isClose()) {
            if (stripRemainingElements != -1) {
              throw new MarkupException("Have already seen a <wicket:extend> tag");
            }
            stripRemainingElements=list.size() + 1;
          }
 else {
            throw new MarkupException("Unmatched open close tags for <wicket:extend>");
          }
        }
      }
      if ((add == false) && (autoAddList.size() > 0)) {
        xmlParser.setPositionMarker(tag.getPos());
      }
      list.addAll(autoAddList);
      autoAddList.clear();
    }
    if (add) {
      if (!WicketRemoveTagHandler.IGNORE.equals(tag.getId())) {
        list.add(tag);
      }
      xmlParser.setPositionMarker();
    }
  }
  final CharSequence text=xmlParser.getInputFromPositionMarker(-1);
  if (text.length() > 0) {
    list.add(new RawMarkup(text));
  }
  if (stripRemainingElements != -1) {
    for (int i=list.size() - 1; i >= stripRemainingElements; i--) {
      list.remove(i);
    }
  }
  for (int i=0; i < list.size(); i++) {
    MarkupElement elem=(MarkupElement)list.get(i);
    if (elem instanceof ComponentTag) {
      ((ComponentTag)elem).makeImmutable();
    }
  }
  return Collections.unmodifiableList(list);
}
