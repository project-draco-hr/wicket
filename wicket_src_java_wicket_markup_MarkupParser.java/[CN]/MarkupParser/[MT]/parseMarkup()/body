{
  final List autoAddList=new ArrayList();
  this.markupFilterChain=newFilterChain(autoAddList);
  initFilterChain();
  boolean stripComments=application.getMarkupSettings().getStripComments();
  boolean compressWhitespace=application.getMarkupSettings().getCompressWhitespace();
  try {
    for (ComponentTag tag; null != (tag=(ComponentTag)markupFilterChain.nextTag()); ) {
      boolean add=(tag.getId() != null);
      if (!add && tag.getXmlTag().isClose()) {
        add=((tag.getOpenTag() != null) && (tag.getOpenTag().getId() != null));
      }
      RawMarkup replaceTag=null;
      if (tag.isOpen() && "html".equals(tag.getName().toLowerCase())) {
        add|=determineWicketNamespace(tag);
        if ((add == true) && (tag.getId() == null)) {
          replaceTag=new RawMarkup(tag.toString());
        }
      }
      if (add || (autoAddList.size() > 0) || tag.isModified()) {
        final CharSequence text=xmlParser.getInputFromPositionMarker(tag.getPos());
        if (text.length() > 0) {
          String rawMarkup=text.toString();
          if (stripComments) {
            rawMarkup=removeComment(rawMarkup);
          }
          if (compressWhitespace) {
            rawMarkup=rawMarkup.replaceAll("[ \\t]+"," ");
            rawMarkup=rawMarkup.replaceAll("( ?[\\r\\n] ?)+","\n");
          }
          this.markup.addMarkupElement(new RawMarkup(rawMarkup));
        }
        if ((add == false) && (autoAddList.size() > 0)) {
          xmlParser.setPositionMarker(tag.getPos());
        }
        for (int i=0; i < autoAddList.size(); i++) {
          this.markup.addMarkupElement((MarkupElement)autoAddList.get(i));
        }
        autoAddList.clear();
      }
      if (add) {
        if (!WicketRemoveTagHandler.IGNORE.equals(tag.getId())) {
          if (replaceTag != null) {
            this.markup.addMarkupElement(replaceTag);
          }
 else {
            this.markup.addMarkupElement(tag);
          }
        }
        xmlParser.setPositionMarker();
      }
 else       if (tag.isModified()) {
        this.markup.addMarkupElement(new RawMarkup(tag.toString()));
        xmlParser.setPositionMarker();
      }
    }
  }
 catch (  ParseException ex) {
    final CharSequence text=xmlParser.getInputFromPositionMarker(-1);
    if (text.length() > 0) {
      this.markup.addMarkupElement(new RawMarkup(text));
    }
    this.markup.setEncoding(xmlParser.getEncoding());
    this.markup.setXmlDeclaration(xmlParser.getXmlDeclaration());
    MarkupStream markupStream=new MarkupStream(markup);
    markupStream.setCurrentIndex(this.markup.size() - 1);
    throw new MarkupException(markupStream,ex.getMessage(),ex);
  }
  final CharSequence text=xmlParser.getInputFromPositionMarker(-1);
  if (text.length() > 0) {
    this.markup.addMarkupElement(new RawMarkup(text));
  }
  this.markup.makeImmutable();
}
