{
  for (int i=0; i < list.size(); i++) {
    final MarkupElement element=(MarkupElement)list.get(i);
    if (element instanceof ComponentTag) {
      final ComponentTag openTag=(ComponentTag)element;
      boolean remove=(openTag.isOpen() && openTag.componentName.equalsIgnoreCase("[remove]"));
      if (remove == true) {
        throw new RenderException("[remove] has been replaced by <wicket:region name=remove>. Please modify your markup accordingly");
      }
      if ((remove == false) && (element instanceof ComponentWicketTag)) {
        remove=((ComponentWicketTag)element).isRemoveTag();
      }
      if (remove == true) {
        if (openTag.isOpenClose()) {
          throw new MarkupException("Wicket remove tag must not be an open-close tag. Position:" + openTag.getPos());
        }
        list.remove(i);
        if ((i < list.size()) && (list.get(i) instanceof RawMarkup)) {
          list.remove(i);
        }
        if ((i < list.size()) && (list.get(i) instanceof ComponentTag)) {
          ComponentTag closeTag=(ComponentTag)list.get(i);
          if (closeTag.closes(openTag)) {
            list.remove(i);
            i--;
            continue;
          }
        }
        if (i < list.size()) {
          throw new MarkupException("<wicket:region name=remove> open tag " + openTag + " not closed by "+ list.get(i)+ ". It must not contain a nested wicket component.");
        }
 else {
          throw new MarkupException("<wicket:region name=remove> open tag " + openTag + " not closed."+ " It must nt contain a nested wicket component.");
        }
      }
    }
  }
}
