{
  tester.getApplication().getRequestLoggerSettings().setRequestsWindowSize(4);
  AbstractRequestLogger logger=new AbstractRequestLogger(){
    @Override protected void log(    RequestData rd,    SessionData sd){
    }
  }
;
  logger.addRequest(requestData());
  assertEquals(1,logger.getRequests().size());
  assertEquals("0",logger.getRequests().get(0).getRequestedUrl());
  logger.addRequest(requestData());
  assertEquals(2,logger.getRequests().size());
  assertEquals("1",logger.getRequests().get(1).getRequestedUrl());
  logger.addRequest(requestData());
  assertEquals(3,logger.getRequests().size());
  assertEquals("2",logger.getRequests().get(2).getRequestedUrl());
  logger.addRequest(requestData());
  assertEquals(4,logger.getRequests().size());
  assertEquals("3",logger.getRequests().get(3).getRequestedUrl());
  logger.addRequest(requestData());
  assertEquals(4,logger.getRequests().size());
  assertEquals("4",logger.getRequests().get(3).getRequestedUrl());
  logger.addRequest(requestData());
  assertEquals(4,logger.getRequests().size());
  assertEquals("5",logger.getRequests().get(3).getRequestedUrl());
  logger.addRequest(requestData());
  assertEquals(4,logger.getRequests().size());
  assertEquals("6",logger.getRequests().get(3).getRequestedUrl());
  logger.addRequest(requestData());
  assertEquals(4,logger.getRequests().size());
  assertEquals("7",logger.getRequests().get(3).getRequestedUrl());
  logger.addRequest(requestData());
  assertEquals(4,logger.getRequests().size());
  assertEquals("8",logger.getRequests().get(3).getRequestedUrl());
}
