{
  StringBuilder buffer=new StringBuilder(128);
  Iterator<T> options=getOptionsIterator();
  IChoiceRenderer<T> renderer=getPalette().getChoiceRenderer();
  while (options.hasNext()) {
    final T choice=options.next();
    final CharSequence id;
{
      String value=renderer.getIdValue(choice,0);
      if (getEscapeModelStrings()) {
        id=Strings.escapeMarkup(value);
      }
 else {
        id=value;
      }
    }
    final CharSequence value;
{
      Object displayValue=renderer.getDisplayValue(choice);
      Class<?> displayClass=displayValue == null ? null : displayValue.getClass();
      IConverter<Object> converter=(IConverter<Object>)getConverter(displayClass);
      String displayString=converter.convertToString(displayValue,getLocale());
      displayString=getLocalizer().getString(displayString,this,displayString);
      if (getEscapeModelStrings()) {
        value=Strings.escapeMarkup(displayString);
      }
 else {
        value=displayString;
      }
    }
    buffer.append("\n<option value=\"").append(id).append("\"");
    Map<String,String> additionalAttributesMap=getAdditionalAttributes(choice);
    if (additionalAttributesMap != null) {
      for (      String s : additionalAttributesMap.keySet()) {
        buffer.append(" " + s + "=\""+ additionalAttributesMap.get(s)+ "\"");
      }
    }
    buffer.append(">").append(value).append("</option>");
  }
  buffer.append("\n");
  replaceComponentTagBody(markupStream,openTag,buffer);
}
