{
  StringBuilder buffer=new StringBuilder(128);
  Iterator<T> options=getOptionsIterator();
  ChoiceRenderer<T> renderer=getPalette().getChoiceRenderer();
  boolean localizeDisplayValues=localizeDisplayValues();
  while (options.hasNext()) {
    final T choice=options.next();
    final CharSequence id;
{
      String value=renderer.getIdValue(choice,0);
      if (getEscapeModelStrings()) {
        id=Strings.escapeMarkup(value);
      }
 else {
        id=value;
      }
    }
    final CharSequence value;
{
      Object displayValue=renderer.getDisplayValue(choice);
      Class<?> displayClass=displayValue == null ? null : displayValue.getClass();
      @SuppressWarnings("unchecked") IConverter<Object> converter=(IConverter<Object>)getConverter(displayClass);
      String displayString=converter.convertToString(displayValue,getLocale());
      if (localizeDisplayValues) {
        displayString=getLocalizer().getString(displayString,this,displayString);
      }
      if (getEscapeModelStrings()) {
        value=Strings.escapeMarkup(displayString);
      }
 else {
        value=displayString;
      }
    }
    buffer.append("\n<option value=\"").append(id).append("\"");
    Map<String,String> additionalAttributesMap=getAdditionalAttributes(choice);
    if (additionalAttributesMap != null) {
      for (      Map.Entry<String,String> entry : additionalAttributesMap.entrySet()) {
        buffer.append(' ').append(entry.getKey()).append("=\"").append(entry.getValue()).append("\"");
      }
    }
    buffer.append(">").append(value).append("</option>");
  }
  buffer.append("\n");
  replaceComponentTagBody(markupStream,openTag,buffer);
}
