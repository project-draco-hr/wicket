{
  final ThreadContext previousThreadContext=ThreadContext.detach();
  boolean res=true;
  final ClassLoader previousClassLoader=Thread.currentThread().getContextClassLoader();
  final ClassLoader newClassLoader=getClassLoader();
  try {
    if (previousClassLoader != newClassLoader) {
      Thread.currentThread().setContextClassLoader(newClassLoader);
    }
    HttpServletRequest httpServletRequest=(HttpServletRequest)request;
    HttpServletResponse httpServletResponse=(HttpServletResponse)response;
    String filterPath=getFilterPath(httpServletRequest);
    if (filterPath == null) {
      throw new IllegalStateException("filter path was not configured");
    }
    WebApplication application=getApplication();
    ThreadContext.setApplication(application);
    WebRequest webRequest=application.createWebRequest(httpServletRequest,filterPath);
    WebResponse webResponse=application.createWebResponse(webRequest,httpServletResponse);
    RequestCycle requestCycle=application.createRequestCycle(webRequest,webResponse);
    ThreadContext.setRequestCycle(requestCycle);
    if (acceptWebSocket(httpServletRequest,httpServletResponse,application) || httpServletResponse.isCommitted()) {
      res=true;
    }
 else     if (!requestCycle.processRequestAndDetach() && !httpServletResponse.isCommitted()) {
      if (chain != null) {
        chain.doFilter(request,response);
      }
      res=false;
    }
 else {
      webResponse.flush();
    }
  }
  finally {
    ThreadContext.restore(previousThreadContext);
    if (newClassLoader != previousClassLoader) {
      Thread.currentThread().setContextClassLoader(previousClassLoader);
    }
    if (response.isCommitted()) {
      response.flushBuffer();
    }
  }
  return res;
}
