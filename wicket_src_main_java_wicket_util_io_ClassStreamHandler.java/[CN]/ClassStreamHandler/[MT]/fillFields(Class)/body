{
  Field[] fields=cls.getDeclaredFields();
  for (int i=0; i < fields.length; i++) {
    Field field=fields[i];
    field.setAccessible(true);
    if (!Modifier.isStatic(field.getModifiers()) && !Modifier.isTransient(field.getModifiers())) {
      FieldAndIndex fai=null;
      Class clz=field.getType();
      long offset=unsafe.objectFieldOffset(field);
      if (clz == boolean.class) {
        fai=new BooleanFieldAndIndex(field);
      }
 else       if (clz == byte.class) {
        fai=new ByteFieldAndIndex(field);
      }
 else       if (clz == short.class) {
        fai=new ShortFieldAndIndex(field);
      }
 else       if (clz == char.class) {
        fai=new CharFieldAndIndex(field);
      }
 else       if (clz == int.class) {
        fai=new IntFieldAndIndex(field);
      }
 else       if (clz == long.class) {
        fai=new LongFieldAndIndex(field);
      }
 else       if (clz == float.class) {
        fai=new FloatFieldAndIndex(field);
      }
 else       if (clz == double.class) {
        fai=new DoubleFieldAndIndex(field);
      }
 else {
        fai=new ObjectFieldAndIndex(field);
      }
      this.fields.add(fai);
    }
  }
  cls=cls.getSuperclass();
  if (cls != Object.class) {
    fillFields(cls);
  }
  return;
}
