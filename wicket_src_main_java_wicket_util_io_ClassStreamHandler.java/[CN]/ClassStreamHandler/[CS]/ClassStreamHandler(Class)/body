{
  this.classId=classCounter++;
  this.clz=cls;
  if (!cls.isPrimitive()) {
    this.fields=new ArrayList();
    cons=getSerializableConstructor(clz);
    if (cons == null) {
      throw new RuntimeException("Failed to get the constructor from clz: " + clz);
    }
    writeObjectMethod=new ArrayList();
    readObjectMethod=new ArrayList();
    Class parent=cls;
    while (parent != Object.class) {
      Method method=getPrivateMethod(parent,"writeObject",new Class[]{ObjectOutputStream.class},Void.TYPE);
      if (method != null)       writeObjectMethod.add(method);
      method=getPrivateMethod(parent,"readObject",new Class[]{ObjectInputStream.class},Void.TYPE);
      if (method != null)       readObjectMethod.add(method);
      parent=parent.getSuperclass();
    }
    fillFields(cls);
  }
 else {
    fields=null;
    cons=null;
    writeObjectMethod=null;
    readObjectMethod=null;
    if (clz == boolean.class) {
      primitiveArray=new BooleanPrimitiveArray();
    }
 else     if (clz == byte.class) {
      primitiveArray=new BytePrimitiveArray();
    }
 else     if (clz == short.class) {
      primitiveArray=new ShortPrimitiveArray();
    }
 else     if (clz == char.class) {
      primitiveArray=new CharPrimitiveArray();
    }
 else     if (clz == int.class) {
      primitiveArray=new IntPrimitiveArray();
    }
 else     if (clz == long.class) {
      primitiveArray=new LongPrimitiveArray();
    }
 else     if (clz == float.class) {
      primitiveArray=new FloatPrimitiveArray();
    }
 else     if (clz == double.class) {
      primitiveArray=new DoublePrimitiveArray();
    }
  }
}
