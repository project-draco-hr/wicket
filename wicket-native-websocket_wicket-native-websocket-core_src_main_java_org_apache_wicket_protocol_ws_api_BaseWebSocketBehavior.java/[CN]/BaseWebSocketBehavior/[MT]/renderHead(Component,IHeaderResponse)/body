{
  super.renderHead(component,response);
  response.render(JavaScriptHeaderItem.forReference(WicketWebSocketJQueryResourceReference.get()));
  PackageTextTemplate webSocketSetupTemplate=new PackageTextTemplate(WicketWebSocketJQueryResourceReference.class,"res/js/wicket-websocket-setup.js.tmpl");
  Map<String,Object> variables=Generics.newHashMap();
  if (Strings.isEmpty(resourceName)) {
    int pageId=component.getPage().getPageId();
    variables.put("pageId",pageId);
    variables.put("resourceName","");
  }
 else {
    variables.put("resourceName",resourceName);
    variables.put("pageId",false);
  }
  WebSocketSettings webSocketSettings=WebSocketSettings.Holder.get(component.getApplication());
  CharSequence baseUrl=getBaseUrl(webSocketSettings);
  Args.notNull(baseUrl,"baseUrl");
  variables.put("baseUrl",baseUrl);
  CharSequence contextPath=getContextPath(webSocketSettings);
  Args.notNull(contextPath,"contextPath");
  variables.put("contextPath",contextPath);
  variables.put("applicationName",component.getApplication().getName());
  CharSequence filterPrefix=getFilterPrefix(webSocketSettings);
  Args.notNull(filterPrefix,"filterPrefix");
  variables.put("filterPrefix",filterPrefix);
  String webSocketSetupScript=webSocketSetupTemplate.asString(variables);
  response.render(OnDomReadyHeaderItem.forScript(webSocketSetupScript));
}
