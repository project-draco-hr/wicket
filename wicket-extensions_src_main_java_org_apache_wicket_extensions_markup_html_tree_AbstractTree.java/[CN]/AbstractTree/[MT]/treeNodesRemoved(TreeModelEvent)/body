{
  if (dirtyAll) {
    return;
  }
  Object parentNode=removalEvent.getTreePath().getLastPathComponent();
  TreeItem parentItem=nodeToItemMap.get(parentNode);
  List<Object> selection=new ArrayList<Object>(getTreeState().getSelectedNodes());
  List<Object> removed=Arrays.asList(removalEvent.getChildren());
  for (  Object selectedNode : selection) {
    Object cursor=selectedNode;
    while (cursor != null) {
      if (removed.contains(cursor)) {
        getTreeState().selectNode(selectedNode,false);
      }
      if (cursor instanceof TreeNode) {
        cursor=((TreeNode)cursor).getParent();
      }
 else {
        cursor=null;
      }
    }
  }
  if (parentItem != null && isNodeVisible(parentNode)) {
    if (isNodeExpanded(parentNode)) {
      for (      Object deletedNode : removalEvent.getChildren()) {
        TreeItem itemToDelete=nodeToItemMap.get(deletedNode);
        if (itemToDelete != null) {
          markTheLastButOneChildDirty(parentItem,itemToDelete);
          visitItemChildren(itemToDelete,new IItemCallback(){
            @Override public void visitItem(            TreeItem item){
              removeItem(item);
            }
          }
);
          parentItem.getChildren().remove(itemToDelete);
          removeItem(itemToDelete);
        }
      }
    }
    if (!parentItem.hasChildTreeItems()) {
      invalidateNode(parentNode,true);
    }
  }
}
