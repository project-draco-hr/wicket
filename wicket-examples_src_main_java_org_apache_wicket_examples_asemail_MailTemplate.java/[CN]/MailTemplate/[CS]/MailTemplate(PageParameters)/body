{
  super(parameters);
  final FeedbackPanel feedback=new FeedbackPanel("feedback");
  feedback.setOutputMarkupId(true);
  add(feedback);
  final Form<Void> form=new Form<Void>("form");
  add(form);
  TextField<String> nameTextField=new TextField<String>("name",new PropertyModel<String>(MailTemplate.this,"name"));
  nameTextField.setOutputMarkupId(true);
  form.add(nameTextField);
  final MultiLineLabel result=new MultiLineLabel("result",new Model<String>());
  result.setOutputMarkupId(true);
  add(result);
  AjaxSubmitLink basedOnPageLink=new AjaxSubmitLink("pageBasedLink",form){
    private static final long serialVersionUID=1L;
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      PageParameters parameters=new PageParameters();
      parameters.set("name",name);
      PageProvider pageProvider=new PageProvider(TemplateBasedOnPage.class,parameters);
      CharSequence pageHtml=ComponentRenderer.renderPage(pageProvider);
      updateResult(result,pageHtml,target);
      target.add(feedback);
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form<?> form){
      target.add(feedback);
    }
  }
;
  AjaxSubmitLink basedOnPanelLink=new AjaxSubmitLink("panelBasedLink",form){
    private static final long serialVersionUID=1L;
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      CharSequence panelHtml=ComponentRenderer.renderComponent(new MailTemplatePanel(ComponentRenderer.COMP_ID,new PropertyModel<String>(MailTemplate.this,"name")));
      updateResult(result,panelHtml,target);
      target.add(feedback);
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form<?> form){
      target.add(feedback);
    }
  }
;
  AjaxSubmitLink basedOnTextTemplateLink=new AjaxSubmitLink("textTemplateBasedLink",form){
    private static final long serialVersionUID=1L;
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      Map<String,Object> variables=new HashMap<String,Object>();
      variables.put("name",name);
      CharSequence relativeUrl=urlFor(new PackageResourceReference(MailTemplate.class,"resource.txt"),null);
      String href=getRequestCycle().getUrlRenderer().renderFullUrl(Url.parse(relativeUrl.toString()));
      variables.put("downloadLink",href);
      PackageTextTemplate template=new PackageTextTemplate(MailTemplate.class,"mail-template.tmpl");
      CharSequence templateHtml=template.asString(variables);
      updateResult(result,templateHtml,target);
      target.add(feedback);
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form<?> form){
      target.add(feedback);
    }
  }
;
  add(basedOnPageLink,basedOnPanelLink,basedOnTextTemplateLink);
}
