{
  String fullPath=path + getFileExtension();
  final IResourceStream resourceStream=application.getResourceSettings().getResourceStreamLocator().locate(clazz,fullPath);
  if (resourceStream == null) {
    return null;
  }
  final ModificationWatcher watcher=application.getResourceSettings().getResourceWatcher(true);
  if (watcher != null) {
    watcher.add(resourceStream,new IChangeListener(){
      public void onChange(){
        log.info("A properties files has changed. Removing all entries " + "from the cache. Resource: " + resourceStream);
        clearCache();
        Iterator<IPropertiesChangeListener> iter=afterReloadListeners.iterator();
        while (iter.hasNext()) {
          IPropertiesChangeListener listener=iter.next();
          try {
            listener.propertiesChanged(path);
          }
 catch (          Throwable ex) {
            log.error("PropertiesReloadListener has thrown an exception: " + ex.getMessage());
          }
        }
      }
    }
);
  }
  log.info("Loading properties files from " + resourceStream);
  ValueMap strings=null;
  try {
    BufferedInputStream in=null;
    try {
      in=new BufferedInputStream(resourceStream.getInputStream());
      java.util.Properties properties=loadProperties(in);
      strings=new ValueMap();
      Enumeration<?> enumeration=properties.propertyNames();
      while (enumeration.hasMoreElements()) {
        String property=(String)enumeration.nextElement();
        strings.put(property,properties.getProperty(property));
      }
      return new Properties(path,strings);
    }
  finally {
      if (in != null) {
        in.close();
      }
      resourceStream.close();
    }
  }
 catch (  ResourceStreamNotFoundException e) {
    log.warn("Unable to find resource " + resourceStream,e);
    strings=ValueMap.EMPTY_MAP;
  }
catch (  IOException e) {
    log.warn("Unable to access resource " + resourceStream,e);
    strings=ValueMap.EMPTY_MAP;
  }
  return null;
}
