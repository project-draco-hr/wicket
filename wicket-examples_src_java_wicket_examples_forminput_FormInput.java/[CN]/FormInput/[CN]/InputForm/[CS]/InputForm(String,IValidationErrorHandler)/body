{
  super(name,validationErrorHandler);
  RequiredValidator requiredValidator=new RequiredValidator();
  TextField stringInput=new TextField("stringInput",input,"stringProperty");
  stringInput.add(requiredValidator);
  TextField integerInput=new TextField("integerInput",input,"integerProperty");
  integerInput.add(requiredValidator);
  integerInput.add(new TypeValidator(Integer.class));
  TextField doubleInput=new TextField("doubleInput",input,"doubleProperty");
  doubleInput.add(requiredValidator);
  doubleInput.add(new TypeValidator(Double.class));
  TextField dateInput=new TextField("dateInput",input,"dateProperty");
  dateInput.add(requiredValidator);
  dateInput.add(new TypeValidator(Date.class));
  add(stringInput);
  add(integerInput);
  add(doubleInput);
  add(dateInput);
  TextField integerInRangeInput=new TextField("integerInRangeInput",input,"integerInRangeProperty");
  integerInRangeInput.add(requiredValidator);
  integerInRangeInput.add(new AbstractValidator(){
    public ValidationErrorMessage validate(    FormComponent component){
      String componentInput=component.getStringValue();
      int value=Integer.parseInt(componentInput);
      if ((value < 0) || (value > 100)) {
        Map vars=new HashMap();
        vars.put("input",componentInput);
        vars.put("lower","0");
        vars.put("upper","100");
        return errorMessage("error.outOfRange",vars,componentInput,component);
      }
      return ValidationErrorMessage.NO_MESSAGE;
    }
  }
);
  add(integerInRangeInput);
}
