{
  super(parent,name,new CompoundPropertyModel(new FormInputModel()));
  add(new LocaleDropDownChoice(this,"localeSelect"));
  add(new Link(this,"defaultLocaleLink"){
    public void onClick(){
      WebRequest request=(WebRequest)getRequest();
      setLocale(request.getLocale());
    }
  }
);
  RequiredTextField stringTextField=new RequiredTextField(this,"stringProperty");
  stringTextField.setLabel(new Model("String"));
  add(stringTextField);
  RequiredTextField integerTextField=new RequiredTextField(this,"integerProperty",Integer.class);
  add(integerTextField.add(NumberValidator.POSITIVE));
  add(new RequiredTextField(this,"doubleProperty",Double.class));
  WebMarkupContainer dateLabel=new WebMarkupContainer(this,"dateLabel");
  add(dateLabel);
  TextField datePropertyTextField=new TextField(this,"dateProperty",Date.class);
  add(datePropertyTextField);
  add(new DatePicker(this,"datePicker",dateLabel,datePropertyTextField));
  add(new RequiredTextField(this,"integerInRangeProperty",Integer.class).add(NumberValidator.range(0,100)));
  add(new CheckBox(this,"booleanProperty"));
  RadioChoice rc=new RadioChoice(this,"numberRadioChoice",NUMBERS).setSuffix("");
  rc.setLabel(new Model("number"));
  rc.setRequired(true);
  add(rc);
  RadioGroup group=new RadioGroup(this,"numbersGroup");
  add(group);
  ListView persons=new ListView(group,"numbers",NUMBERS){
    protected void populateItem(    ListItem item){
      item.add(new Radio(item,"radio",item.getModel()));
      item.add(new Label(item,"number",item.getModelObjectAsString()));
    }
  }
;
  group.add(persons);
  CheckGroup checks=new CheckGroup(this,"numbersCheckGroup");
  add(checks);
  ListView checksList=new ListView(checks,"numbers",NUMBERS){
    protected void populateItem(    ListItem item){
      item.add(new Check(item,"check",item.getModel()));
      item.add(new Label(item,"number",item.getModelObjectAsString()));
    }
  }
;
  checks.add(checksList);
  add(new ListMultipleChoice(this,"siteSelection",SITES));
  add(new TextField(this,"urlProperty",URL.class){
    public IConverter getConverter(){
      return new SimpleConverterAdapter(){
        public String toString(        Object value){
          return value != null ? value.toString() : null;
        }
        public Object toObject(        String value){
          try {
            return new URL(value.toString());
          }
 catch (          MalformedURLException e) {
            throw new ConversionException("'" + value + "' is not a valid URL");
          }
        }
      }
;
    }
  }
);
  add(new TextField(this,"phoneNumberUS",UsPhoneNumber.class){
    public IConverter getConverter(){
      return new MaskConverter("(###) ###-####",UsPhoneNumber.class);
    }
  }
);
  add(new LinesListView(this,"lines"));
  add(new ImageButton(this,"saveButton"));
  Link link=new Link(this,"resetButtonLink"){
    public void onClick(){
      InputForm.this.modelChanged();
    }
  }
;
  link.add(new Image(link,"resetButtonImage"));
  add(link);
}
