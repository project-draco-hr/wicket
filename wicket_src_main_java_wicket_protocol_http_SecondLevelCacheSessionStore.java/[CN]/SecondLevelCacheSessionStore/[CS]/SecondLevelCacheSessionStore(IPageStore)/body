{
  this.cachingStore=new IPageStore(){
    private Map sessionMap=new ConcurrentHashMap();
    public Page getPage(    String sessionId,    int id,    int versionNumber,    int ajaxVersionNumber){
      SoftReference sr=(SoftReference)sessionMap.get(sessionId);
      if (sr != null) {
        Map map=(Map)sr.get();
        if (map != null) {
          SoftReference sr2=(SoftReference)map.get(Integer.toString(id));
          if (sr2 != null) {
            Page page=(Page)sr2.get();
            if (page != null) {
              page=page.getVersion(versionNumber);
            }
            if (page != null && page.getAjaxVersionNumber() == ajaxVersionNumber) {
              return page;
            }
          }
        }
      }
      return pageStore.getPage(sessionId,id,versionNumber,ajaxVersionNumber);
    }
    public void removePage(    String sessionId,    Page page){
      SoftReference sr=(SoftReference)sessionMap.get(sessionId);
      if (sr != null) {
        Map map=(Map)sr.get();
        if (map != null) {
          map.remove(page.getId());
        }
      }
      pageStore.removePage(sessionId,page);
    }
    public void storePage(    String sessionId,    Page page){
      Map pageMap=null;
      SoftReference sr=(SoftReference)sessionMap.get(sessionId);
      if (sr == null || (pageMap=(Map)sr.get()) == null) {
        pageMap=new ConcurrentHashMap();
        sessionMap.put(sessionId,new SoftReference(pageMap));
      }
      pageMap.put(page.getId(),new SoftReference(page));
      pageStore.storePage(sessionId,page);
    }
    public void unbind(    String sessionId){
      sessionMap.remove(sessionId);
      pageStore.unbind(sessionId);
    }
    public void pageAccessed(    String sessionId,    Page page){
      pageStore.pageAccessed(sessionId,page);
    }
    public void destroy(){
      pageStore.destroy();
    }
  }
;
}
