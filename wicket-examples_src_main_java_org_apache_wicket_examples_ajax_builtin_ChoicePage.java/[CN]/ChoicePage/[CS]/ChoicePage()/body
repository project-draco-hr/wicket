{
  modelsMap.put("AUDI",Arrays.asList(new String[]{"A4","A6","TT"}));
  modelsMap.put("CADILLAC",Arrays.asList(new String[]{"CTS","DTS","ESCALADE","SRX","DEVILLE"}));
  modelsMap.put("FORD",Arrays.asList(new String[]{"CROWN","ESCAPE","EXPEDITION","EXPLORER","F-150"}));
  IModel<List<? extends String>> makeChoices=new AbstractReadOnlyModel<List<? extends String>>(){
    @Override public List<String> getObject(){
      Set<String> keys=modelsMap.keySet();
      List<String> list=new ArrayList<String>(keys);
      return list;
    }
  }
;
  IModel<List<? extends String>> modelChoices=new AbstractReadOnlyModel<List<? extends String>>(){
    @Override public List<String> getObject(){
      List<String> models=modelsMap.get(selectedMake);
      if (models == null) {
        models=Collections.emptyList();
      }
      return models;
    }
  }
;
  Form<?> form=new Form<Void>("form");
  add(form);
  final DropDownChoice<String> makes=new DropDownChoice<String>("makes",new PropertyModel<String>(this,"selectedMake"),makeChoices);
  final DropDownChoice<String> models=new DropDownChoice<String>("models",new Model<String>(),modelChoices);
  models.setOutputMarkupId(true);
  form.add(makes);
  form.add(models);
  makes.add(new AjaxFormComponentUpdatingBehavior("onchange"){
    @Override protected void onUpdate(    AjaxRequestTarget target){
      target.addComponent(models);
    }
  }
);
}
