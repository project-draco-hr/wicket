{
  modelsMap.put("AUDI",Arrays.asList("A4","A6","TT"));
  modelsMap.put("CADILLAC",Arrays.asList("CTS","DTS","ESCALADE","SRX","DEVILLE"));
  modelsMap.put("FORD",Arrays.asList("CROWN","ESCAPE","EXPEDITION","EXPLORER","F-150"));
  IModel<List<String>> makeChoices=new IModel<List<String>>(){
    @Override public List<String> getObject(){
      return new ArrayList<>(modelsMap.keySet());
    }
  }
;
  IModel<List<String>> modelChoices=new IModel<List<String>>(){
    @Override public List<String> getObject(){
      List<String> models=modelsMap.get(selectedMake);
      if (models == null) {
        models=Collections.emptyList();
      }
      return models;
    }
  }
;
  Form<?> form=new Form("form");
  add(form);
  final DropDownChoice<String> makes=new DropDownChoice<>("makes",new PropertyModel<String>(this,"selectedMake"),makeChoices);
  final DropDownChoice<String> models=new DropDownChoice<>("models",new Model<String>(),modelChoices);
  models.setOutputMarkupId(true);
  form.add(makes);
  form.add(models);
  final FeedbackPanel feedback=new FeedbackPanel("feedback");
  feedback.setOutputMarkupId(true);
  add(feedback);
  form.add(new AjaxButton("go"){
    @Override protected void onAfterSubmit(    AjaxRequestTarget target,    Form<?> form){
      super.onAfterSubmit(target,form);
      info("You have selected: " + makes.getModelObject() + " "+ models.getModelObject());
      target.add(feedback);
    }
  }
);
  makes.add(new AjaxFormComponentUpdatingBehavior("change"){
    @Override protected void onUpdate(    AjaxRequestTarget target){
      target.add(models);
    }
  }
);
}
