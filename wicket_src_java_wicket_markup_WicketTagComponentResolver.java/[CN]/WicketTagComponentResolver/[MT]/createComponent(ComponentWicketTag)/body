{
  String componentName=tag.getNameAttribute();
  if (componentName == null) {
    componentName="anonymous-" + autoIndex;
    autoIndex++;
  }
  final String classname=tag.getAttributes().getString("class");
  final Class componentClass=Session.get().getClassResolver().resolveClass(classname);
  final Component component;
  try {
    final Constructor constructor=componentClass.getConstructor(new Class[]{String.class});
    component=(Component)constructor.newInstance(new Object[]{componentName});
  }
 catch (  NoSuchMethodException e) {
    throw new WicketRuntimeException("Unable to create Component from wicket tag",e);
  }
catch (  InvocationTargetException e) {
    throw new WicketRuntimeException("Unable to create Component from wicket tag",e);
  }
catch (  IllegalAccessException e) {
    throw new WicketRuntimeException("Unable to create Component from wicket tag",e);
  }
catch (  InstantiationException e) {
    throw new WicketRuntimeException("Unable to create Component from wicket tag",e);
  }
catch (  ClassCastException e) {
    throw new WicketRuntimeException("Unable to create Component from wicket tag",e);
  }
  final Iterator iter=tag.getAttributes().entrySet().iterator();
  while (iter.hasNext()) {
    final Map.Entry entry=(Map.Entry)iter.next();
    final String key=(String)entry.getKey();
    final String value=(String)entry.getKey();
    if ("name".equalsIgnoreCase(key) || ("class".equalsIgnoreCase(key))) {
      continue;
    }
    final String methodName="set" + key;
    final Method[] methods=component.getClass().getMethods();
    Method method=null;
    for (int i=0; i < methods.length; i++) {
      if (methods[i].getName().equalsIgnoreCase(methodName)) {
        method=methods[i];
      }
    }
    if (method == null) {
      throw new WicketRuntimeException("Unable to initialize Component. Method with name " + methodName + " not found");
    }
    final Class[] parameterClasses=method.getParameterTypes();
    if (parameterClasses.length != 1) {
      throw new WicketRuntimeException("Unable to initialize Component. Method with name " + methodName + " must have one and only one parameter");
    }
    final Class paramClass=parameterClasses[0];
    try {
      if (paramClass.equals(String.class)) {
        method.invoke(component,new Object[]{value});
      }
 else       if (paramClass.equals(int.class)) {
        method.invoke(component,new Object[]{new Integer(tag.getAttributes().getInt(key))});
      }
 else       if (paramClass.equals(long.class)) {
        method.invoke(component,new Object[]{new Long(tag.getAttributes().getLong((key)))});
      }
    }
 catch (    IllegalAccessException ex) {
      throw new WicketRuntimeException("Unable to initialize Component. Failure while invoking method " + methodName,ex);
    }
catch (    InvocationTargetException ex) {
      throw new WicketRuntimeException("Unable to initialize Component. Failure while invoking method " + methodName,ex);
    }
catch (    StringValueConversionException ex) {
      throw new WicketRuntimeException("Unable to initialize Component. Failure while invoking method " + methodName,ex);
    }
  }
  return component;
}
