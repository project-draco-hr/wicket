{
  add(new Label("message","If you see this message wicket is properly configured and running"));
  Form<Void> form=new Form<Void>("form"){
  }
;
  add(form);
  form.add(new TextField<String>("textfield",new Model<String>()));
  form.add(new Button("submit"));
  final WebMarkupContainer listViewContainer=new WebMarkupContainer("listViewContainer");
  form.add(listViewContainer);
  listViewContainer.setOutputMarkupId(true);
  final ListView<Object> listView;
  listViewContainer.add(listView=new ListView<Object>("listView",new AbstractReadOnlyModel<List<Object>>(){
    @Override public List<Object> getObject(){
      List<Object> objects=new LinkedList<Object>();
      for (int i=0; i < rows; i++) {
        objects.add(new Object());
      }
      return objects;
    }
  }
){
    @Override protected void populateItem(    ListItem<Object> item){
      item.add(new Label("label",Long.toString(item.getIndex())));
    }
  }
);
  form.add(new AjaxFallbackButton("addButton",form){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      rows++;
      listView.removeAll();
      target.add(listViewContainer);
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form<?> form){
    }
  }
.setDefaultFormProcessing(false));
}
