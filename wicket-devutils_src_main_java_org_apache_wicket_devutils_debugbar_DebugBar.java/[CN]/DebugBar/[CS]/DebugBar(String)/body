{
  super(id);
  setMarkupId("wicketDebugBar");
  setOutputMarkupId(true);
  add(new AttributeModifier("class",true,new AbstractReadOnlyModel<String>(){
    private static final long serialVersionUID=1L;
    @Override public String getObject(){
      return "wicketDebugBar" + (DebugBar.this.hasErrorMessage() ? "Error" : "");
    }
  }
));
  add(CSSPackageResource.getHeaderContribution(DebugBar.class,"wicket-debugbar.css"));
  add(JavascriptPackageResource.getHeaderContribution(DebugBar.class,"wicket-debugbar.js"));
  add(new Image("logo",new ResourceReference(DebugBar.class,"wicket.png")));
  add(new Image("removeImg",new ResourceReference(DebugBar.class,"remove.png")));
  List<IDebugBarContributor> contributors=getContributors();
  add(new ListView<IDebugBarContributor>("contributors",contributors){
    private static final long serialVersionUID=1L;
    @Override protected void populateItem(    ListItem<IDebugBarContributor> item){
      IDebugBarContributor contrib=item.getModelObject();
      Component comp=contrib.createComponent("contrib",DebugBar.this);
      if (comp == null) {
        item.setVisibilityAllowed(false);
      }
 else {
        item.add(comp);
      }
    }
  }
);
}
