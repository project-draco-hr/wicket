{
  Object target=null;
  if (supportsField(field)) {
    Inject injectAnnotation=field.getAnnotation(Inject.class);
    javax.inject.Inject javaxInjectAnnotation=field.getAnnotation(javax.inject.Inject.class);
    if (!Modifier.isStatic(field.getModifiers()) && (injectAnnotation != null || javaxInjectAnnotation != null)) {
      try {
        boolean optional=injectAnnotation != null && injectAnnotation.optional();
        Annotation bindingAnnotation=findBindingAnnotation(field.getAnnotations());
        final GuiceProxyTargetLocator locator=new GuiceProxyTargetLocator(field,bindingAnnotation,optional);
        Object cachedValue=cache.get(locator);
        if (cachedValue != null) {
          return cachedValue == NULL_SENTINEL ? null : cachedValue;
        }
        target=locator.locateProxyTarget();
        if (target == null) {
        }
 else {
          if (wrapInProxies) {
            target=LazyInitProxyFactory.createProxy(field.getType(),locator);
          }
        }
        if (locator.isSingletonScope()) {
          Object tmpTarget=cache.putIfAbsent(locator,target == null ? NULL_SENTINEL : target);
          if (tmpTarget != null) {
            target=tmpTarget;
          }
        }
        if (!field.isAccessible()) {
          field.setAccessible(true);
        }
      }
 catch (      MoreThanOneBindingException e) {
        throw new RuntimeException("Can't have more than one BindingAnnotation on field " + field.getName() + " of class "+ fieldOwner.getClass().getName());
      }
    }
  }
  return target == NULL_SENTINEL ? null : target;
}
