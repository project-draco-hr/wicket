{
  final IPageMap pageMap=component.getPage().getPageMap();
  final String pageMapName=pageMap.isDefault() ? "" : pageMap.getName();
  if (component instanceof BookmarkablePageLink) {
    final Class clazz=((BookmarkablePageLink)component).getPageClass();
    parameters.put(WebRequestCodingStrategy.BOOKMARKABLE_PAGE_PARAMETER_NAME,pageMapName + ':' + clazz.getName());
  }
 else {
    int version=component.getPage().getCurrentVersionNumber();
    Class clazz=null;
    if (component instanceof IRedirectListener) {
      clazz=IRedirectListener.class;
    }
 else     if (component instanceof IResourceListener) {
      clazz=IResourceListener.class;
    }
 else     if (component instanceof IFormSubmitListener) {
      clazz=IFormSubmitListener.class;
    }
 else     if (component instanceof ILinkListener) {
      clazz=ILinkListener.class;
    }
 else     if (component instanceof IOnChangeListener) {
      clazz=IOnChangeListener.class;
    }
 else {
      throw new IllegalArgumentException("The component class doesn't seem to implement any of the known *Listener interfaces: " + component.getClass());
    }
    parameters.put(WebRequestCodingStrategy.INTERFACE_PARAMETER_NAME,pageMapName + ':' + component.getPath()+ ':'+ (version == 0 ? "" : "" + version)+ ':'+ Classes.simpleName(clazz)+ "::");
    if (component.isStateless() && component.getPage().isBookmarkable()) {
      parameters.put(WebRequestCodingStrategy.BOOKMARKABLE_PAGE_PARAMETER_NAME,pageMapName + ':' + component.getPage().getClass().getName());
    }
  }
}
