{
  new Image(this,"bug");
  if (sessionData == null) {
    new Label(this,"id").setVisible(false);
    new Label(this,"sessionInfo").setVisible(false);
    new Label(this,"startDate").setVisible(false);
    new Label(this,"lastRequestTime").setVisible(false);
    new Label(this,"numberOfRequests").setVisible(false);
    new Label(this,"totalTimeTaken").setVisible(false);
    new Label(this,"size").setVisible(false);
    new WebMarkupContainer(this,"sessionid");
  }
 else {
    new Label(this,"id",new Model<String>(sessionData.getSessionId()));
    new Label(this,"sessionInfo",new Model<Object>(sessionData.getSessionInfo()));
    new Label(this,"startDate",new Model<String>(sdf.format(sessionData.getStartDate())));
    new Label(this,"lastRequestTime",new Model<String>(sdf.format(sessionData.getLastActive())));
    new Label(this,"numberOfRequests",new Model<Long>(sessionData.getNumberOfRequests()));
    new Label(this,"totalTimeTaken",new Model<Long>(sessionData.getTotalTimeTaken()));
    new Label(this,"size",new Model<Bytes>(Bytes.bytes(sessionData.getSessionSize())));
    new WebMarkupContainer(this,"sessionid").setVisible(false);
  }
  IModel<List<RequestData>> requestsModel=new Model<List<RequestData>>(){
    private static final long serialVersionUID=1L;
    @Override public List<RequestData> getObject(){
      List<RequestData> requests=getRequestLogger().getRequests();
      if (sessionData != null) {
        List<RequestData> returnValues=new ArrayList<RequestData>();
        for (        RequestData data : requests) {
          if (sessionData.getSessionId().equals(data.getSessionId())) {
            returnValues.add(data);
          }
        }
        return returnValues;
      }
      return requests;
    }
  }
;
  PageableListView<RequestData> listView=new PageableListView<RequestData>(this,"requests",requestsModel,50){
    private static final long serialVersionUID=1L;
    @Override protected void populateItem(    ListItem item){
      RequestData rd=(RequestData)item.getModelObject();
      new Label(item,"id",new Model<String>(rd.getSessionId())).setVisible(sessionData == null);
      new Label(item,"startDate",new Model<String>(sdf.format(rd.getStartDate())));
      new Label(item,"timeTaken",new Model<Long>(rd.getTimeTaken()));
      new Label(item,"eventTarget",new Model<String>(rd.getEventTarget()));
      new Label(item,"responseTarget",new Model<String>(rd.getResponseTarget()));
      new Label(item,"alteredObjects",new Model<String>(rd.getAlteredObjects())).setEscapeModelStrings(false);
      new Label(item,"sessionSize",new Model<Bytes>(Bytes.bytes(rd.getSessionSize())));
    }
  }
;
  new PagingNavigator(this,"navigator",listView);
}
