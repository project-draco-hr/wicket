{
  MockWebApplication mockApp=new MockWebApplication(new WebApplication(){
    @Override protected void outputDevelopmentModeWarning(){
    }
    @Override public Class<? extends Page> getHomePage(){
      return null;
    }
    @Override protected ISessionStore newSessionStore(){
      return new HttpSessionStore(this);
    }
  }
,null);
  Application app=mockApp.getApplication();
  try {
    Application.set(app);
    GuiceComponentInjector injector=new GuiceComponentInjector(app,new Module(){
      public void configure(      Binder binder){
        binder.bind(ITestService.class).to(TestService.class);
        binder.bind(ITestService.class).annotatedWith(Red.class).to(TestServiceRed.class);
        binder.bind(ITestService.class).annotatedWith(Blue.class).to(TestServiceBlue.class);
        binder.bind(new TypeLiteral<Map<String,String>>(){
        }
).toProvider(new Provider<Map<String,String>>(){
          public Map<String,String> get(){
            Map<String,String> strings=new HashMap<String,String>();
            strings.put(ITestService.RESULT,ITestService.RESULT);
            return strings;
          }
        }
);
      }
    }
);
    app.addComponentInstantiationListener(injector);
    TestComponent testComponent=new TestComponent("id");
    doChecksForComponent(testComponent);
    TestComponent clonedComponent=(TestComponent)Objects.cloneObject(testComponent);
    doChecksForComponent(clonedComponent);
  }
  finally {
    Application.unset();
  }
}
