{
  final String parametersFragment=requestParameters.getPath().substring(getMountPath().length());
  final PageParameters parameters=new PageParameters(decodeParameters(parametersFragment,requestParameters.getParameters()));
  String pageMapName=(String)parameters.remove(AbstractWebRequestCodingStrategy.PAGEMAP);
  if (requestParameters.getPageMapName() == null) {
    requestParameters.setPageMapName(pageMapName);
  }
 else {
    pageMapName=requestParameters.getPageMapName();
  }
  final BookmarkablePageRequestTarget target;
  final String bookmarkableInterfaceListener=(String)parameters.remove(AbstractWebRequestCodingStrategy.INTERFACE_PARAMETER_NAME);
  if (bookmarkableInterfaceListener != null) {
    final String[] pathComponents=Strings.split(bookmarkableInterfaceListener,Component.PATH_SEPARATOR);
    if (pathComponents.length < 4) {
      throw new WicketRuntimeException("Internal error parsing " + AbstractWebRequestCodingStrategy.INTERFACE_PARAMETER_NAME + " = "+ bookmarkableInterfaceListener);
    }
    final String interfaceName=pathComponents[pathComponents.length - 1];
    int start=(pageMapName != null) ? pageMapName.length() + 1 : 1;
    final String componentPath=bookmarkableInterfaceListener.substring(start,bookmarkableInterfaceListener.length() - interfaceName.length() - 2);
    target=new BookmarkableListenerInterfaceRequestTarget(pageMapName,bookmarkablePageClass,parameters,componentPath,interfaceName);
  }
 else {
    target=new BookmarkablePageRequestTarget(pageMapName,bookmarkablePageClass,parameters);
  }
  return target;
}
