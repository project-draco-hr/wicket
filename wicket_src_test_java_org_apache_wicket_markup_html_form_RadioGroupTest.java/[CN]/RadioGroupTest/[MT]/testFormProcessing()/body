{
  final String radio1="radio1-selection";
  MockModelObject modelObject=new MockModelObject();
  Model model=new Model();
  RequestCycle cycle=tester.createRequestCycle();
  MockPage page=new MockPage();
  final Form form=new Form("form",new CompoundPropertyModel(modelObject)){
    private static final long serialVersionUID=1L;
    public String getMarkupId(){
      return "foo";
    }
  }
;
  final RadioGroup group=new RadioGroup("prop1");
  final WebMarkupContainer container=new WebMarkupContainer("container");
  final Radio choice1=new Radio("radio1",new Model(radio1));
  final Radio choice2=new Radio("prop2");
  final RadioGroup group2=new RadioGroup("group2",model);
  final Radio choice3=new Radio("radio3",new Model(radio1));
  page.add(form);
  form.add(group);
  group.add(container);
  container.add(choice1);
  group.add(choice2);
  form.add(group2);
  group2.add(choice3);
  modelObject.setProp1(radio1);
  form.onFormSubmitted();
  assertTrue("group: running with nothing selected - model must be set to null",modelObject.getProp1() == null);
  assertTrue("group2: running with nothing selected - model must be set to null",model.getObject() == null);
  tester.getServletRequest().setParameter(group.getInputName(),choice1.getValue());
  tester.getServletRequest().setParameter(group2.getInputName(),choice3.getValue());
  form.onFormSubmitted();
  assertEquals("group: running with choice1 selected - model must be set to value of radio1",modelObject.getProp1(),choice1.getDefaultModelObject());
  assertEquals("group2: running with choice3 selected - model must be set to value of radio1",model.getObject(),choice3.getDefaultModelObject());
  tester.getServletRequest().setParameter(group.getInputName(),choice2.getValue());
  form.onFormSubmitted();
  assertEquals("group: running with choice2 selected - model must be set to value of radio2",modelObject.getProp1(),choice2.getDefaultModelObject());
  tester.getServletRequest().setParameter(group2.getInputName(),choice1.getValue());
  try {
    form.onFormSubmitted();
    fail("group2: ran with an invalid choice selected but did not fail");
  }
 catch (  WicketRuntimeException e) {
  }
}
