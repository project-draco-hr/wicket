{
  HtmlDocumentParser parser=new HtmlDocumentParser(document);
  Iterator expectedElements=elements.iterator();
  ArrayListStack iteratorStack=new ArrayListStack();
  ArrayListStack tagNameStack=new ArrayListStack();
  boolean end=false;
  boolean valid=true;
  while (!end) {
    int token=parser.getNextToken();
switch (token) {
case HtmlDocumentParser.UNKNOWN:
      return false;
case HtmlDocumentParser.END:
    end=true;
  break;
case HtmlDocumentParser.COMMENT:
valid=validateComment(expectedElements,parser);
if (!valid) end=true;
break;
case HtmlDocumentParser.OPEN_TAG:
valid=validateTag(expectedElements,parser);
if (!valid) end=true;
 else expectedElements=saveOpenTagState(iteratorStack,expectedElements,tagNameStack);
break;
case HtmlDocumentParser.OPENCLOSE_TAG:
valid=validateTag(expectedElements,parser);
if (valid) valid=checkOpenCloseTag();
if (!valid) end=true;
break;
case HtmlDocumentParser.CLOSE_TAG:
expectedElements=validateCloseTag(tagNameStack,parser,expectedElements,iteratorStack);
if (expectedElements == null) {
valid=false;
end=true;
}
break;
case HtmlDocumentParser.TEXT:
valid=validateText(expectedElements,parser);
if (!valid) end=true;
break;
}
}
return valid;
}
