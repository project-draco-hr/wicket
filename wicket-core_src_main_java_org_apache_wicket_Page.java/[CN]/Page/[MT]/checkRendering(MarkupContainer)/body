{
  final IDebugSettings debugSettings=getApplication().getDebugSettings();
  if (debugSettings.getComponentUseCheck()) {
    final List<Component> unrenderedComponents=new ArrayList<Component>();
    final StringBuilder buffer=new StringBuilder();
    renderedContainer.visitChildren(new IVisitor<Component,Void>(){
      public void component(      final Component component,      final IVisit<Void> visit){
        if (renderedComponents == null || !renderedComponents.contains(component)) {
          if (!component.isAuto() && component.isVisibleInHierarchy()) {
            unrenderedComponents.add(component);
            buffer.append(Integer.toString(unrenderedComponents.size())).append(". ").append(component).append("\n");
            String metadata=component.getMetaData(Component.CONSTRUCTED_AT_KEY);
            if (metadata != null) {
              buffer.append(metadata);
            }
            metadata=component.getMetaData(Component.ADDED_AT_KEY);
            if (metadata != null) {
              buffer.append(metadata);
            }
          }
 else {
            visit.dontGoDeeper();
          }
        }
      }
    }
);
    if (unrenderedComponents.size() > 0) {
      renderedComponents=null;
      List<Component> transparentContainerChildren=Generics.newArrayList();
      Iterator<Component> iterator=unrenderedComponents.iterator();
      outerWhile:       while (iterator.hasNext()) {
        Component component=iterator.next();
        for (        Component transparentContainerChild : transparentContainerChildren) {
          MarkupContainer parent=component.getParent();
          while (parent != null) {
            if (parent == transparentContainerChild) {
              iterator.remove();
              continue outerWhile;
            }
            parent=parent.getParent();
          }
        }
        if (hasInvisibleTransparentChild(component.getParent(),component)) {
          if (log.isDebugEnabled()) {
            log.debug("Component {} wasn't rendered but might have a transparent parent.",component);
          }
          transparentContainerChildren.add(component);
          iterator.remove();
          continue outerWhile;
        }
      }
      if (unrenderedComponents.size() > 0) {
        throw new WicketRuntimeException("The component(s) below failed to render. A common problem is that you have added a component in code but forgot to reference it in the markup (thus the component will never be rendered).\n\n" + buffer.toString());
      }
    }
  }
  renderedComponents=null;
}
