{
  TextField<T> editor=new TextField<T>(componentId,model){
    private static final long serialVersionUID=1L;
    @Override public <C>IConverter<C> getConverter(    final Class<C> type){
      IConverter<C> c=AjaxEditableLabel.this.getConverter(type);
      return c != null ? c : super.getConverter(type);
    }
    @Override protected void onModelChanged(){
      super.onModelChanged();
      AjaxEditableLabel.this.onModelChanged();
    }
    @Override protected void onModelChanging(){
      super.onModelChanging();
      AjaxEditableLabel.this.onModelChanging();
    }
  }
;
  editor.setOutputMarkupId(true);
  editor.setVisible(false);
  editor.add(new EditorAjaxBehavior(){
    @Override protected void updateAjaxAttributes(    AjaxRequestAttributes attributes){
      super.updateAjaxAttributes(attributes);
      attributes.setEventNames("blur","keyup","keydown");
      attributes.setPreventDefault(false);
      CharSequence precondition="var kc=Wicket.Event.keyCode(attrs.event)," + "evtType=attrs.event.type," + "ret=false;"+ "if (evtType==='blur' || (evtType==='keyup' && kc===27) || (evtType==='keydown' && kc===13)) {attrs.event.preventDefault(); ret = true;}"+ "return ret;";
      AjaxCallListener ajaxCallListener=new AjaxCallListener();
      ajaxCallListener.onPrecondition(precondition);
      CharSequence dynamicExtraParameters="var result = []," + "evtType=attrs.event.type;" + "if (evtType === 'keyup') { result.push( { name: 'save', value: false } ); }"+ "else { result = Wicket.Form.serializeElement(attrs.c); result.push( { name: 'save', value: true } ); }"+ "return result;";
      attributes.getDynamicExtraParameters().add(dynamicExtraParameters);
      attributes.getAjaxCallListeners().add(ajaxCallListener);
    }
  }
);
  return editor;
}
