{
  if (requestHandler instanceof ResourceReferenceRequestHandler) {
    ResourceReferenceRequestHandler referenceRequestHandler=(ResourceReferenceRequestHandler)requestHandler;
    ResourceReference reference=referenceRequestHandler.getResourceReference();
    Url url;
    while (reference instanceof ResourceBundleReference) {
      reference=((ResourceBundleReference)reference).getBundleReference();
    }
    if (reference instanceof MetaInfStaticResourceReference) {
      url=((MetaInfStaticResourceReference)reference).mapHandler(referenceRequestHandler);
      if (url != null) {
        return url;
      }
    }
    if (reference.canBeRegistered()) {
      ResourceReferenceRegistry resourceReferenceRegistry=getContext().getResourceReferenceRegistry();
      resourceReferenceRegistry.registerResourceReference(reference);
    }
    url=new Url();
    List<String> segments=url.getSegments();
    segments.add(getContext().getNamespace());
    segments.add(getContext().getResourceIdentifier());
    segments.add(getClassName(reference.getScope()));
    PageParameters parameters=referenceRequestHandler.getPageParameters();
    if (parameters == null) {
      parameters=new PageParameters();
    }
 else {
      parameters=new PageParameters(parameters);
      parameters.clearIndexed();
    }
    encodeResourceReferenceAttributes(url,reference);
    StringTokenizer tokens=new StringTokenizer(reference.getName(),"/");
    while (tokens.hasMoreTokens()) {
      String token=tokens.nextToken();
      if (tokens.hasMoreTokens() == false && Strings.isEmpty(token) == false) {
        final IResource resource=reference.getResource();
        if (resource instanceof IStaticCacheableResource) {
          final IStaticCacheableResource cacheable=(IStaticCacheableResource)resource;
          if (cacheable.isCachingEnabled()) {
            final ResourceUrl resourceUrl=new ResourceUrl(token,parameters);
            getCachingStrategy().decorateUrl(resourceUrl,cacheable);
            token=resourceUrl.getFileName();
            Checks.notEmpty(token,"Caching strategy returned empty name for '%s'",resource);
          }
        }
      }
      segments.add(token);
    }
    if (parameters.isEmpty() == false) {
      url=encodePageParameters(url,parameters,pageParametersEncoder);
    }
    return url;
  }
  return null;
}
