{
  add(new NonCachingImage("bug"));
  if (sessionData == null) {
    add(new Label("id").setVisible(false));
    add(new Label("sessionInfo").setVisible(false));
    add(new Label("startDate").setVisible(false));
    add(new Label("lastRequestTime").setVisible(false));
    add(new Label("numberOfRequests").setVisible(false));
    add(new Label("totalTimeTaken").setVisible(false));
    add(new Label("size").setVisible(false));
    add(new WebMarkupContainer("sessionid"));
  }
 else {
    add(new Label("id",new Model<String>(sessionData.getSessionId())));
    add(new Label("sessionInfo",new Model<Serializable>((Serializable)sessionData.getSessionInfo())));
    add(new Label("startDate",new Model<String>(sdf.format(sessionData.getStartDate()))));
    add(new Label("lastRequestTime",new Model<String>(sdf.format(sessionData.getLastActive()))));
    add(new Label("numberOfRequests",new Model<Long>(sessionData.getNumberOfRequests())));
    add(new Label("totalTimeTaken",new Model<Long>(sessionData.getTotalTimeTaken())));
    add(new Label("size",new Model<Bytes>(Bytes.bytes(sessionData.getSessionSize()))));
    add(new WebMarkupContainer("sessionid").setVisible(false));
  }
  IModel<List<RequestData>> requestsModel=new AbstractReadOnlyModel<List<RequestData>>(){
    private static final long serialVersionUID=1L;
    @Override public ArrayList<RequestData> getObject(){
      List<RequestData> requests=getRequestLogger().getRequests();
      if (sessionData != null) {
        ArrayList<RequestData> returnValues=new ArrayList<RequestData>();
        for (        RequestData data : requests) {
          if (sessionData.getSessionId().equals(data.getSessionId())) {
            returnValues.add(data);
          }
        }
        return returnValues;
      }
      return new ArrayList<RequestData>(requests);
    }
  }
;
  PageableListView<RequestData> listView=new PageableListView<RequestData>("requests",requestsModel,50){
    private static final long serialVersionUID=1L;
    @Override protected void populateItem(    ListItem<RequestData> item){
      RequestData rd=item.getModelObject();
      item.add(new Label("id",new Model<String>(rd.getSessionId())).setVisible(sessionData == null));
      item.add(new Label("startDate",new Model<String>(sdf.format(rd.getStartDate()))));
      item.add(new Label("timeTaken",new Model<Long>(rd.getTimeTaken())));
      item.add(new Label("eventTarget",new Model<String>(rd.getEventTarget())));
      item.add(new Label("responseTarget",new Model<String>(rd.getResponseTarget())));
      item.add(new Label("alteredObjects",new Model<String>(rd.getAlteredObjects()))).setEscapeModelStrings(false);
      item.add(new Label("sessionSize",new Model<Bytes>(Bytes.bytes(rd.getSessionSize().longValue()))));
    }
  }
;
  add(listView);
  PagingNavigator navigator=new PagingNavigator("navigator",listView);
  add(navigator);
}
