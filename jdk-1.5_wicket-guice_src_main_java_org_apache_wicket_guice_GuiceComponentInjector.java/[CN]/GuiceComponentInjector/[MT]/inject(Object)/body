{
  Class<?> current=object.getClass();
  do {
    Field[] currentFields=current.getDeclaredFields();
    for (    final Field field : currentFields) {
      if (field.getAnnotation(Inject.class) != null) {
        try {
          Annotation bindingAnnotation=findBindingAnnotation(field.getAnnotations());
          Object proxy=LazyInitProxyFactory.createProxy(field.getType(),new GuiceProxyTargetLocator(field.getType(),bindingAnnotation));
          if (!field.isAccessible()) {
            field.setAccessible(true);
          }
          field.set(object,proxy);
        }
 catch (        IllegalAccessException e) {
          throw new WicketRuntimeException("Error Guice-injecting field " + field.getName() + " in "+ object,e);
        }
catch (        MoreThanOneBindingException e) {
          throw new RuntimeException("Can't have more than one BindingAnnotation on field " + field.getName() + " of class "+ object.getClass().getName());
        }
      }
    }
    Method[] currentMethods=current.getDeclaredMethods();
    for (    final Method method : currentMethods) {
      if (method.getAnnotation(Inject.class) != null) {
        Annotation[][] paramAnnotations=method.getParameterAnnotations();
        Class<?>[] paramTypes=method.getParameterTypes();
        Object[] args=new Object[paramTypes.length];
        for (int i=0; i < paramTypes.length; i++) {
          try {
            Annotation bindingAnnotation=findBindingAnnotation(paramAnnotations[i]);
            args[i]=LazyInitProxyFactory.createProxy(paramTypes[i],new GuiceProxyTargetLocator(paramTypes[i],bindingAnnotation));
          }
 catch (          MoreThanOneBindingException e) {
            throw new RuntimeException("Can't have more than one BindingAnnotation on parameter " + i + "("+ paramTypes[i].getSimpleName()+ ") of method "+ method.getName()+ " of class "+ object.getClass().getName());
          }
        }
        try {
          method.invoke(object,args);
        }
 catch (        IllegalAccessException e) {
          throw new WicketRuntimeException(e);
        }
catch (        InvocationTargetException e) {
          throw new WicketRuntimeException(e);
        }
      }
    }
    current=current.getSuperclass();
  }
 while (current != Object.class);
}
