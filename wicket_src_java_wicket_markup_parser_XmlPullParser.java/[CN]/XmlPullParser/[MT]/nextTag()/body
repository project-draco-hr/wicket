{
  if (this.skipUntilText != null) {
    skipUntil();
  }
  int openBracketIndex=input.indexOf('<',this.inputPosition);
  if (openBracketIndex != -1) {
    countLinesTo(input,openBracketIndex);
    int closeBracketIndex=input.indexOf('>',openBracketIndex);
    if (closeBracketIndex == -1) {
      throw new ParseException("No matching close bracket at position " + openBracketIndex,this.inputPosition);
    }
    String tagText=input.substring(openBracketIndex + 1,closeBracketIndex);
    if (tagText.startsWith("!--")) {
      this.inputPosition=input.indexOf("-->",openBracketIndex + 4) + 3;
      if (this.inputPosition == -1) {
        throw new ParseException("Unclosed comment beginning at " + openBracketIndex,openBracketIndex);
      }
      return nextTag();
    }
    final String startText=(tagText.length() <= 8 ? tagText : tagText.substring(0,8));
    if (startText.toUpperCase().equals("![CDATA[")) {
      closeBracketIndex=findCloseBracket(input,'>',openBracketIndex);
      if (closeBracketIndex == -1) {
        throw new ParseException("No matching close bracket at position " + openBracketIndex,this.inputPosition);
      }
      tagText=input.substring(openBracketIndex + 1,closeBracketIndex);
    }
{
      XmlTag.Type type=XmlTag.OPEN;
      if (tagText.endsWith("/")) {
        type=XmlTag.OPEN_CLOSE;
        tagText=tagText.substring(0,tagText.length() - 1);
      }
 else       if (tagText.startsWith("/")) {
        type=XmlTag.CLOSE;
        tagText=tagText.substring(1);
      }
      if (tagText.startsWith("!") || tagText.startsWith("?")) {
        this.inputPosition=closeBracketIndex + 1;
        return nextTag();
      }
 else {
        String lowerCase=tagText.toLowerCase();
        if ((type == XmlTag.OPEN) && lowerCase.startsWith("s")) {
          if (lowerCase.startsWith("script")) {
            this.skipUntilText="script";
          }
 else           if (lowerCase.startsWith("style")) {
            this.skipUntilText="style";
          }
        }
        final XmlTag tag=parseTagText(tagText);
        if (tag != null) {
          tag.type=type;
          tag.pos=openBracketIndex;
          tag.length=(closeBracketIndex + 1) - openBracketIndex;
          tag.text=input.substring(openBracketIndex,closeBracketIndex + 1);
          tag.lineNumber=lineNumber;
          tag.columnNumber=columnNumber;
          this.inputPosition=closeBracketIndex + 1;
          return tag;
        }
 else {
          throw new ParseException("Malformed tag (line " + lineNumber + ", column "+ columnNumber+ ")",openBracketIndex);
        }
      }
    }
  }
  return null;
}
