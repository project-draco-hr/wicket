{
  if (this.skipUntilText != null) {
    skipUntil();
  }
  final int openBracketIndex=this.input.find('<');
  if (openBracketIndex == -1) {
    return null;
  }
  this.input.countLinesTo(openBracketIndex);
  int closeBracketIndex=this.input.find('>',openBracketIndex + 1);
  if (closeBracketIndex == -1) {
    throw new ParseException("No matching close bracket at position " + openBracketIndex,this.input.getPosition());
  }
  String tagText=this.input.getSubstring(openBracketIndex + 1,closeBracketIndex).toString();
  if (tagText.startsWith("!--")) {
    final int pos=this.input.find("-->",openBracketIndex + 1);
    if (pos == -1) {
      throw new ParseException("Unclosed comment beginning at line:" + input.getLineNumber() + " column:"+ input.getColumnNumber(),openBracketIndex);
    }
    this.input.setPosition(pos + 3);
    return nextTag();
  }
  final String startText=(tagText.length() <= 8 ? tagText : tagText.substring(0,8));
  if (startText.toUpperCase().equals("![CDATA[")) {
    int pos1=openBracketIndex;
    do {
      closeBracketIndex=findChar('>',pos1);
      if (closeBracketIndex == -1) {
        throw new ParseException("No matching close bracket at position " + openBracketIndex,this.input.getPosition());
      }
      tagText=this.input.getSubstring(openBracketIndex + 1,closeBracketIndex).toString();
      pos1=closeBracketIndex + 1;
    }
 while (tagText.endsWith("]]") == false);
    this.input.setPosition(closeBracketIndex + 1);
    return nextTag();
  }
{
    XmlTag.Type type=XmlTag.Type.OPEN;
    if (tagText.endsWith("/")) {
      type=XmlTag.Type.OPEN_CLOSE;
      tagText=tagText.substring(0,tagText.length() - 1);
    }
 else     if (tagText.startsWith("/")) {
      type=XmlTag.Type.CLOSE;
      tagText=tagText.substring(1);
    }
    if (tagText.startsWith("!") || tagText.startsWith("?")) {
      this.input.setPosition(closeBracketIndex + 1);
      return nextTag();
    }
 else {
      final String lowerCase=tagText.toLowerCase();
      if ((type == XmlTag.Type.OPEN) && lowerCase.startsWith("s")) {
        if (lowerCase.startsWith("script")) {
          this.skipUntilText="script";
        }
 else         if (lowerCase.startsWith("style")) {
          this.skipUntilText="style";
        }
      }
      final XmlTag tag=parseTagText(tagText);
      if (tag != null) {
        tag.type=type;
        tag.pos=openBracketIndex;
        tag.length=(closeBracketIndex + 1) - openBracketIndex;
        tag.text=this.input.getSubstring(openBracketIndex,closeBracketIndex + 1).toString();
        tag.lineNumber=this.input.getLineNumber();
        tag.columnNumber=this.input.getColumnNumber();
        this.input.setPosition(closeBracketIndex + 1);
        return tag;
      }
 else {
        throw new ParseException("Malformed tag (line " + this.input.getLineNumber() + ", column "+ this.input.getColumnNumber()+ ")",openBracketIndex);
      }
    }
  }
}
