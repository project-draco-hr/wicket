{
  application=spy(new MockApplication());
  WicketFilter filter=new WicketFilter();
  filter.init(new FilterTestingConfig());
  HttpServletRequest request=mock(HttpServletRequest.class);
  when(request.getRequestURI()).thenReturn("/contextPath/js/bla.js").thenReturn("/contextPath/css/bla.css").thenReturn("/contextPath/images/bla.img").thenReturn("/contextPath/something/real");
  when(request.getContextPath()).thenReturn("/contextPath");
  HttpServletResponse response=mock(HttpServletResponse.class);
  FilterChain chain=mock(FilterChain.class);
  for (int i=0; i < 3; i++) {
    boolean isProcessed=filter.processRequest(request,response,chain);
    assertFalse(isProcessed);
    verify(application,Mockito.never()).newWebRequest(Matchers.eq(request),Matchers.anyString());
    verify(application,Mockito.never()).newWebResponse(Matchers.any(WebRequest.class),Matchers.eq(response));
    verify(chain,Mockito.times(i + 1)).doFilter(request,response);
  }
  boolean isProcessed=filter.processRequest(request,response,chain);
  assertTrue(isProcessed);
  verify(application).newWebRequest(Matchers.eq(request),Matchers.anyString());
  verify(application).newWebResponse(Matchers.any(WebRequest.class),Matchers.eq(response));
  verify(chain,Mockito.times(3)).doFilter(request,response);
}
