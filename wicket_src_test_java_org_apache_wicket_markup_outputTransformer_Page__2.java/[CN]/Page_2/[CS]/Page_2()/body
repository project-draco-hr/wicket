{
  add(new Label<String>("myLabel","Test Label"));
  MarkupContainer<?> container=new NoopOutputTransformerContainer<Void>("test");
  add(container);
  container.add(new Label<String>("myLabel2","Test Label2"));
  MarkupContainer<?> panelContainer=new AbstractOutputTransformerContainer<Void>("test2"){
    private static final long serialVersionUID=1L;
    @Override public CharSequence transform(    Component<?> component,    CharSequence output){
      return "Whatever";
    }
  }
;
  add(panelContainer);
  Panel<?> panel=new Panel_1("myPanel");
  panel.setRenderBodyOnly(true);
  panelContainer.add(panel);
  MarkupContainer<?> borderContainer=new AbstractOutputTransformerContainer<Void>("test3"){
    private static final long serialVersionUID=1L;
    @Override public CharSequence transform(    Component<?> component,    CharSequence output){
      return output.toString().toUpperCase();
    }
  }
;
  add(borderContainer);
  Border<?> border=new SimpleBorder("myBorder");
  borderContainer.add(border);
  Border<?> border2=new SimpleBorder("myBorder2");
  border2.setRenderBodyOnly(false);
  border2.add(new AttributeModifier("testAttr",true,new Model<String>("myValue")));
  add(border2);
  border2.add(new XsltTransformerBehavior());
}
