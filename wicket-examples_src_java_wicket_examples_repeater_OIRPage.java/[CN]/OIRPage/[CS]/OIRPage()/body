{
  SortableContactDataProvider dp=new SortableContactDataProvider();
  final DataView dataView=new DataView(this,"oir",dp){
    @Override protected void populateItem(    final Item item){
      Contact contact=(Contact)item.getModelObject();
      new ActionPanel(item,"actions",item.getModel());
      new Link(item,"toggleHighlite"){
        @Override public void onClick(){
          HighlitableDataItem hitem=(HighlitableDataItem)item;
          hitem.toggleHighlite();
        }
      }
;
      new Label(item,"contactid",String.valueOf(contact.getId()));
      new Label(item,"firstname",contact.getFirstName());
      new Label(item,"lastname",contact.getLastName());
      new Label(item,"homephone",contact.getHomePhone());
      new Label(item,"cellphone",contact.getCellPhone());
      item.add(new AttributeModifier("class",true,new AbstractReadOnlyModel(){
        @Override public Object getObject(        Component component){
          return (item.getIndex() % 2 == 1) ? "even" : "odd";
        }
      }
));
    }
    protected Item newItem(    MarkupContainer parent,    final String id,    int index,    IModel model){
      return new HighlitableDataItem(parent,id,index,model);
    }
  }
;
  dataView.setItemsPerPage(8);
  dataView.setItemReuseStrategy(ReuseIfModelsEqualStrategy.getInstance());
  new OrderByBorder(this,"orderByFirstName","firstName",dp){
    @Override protected void onSortChanged(){
      dataView.setCurrentPage(0);
    }
  }
;
  new OrderByBorder(this,"orderByLastName","lastName",dp){
    @Override protected void onSortChanged(){
      dataView.setCurrentPage(0);
    }
  }
;
  new PagingNavigator(this,"navigator",dataView);
}
