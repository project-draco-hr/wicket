{
  activeThreads=0;
  HttpConnectionManagerParams connManagerParams=new HttpConnectionManagerParams();
  connManagerParams.setDefaultMaxConnectionsPerHost(numberOfThreads * 2);
  MultiThreadedHttpConnectionManager manager=new MultiThreadedHttpConnectionManager();
  manager.setParams(connManagerParams);
  Server server=null;
  GetMethod getMethod=new GetMethod("http://localhost:" + port + "/");
  try {
    getMethod.setFollowRedirects(true);
    HttpClient httpClient=new HttpClient(params,manager);
    int code=httpClient.executeMethod(getMethod);
    if (code != 200) {
      server=startServer(port);
    }
  }
 catch (  Exception e) {
    server=startServer(port);
  }
 finally {
    getMethod.releaseConnection();
  }
  try {
    ThreadGroup g=new ThreadGroup("runners");
    Thread[] threads=new Thread[numberOfThreads];
    HttpClient client=null;
    for (int i=0; i < numberOfThreads; i++) {
      if (multipleSessions) {
        client=new HttpClient(params,manager);
        client.getHostConfiguration().setHost(host,port);
      }
 else {
        if (client == null) {
          client=new HttpClient(params,manager);
          client.getHostConfiguration().setHost(host,port);
        }
      }
      threads[i]=new Thread(g,new CommandRunner(commands,client,this));
    }
    long start=System.currentTimeMillis();
    for (int i=0; i < numberOfThreads; i++) {
      activeThreads++;
      threads[i].start();
    }
    while (activeThreads > 0) {
synchronized (this) {
        wait();
      }
    }
    long end=System.currentTimeMillis();
    long time=end - start;
    log.info("\n******** finished in " + Duration.milliseconds(time) + " ("+ time+ " milis)");
  }
  finally {
    MultiThreadedHttpConnectionManager.shutdownAll();
    if (server != null) {
      server.stop();
    }
  }
}
