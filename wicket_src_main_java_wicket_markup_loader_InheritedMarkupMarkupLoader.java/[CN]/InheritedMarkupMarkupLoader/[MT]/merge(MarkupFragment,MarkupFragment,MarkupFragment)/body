{
  MarkupFragment mergedMarkup=baseMarkup.makeCopy();
{
    final MarkupFragment childFragment=MarkupFragmentUtils.getWicketChildTag(mergedMarkup);
    if (childFragment == null) {
      throw new MarkupException(new MarkupStream(baseMarkup),"Didn't find <wicket:child> tag in base markup. Markup: " + baseMarkup.toUserDebugString());
    }
    if (childFragment.getTag().isOpenClose()) {
      ComponentTag bodyTag=childFragment.getTag().mutable();
      bodyTag.setType(XmlTag.Type.OPEN);
      bodyTag.makeImmutable();
      ComponentTag bodyCloseTag=bodyTag.mutable();
      bodyCloseTag.setType(XmlTag.Type.CLOSE);
      childFragment.removeMarkupElement(0);
      childFragment.addMarkupElement(bodyTag);
      childFragment.addMarkupElement(bodyCloseTag);
    }
 else {
      while (childFragment.size() > 2) {
        childFragment.visitChildren(MarkupFragment.class,new MarkupFragment.IVisitor(){
          public Object visit(          MarkupElement element,          MarkupFragment parent){
            MarkupStream markupStream=new MarkupStream(baseMarkup);
            while (markupStream.hasMore()) {
              if (markupStream.next() == childFragment) {
                break;
              }
            }
            throw new MarkupException(markupStream,"No wicket components are allowed in the preview area in between the wicket:child tag");
          }
        }
);
        childFragment.removeMarkupElement(1);
      }
    }
    childFragment.addMarkupElement(1,extendFragment.makeCopy());
  }
{
    MarkupFragment body1=MarkupFragmentUtils.getBodyTag(derivedMarkup);
    if (body1 != null) {
      MarkupFragment body2=MarkupFragmentUtils.getBodyTag(mergedMarkup);
      ComponentTag newBodyTag=body2.getTag().mutable();
      String onload=Strings.join(";",newBodyTag.getAttributes().getString(ONLOAD),body1.getTag().getAttributes().getString(ONLOAD));
      String onunload=Strings.join(";",newBodyTag.getAttributes().getString(ONUNLOAD),body1.getTag().getAttributes().getString(ONUNLOAD));
      if (Strings.isEmpty(onload) == false) {
        newBodyTag.put(ONLOAD,onload);
      }
      if (Strings.isEmpty(onunload) == false) {
        newBodyTag.put(ONUNLOAD,onunload);
      }
      body2.removeMarkupElement(0);
      body2.addMarkupElement(0,newBodyTag);
    }
  }
{
    final List<MarkupFragment> headers=MarkupFragmentUtils.getWicketHeaders(derivedMarkup);
    if (headers != null) {
      MarkupFragmentUtils.LookupResult result=null;
      result=MarkupFragmentUtils.getWicketHeadTagPosition(mergedMarkup);
      if (result == null) {
        result=MarkupFragmentUtils.getHeadTagPosition(mergedMarkup);
      }
      if (result == null) {
        result=MarkupFragmentUtils.getBodyTagPosition(mergedMarkup);
      }
      if (result == null) {
        if ((mergedMarkup.size() == 1) && (mergedMarkup.get(0) instanceof MarkupFragment)) {
          mergedMarkup=(MarkupFragment)mergedMarkup.get(0);
        }
        result=new MarkupFragmentUtils.LookupResult(mergedMarkup,0);
      }
      if (result != null) {
        for (        MarkupFragment fragment : headers) {
          result.fragment.addMarkupElement(result.index++,fragment);
        }
      }
    }
  }
  if (Page.class.isAssignableFrom(mergedMarkup.getMarkup().getResource().getContainerInfo().getContainerClass())) {
    if (MarkupFragmentUtils.getHeadTag(mergedMarkup) == null) {
      MarkupFragmentUtils.LookupResult result=MarkupFragmentUtils.getWicketHeadTagPosition(mergedMarkup);
      if (result != null) {
        ComponentTag openTag=new ComponentTag(new XmlTag());
        openTag.setName("head");
        openTag.setId(HtmlHeaderSectionHandler.HEADER_ID);
        openTag.setType(XmlTag.Type.OPEN);
        openTag.makeImmutable();
        ComponentTag closeTag=openTag.mutable();
        closeTag.setType(XmlTag.Type.CLOSE);
        closeTag.setOpenTag(openTag);
        MarkupFragment headerFragment=new MarkupFragment(result.fragment.getMarkup());
        headerFragment.addMarkupElement(openTag);
        headerFragment.addMarkupElement(closeTag);
        result.fragment.addMarkupElement(1,headerFragment);
        while (result.index < result.fragment.size()) {
          MarkupElement elem=result.fragment.get(result.index);
          if (elem instanceof MarkupFragment) {
            ComponentTag tag=((MarkupFragment)elem).getTag();
            if (tag.isWicketHeadTag()) {
              headerFragment.addMarkupElement(headerFragment.size() - 1,elem);
              result.fragment.removeMarkupElement(result.index);
            }
 else {
              break;
            }
          }
 else {
            break;
          }
        }
      }
    }
  }
  if ((mergedMarkup.size() == 1) && (mergedMarkup.get(0) instanceof MarkupFragment)) {
    mergedMarkup=(MarkupFragment)mergedMarkup.get(0);
  }
  mergedMarkup.visitChildren(ComponentTag.class,new MarkupFragment.IVisitor(){
    public Object visit(    final MarkupElement element,    final MarkupFragment parent){
      ComponentTag tag=(ComponentTag)element;
      tag.setMarkupClass(parent.getMarkup().getResource().getMarkupClass());
      return CONTINUE_TRAVERSAL;
    }
  }
);
  return mergedMarkup;
}
