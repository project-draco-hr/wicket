{
  final Application application=Application.get();
  final Class<? extends MarkupContainer> markupClass=(Class<? extends MarkupContainer>)markup.getMarkup().getResource().getMarkupClass().getSuperclass();
  final MarkupFragment baseMarkup=application.getMarkupCache().getMarkup(container,markupClass);
  if (baseMarkup == MarkupFragment.NO_MARKUP_FRAGMENT) {
    throw new MarkupNotFoundException("Base markup of inherited markup not found. Component class: " + markup.getMarkup().getResource().getContainerInfo().getContainerClass().getName() + " Enable debug messages for wicket.util.resource.Resource to get a list of all filenames tried.");
  }
  application.getMarkupCache().addAfterLoadListener(baseMarkup.getMarkup().getResource(),new IChangeListener(){
    public void onChange(){
      if (log.isDebugEnabled()) {
        log.debug("Remove derived markup from cache: " + markup.getMarkup().getResource());
      }
      application.getMarkupCache().removeMarkup(markup.getMarkup().getResource());
    }
    /** 
 * Make sure there is only one listener per derived markup
 * @see java.lang.Object#equals(java.lang.Object)
 */
    @Override public boolean equals(    final Object obj){
      return true;
    }
    /** 
 * Make sure there is only one listener per derived markup
 * @see java.lang.Object#hashCode()
 */
    @Override public int hashCode(){
      return markup.getMarkup().getResource().getCacheKey().hashCode();
    }
  }
);
  return baseMarkup;
}
