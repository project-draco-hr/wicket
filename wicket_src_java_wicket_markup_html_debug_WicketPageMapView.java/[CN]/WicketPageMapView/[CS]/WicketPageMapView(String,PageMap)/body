{
  super(id);
  add(new Label("name",pageMap.getName() == null ? "null" : pageMap.getName()));
  final List entries=pageMap.getEntries();
  Collections.sort(entries,new Comparator(){
    public int compare(    Object a,    Object b){
      IPageMapEntry ea=(IPageMapEntry)a;
      IPageMapEntry eb=(IPageMapEntry)b;
      return eb.getAccessSequenceNumber() - ea.getAccessSequenceNumber();
    }
  }
);
  add(new ListView("entries",entries){
    private static final long serialVersionUID=1L;
    /** 
 * Populate the table with Wicket elements
 */
    protected void populateItem(    final ListItem listItem){
      IPageMapEntry entry=(IPageMapEntry)listItem.getModelObject();
      listItem.add(new Label("id","" + entry.getNumericId()));
      listItem.add(new Label("class","" + entry.getClass().getName()));
      int size;
      int versions;
      if (entry instanceof Page) {
        size=((Page)entry).getSize();
        versions=((Page)entry).getCurrentVersionNumber() + 1;
      }
 else {
        size=ObjectProfiler.sizeof(entry);
        versions=1;
      }
      listItem.add(new Label("versions","" + versions));
      listItem.add(new Label("size",(entry instanceof WicketInspector) ? "(inspector)" : "" + Bytes.bytes(size)));
    }
  }
);
}
