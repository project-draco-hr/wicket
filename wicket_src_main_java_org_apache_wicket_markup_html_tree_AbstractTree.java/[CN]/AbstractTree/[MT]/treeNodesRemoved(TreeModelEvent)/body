{
  Object parent=e.getTreePath().getLastPathComponent();
  TreeItem parentItem=nodeToItemMap.get(parent);
  if (isNodeVisible(parent) && isNodeExpanded(parent)) {
    boolean nonEmpty=!parentItem.getChildren().isEmpty();
    for (int i=0; i < e.getChildren().length; ++i) {
      Object node=e.getChildren()[i];
      TreeItem item=nodeToItemMap.get(node);
      if (item != null) {
        markTheLastButOneChildDirty(parentItem,item);
        parentItem.getChildren().remove(item);
        visitItemChildren(item,new IItemCallback(){
          public void visitItem(          TreeItem item){
            removeItem(item);
            getTreeState().selectNode(item.getDefaultModelObject(),false);
          }
        }
);
        getTreeState().selectNode(item.getDefaultModelObject(),false);
        removeItem(item);
      }
    }
    if (nonEmpty && parentItem.getChildren().isEmpty()) {
      invalidateNode(parent,true);
    }
  }
}
