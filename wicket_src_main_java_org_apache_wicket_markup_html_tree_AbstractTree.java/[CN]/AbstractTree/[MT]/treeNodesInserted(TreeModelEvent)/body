{
  if (dirtyAll) {
    return;
  }
  Object parentNode=e.getTreePath().getLastPathComponent();
  TreeItem parentItem=nodeToItemMap.get(parentNode);
  if (parentItem != null && isNodeVisible(parentNode)) {
    List<?> eventChildren=Arrays.asList(e.getChildren());
    List<TreeItem> itemChildren=parentItem.getChildren();
    boolean wasLeaf=itemChildren == null || eventChildren.containsAll(itemChildren);
    if (wasLeaf) {
      Object grandparentNode=getParentNode(parentNode);
      invalidateNodeWithChildren(grandparentNode);
      getTreeState().expandNode(parentNode);
    }
 else {
      if (isNodeExpanded(parentNode)) {
        final int[] childIndices=e.getChildIndices();
        for (int i=0; i < eventChildren.size(); ++i) {
          Object node=eventChildren.get(i);
          int index=childIndices[i];
          TreeItem item=newTreeItem(parentItem,node,parentItem.getLevel() + 1);
          itemContainer.add(item);
          if (itemChildren != null) {
            itemChildren.add(index,item);
            markTheLastButOneChildDirty(parentItem,item);
          }
          if (!dirtyItems.contains(item)) {
            dirtyItems.add(item);
          }
          if (!dirtyItemsCreateDOM.contains(item) && !item.hasParentWithChildrenMarkedToRecreation()) {
            dirtyItemsCreateDOM.add(item);
          }
        }
      }
    }
  }
}
