{
  Application application=requestCycle.getApplication();
  SharedResources sharedResources=application.getSharedResources();
  final String resourceKey=getRequestParameters().getResourceKey();
  Resource resource=sharedResources.get(resourceKey);
  if (resource == null) {
    int ix=resourceKey.indexOf('/');
    if (ix != -1) {
      String className=resourceKey.substring(0,ix);
      IClassResolver resolver=application.getApplicationSettings().getClassResolver();
      Class scope=null;
      try {
        scope=Application.get().getSharedResources().getAliasClass(className);
        if (scope == null) {
          scope=resolver.resolveClass(className);
        }
        String path=resourceKey.substring(ix + 1);
        PackageResource packageResource=PackageResource.get(scope,path);
        if (sharedResources.get(resourceKey) == null) {
          sharedResources.add(resourceKey,packageResource);
        }
        resource=packageResource;
      }
 catch (      Exception e) {
        log.error("unable to lazily register shared resource " + resourceKey + ", exception="+ e.getMessage());
      }
    }
  }
  if (resource == null) {
    Response response=requestCycle.getResponse();
    if (response instanceof WebResponse) {
      ((WebResponse)response).getHttpServletResponse().setStatus(HttpServletResponse.SC_NOT_FOUND);
      log.error("shared resource " + resourceKey + " not found");
      return;
    }
 else {
      throw new WicketRuntimeException("shared resource " + resourceKey + " not found");
    }
  }
  if (requestParameters != null) {
    resource.setParameters(requestParameters.getParameters());
  }
  resource.onResourceRequested();
}
