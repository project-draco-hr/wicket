{
  Map classesToGetAndSetters=getClassesToGetAndSetters();
  Map getAndSetters=(Map)classesToGetAndSetters.get(clz);
  if (getAndSetters == null) {
    getAndSetters=new ConcurrentHashMap(8);
    classesToGetAndSetters.put(clz,getAndSetters);
  }
  IGetAndSet getAndSetter=(IGetAndSet)getAndSetters.get(exp);
  if (getAndSetter == null) {
    Method method=null;
    Field field=null;
    if (exp.startsWith("[")) {
      exp=exp.substring(1,exp.length() - 1);
    }
 else     if (exp.endsWith("()")) {
      method=findMethod(clz,exp);
    }
 else {
      method=findGetter(clz,exp);
    }
    if (method == null) {
      if (List.class.isAssignableFrom(clz)) {
        try {
          int index=Integer.parseInt(exp);
          getAndSetter=new ListGetSet(index);
        }
 catch (        NumberFormatException ex) {
          method=findMethod(clz,exp);
          if (method != null) {
            getAndSetter=new MethodGetAndSet(method,MethodGetAndSet.findSetter(method,clz),null);
          }
 else {
            field=findField(clz,exp);
            if (field != null) {
              getAndSetter=new FieldGetAndSetter(field);
            }
 else {
              throw new WicketRuntimeException("The expression '" + exp + "' is neither an index nor is it a method or field for the list "+ clz);
            }
          }
        }
      }
 else       if (Map.class.isAssignableFrom(clz)) {
        getAndSetter=new MapGetSet(exp);
      }
 else       if (clz.isArray()) {
        try {
          int index=Integer.parseInt(exp);
          getAndSetter=new ArrayGetSet(clz.getComponentType(),index);
        }
 catch (        NumberFormatException ex) {
          if (exp.equals("length") || exp.equals("size")) {
            getAndSetter=new ArrayLengthGetSet();
          }
 else {
            throw new WicketRuntimeException("can't parse the exp " + exp + " as an index for an array lookup");
          }
        }
      }
 else {
        field=findField(clz,exp);
        if (field == null) {
          method=findMethod(clz,exp);
          if (method == null) {
            int index=exp.indexOf('.');
            if (index != -1) {
              String propertyName=exp.substring(0,index);
              String propertyIndex=exp.substring(index + 1);
              try {
                int parsedIndex=Integer.parseInt(propertyIndex);
                String name=Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);
                method=clz.getMethod("get" + name,new Class[]{int.class});
                getAndSetter=new ArrayPropertyGetSet(method,parsedIndex);
              }
 catch (              Exception e) {
                throw new WicketRuntimeException("no get method defined for class: " + clz + " expression: "+ propertyName);
              }
            }
 else {
              throw new WicketRuntimeException("No get method defined for class: " + clz + " expression: "+ exp);
            }
          }
 else {
            getAndSetter=new MethodGetAndSet(method,MethodGetAndSet.findSetter(method,clz),field);
          }
        }
 else {
          getAndSetter=new FieldGetAndSetter(field);
        }
      }
    }
 else {
      field=findField(clz,exp);
      getAndSetter=new MethodGetAndSet(method,MethodGetAndSet.findSetter(method,clz),field);
    }
    getAndSetters.put(exp,getAndSetter);
  }
  return getAndSetter;
}
