{
  if (authority == null) {
    return false;
  }
  Matcher authorityMatcher=Pattern.compile(AUTHORITY_PATTERN).matcher(authority);
  if (!authorityMatcher.matches()) {
    return false;
  }
  boolean ipV4Address=false;
  boolean hostname=false;
  String hostIP=authorityMatcher.group(PARSE_AUTHORITY_HOST_IP);
  Matcher matchIPV4Pat=Pattern.compile(IP_V4_DOMAIN_PATTERN).matcher(hostIP);
  ipV4Address=matchIPV4Pat.matches();
  if (ipV4Address) {
    for (int i=1; i <= 4; i++) {
      String ipSegment=matchIPV4Pat.group(i);
      if (ipSegment == null || ipSegment.length() <= 0) {
        return false;
      }
      try {
        if (Integer.parseInt(ipSegment) > 255) {
          return false;
        }
      }
 catch (      NumberFormatException e) {
        return false;
      }
    }
  }
 else {
    hostname=Pattern.compile(DOMAIN_PATTERN).matcher(hostIP).matches();
  }
  if (hostname) {
    char[] chars=hostIP.toCharArray();
    int size=1;
    for (int i=0; i < chars.length; i++) {
      if (chars[i] == '.') {
        size++;
      }
    }
    String[] domainSegment=new String[size];
    boolean match=true;
    int segmentCount=0;
    int segmentLength=0;
    while (match) {
      Matcher atomMatcher=Pattern.compile(ATOM_PATTERN).matcher(hostIP);
      match=atomMatcher.find();
      if (match) {
        domainSegment[segmentCount]=atomMatcher.group(1);
        segmentLength=domainSegment[segmentCount].length() + 1;
        hostIP=(segmentLength >= hostIP.length()) ? "" : hostIP.substring(segmentLength);
        segmentCount++;
      }
    }
    String topLevel=domainSegment[segmentCount - 1];
    if (topLevel.length() < 2 || topLevel.length() > 4) {
      return false;
    }
    Matcher alphaMatcher=Pattern.compile(ALPHA_PATTERN).matcher(topLevel.substring(0,1));
    if (!alphaMatcher.matches()) {
      return false;
    }
    if (segmentCount < 2) {
      return false;
    }
  }
  if (!hostname && !ipV4Address) {
    return false;
  }
  String port=authorityMatcher.group(PARSE_AUTHORITY_PORT);
  if (port != null) {
    Matcher portMatcher=Pattern.compile(PORT_PATTERN).matcher(port);
    if (!portMatcher.matches()) {
      return false;
    }
  }
  String extra=authorityMatcher.group(PARSE_AUTHORITY_EXTRA);
  if (!isBlankOrNull(extra)) {
    return false;
  }
  return true;
}
