{
  for (int i=0; i < requestTargets.size(); i++) {
    IRequestTarget target=requestTargets.get(i);
    if (target != null) {
      try {
        target.detach(this);
      }
 catch (      RuntimeException e) {
        log.error("there was an error cleaning up target " + target + ".",e);
      }
    }
  }
  try {
    onAfterTargetsDetached();
  }
 catch (  Throwable re) {
    log.error("there was an error processing onAfterTargetsDetached",re);
  }
  if (automaticallyClearFeedbackMessages) {
    try {
      if (sessionExists()) {
        getSession().cleanupFeedbackMessages();
      }
    }
 catch (    RuntimeException re) {
      log.error("there was an error cleaning up the feedback messages",re);
    }
  }
  try {
    IRequestLogger requestLogger=getApplication().getRequestLogger();
    if (requestLogger != null) {
      requestLogger.requestTime((System.currentTimeMillis() - startTime));
    }
  }
 catch (  RuntimeException re) {
    log.error("there was an error in the RequestLogger ending.",re);
  }
  if (sessionExists()) {
    try {
      getSession().requestDetached();
    }
 catch (    RuntimeException re) {
      log.error("there was an error detaching the request from the session " + session + ".",re);
    }
  }
  if (getResponse() instanceof BufferedWebResponse) {
    try {
      BufferedWebResponse response=(BufferedWebResponse)getResponse();
      response.filter();
    }
 catch (    RuntimeException re) {
      log.error("there was an error filtering the response.",re);
    }
  }
  try {
    onEndRequest();
  }
 catch (  RuntimeException e) {
    log.error("Exception occurred during onEndRequest",e);
  }
  try {
    getApplication().getSessionStore().onEndRequest(getRequest());
  }
 catch (  RuntimeException e) {
    log.error("Exception occurred during onEndRequest of the SessionStore",e);
  }
  Session session=getSession();
  if (session != null) {
    session.getPageManager().commitRequest();
  }
  try {
    threadDetach();
  }
 catch (  RuntimeException re) {
    log.error("Exception occurred during threadDetach",re);
  }
}
