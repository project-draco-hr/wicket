{
  try {
    final Application app=Application.get();
    final String encoding=app.getRequestCycleSettings().getResponseRequestEncoding();
    final WebResponse response=(WebResponse)requestCycle.getResponse();
    response.setCharacterEncoding(encoding);
    response.setContentType("text/xml; charset=" + encoding);
    response.setHeader("Expires","Mon, 26 Jul 1997 05:00:00 GMT");
    response.setHeader("Cache-Control","no-cache, must-revalidate");
    response.setHeader("Pragma","no-cache");
    response.write("<?xml version=\"1.0\" encoding=\"");
    response.write(encoding);
    response.write("\"?>");
    response.write("<ajax-response>");
    if (listeners != null) {
      final Map components=Collections.unmodifiableMap(markupIdToComponent);
      Iterator it=listeners.iterator();
      while (it.hasNext()) {
        ((IListener)it.next()).onBeforeRespond(components,this);
      }
    }
    Iterator it=prependJavascripts.iterator();
    while (it.hasNext()) {
      String js=(String)it.next();
      respondInvocation(response,js);
    }
    respondComponents(response);
    it=appendJavascripts.iterator();
    while (it.hasNext()) {
      String js=(String)it.next();
      respondInvocation(response,js);
    }
    if (listeners != null) {
      final Map components=Collections.unmodifiableMap(markupIdToComponent);
      final IJavascriptResponse jsresponse=new IJavascriptResponse(){
        public void addJavascript(        String script){
          respondInvocation(response,script);
        }
      }
;
      it=listeners.iterator();
      while (it.hasNext()) {
        ((IListener)it.next()).onAfterRespond(components,jsresponse);
      }
    }
    response.write("</ajax-response>");
  }
 catch (  RuntimeException ex) {
    LOG.error("Error while responding to an AJAX request: " + toString(),ex);
  }
}
