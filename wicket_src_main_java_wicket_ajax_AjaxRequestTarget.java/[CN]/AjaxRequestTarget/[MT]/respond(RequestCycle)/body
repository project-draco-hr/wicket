{
  final WebResponse response=(WebResponse)requestCycle.getResponse();
  try {
    final Application app=Application.get();
    final String encoding=app.getRequestCycleSettings().getResponseRequestEncoding();
    response.setCharacterEncoding(encoding);
    response.setContentType("text/xml; charset=" + encoding);
    response.setHeader("Expires","Mon, 26 Jul 1997 05:00:00 GMT");
    response.setHeader("Cache-Control","no-cache, must-revalidate");
    response.setHeader("Pragma","no-cache");
    response.write("<?xml version=\"1.0\" encoding=\"");
    response.write(encoding);
    response.write("\"?>");
    response.write("<ajax-response>");
    if (listeners != null) {
      final Map<String,Component> components=Collections.unmodifiableMap(markupIdToComponent);
      for (      IListener listener : listeners) {
        listener.onBeforeRespond(components,this);
      }
    }
    for (    String js : prependJavascripts) {
      respondInvocation(response,js);
    }
    respondComponents(response);
    for (    String js : appendJavascripts) {
      respondInvocation(response,js);
    }
    if (listeners != null) {
      final Map<String,Component> components=Collections.unmodifiableMap(markupIdToComponent);
      final IJavascriptResponse jsresponse=new IJavascriptResponse(){
        public void addJavascript(        String script){
          respondInvocation(response,script);
        }
      }
;
      for (      IListener listener : listeners) {
        listener.onAfterRespond(components,jsresponse);
      }
    }
    response.write("</ajax-response>");
  }
 catch (  RuntimeException ex) {
    Log.error("Error while responding to an AJAX request: " + toString(),ex);
  }
 finally {
    requestCycle.setResponse(response);
  }
}
