{
  Iterator it;
  try {
    it=markupIdToComponent.entrySet().iterator();
    while (it.hasNext()) {
      final Component component=(Component)((Entry)it.next()).getValue();
      if (component instanceof MarkupContainer) {
        MarkupContainer container=(MarkupContainer)component;
        container.visitChildren(IFeedback.class,new IVisitor(){
          public Object component(          Component component){
            ((IFeedback)component).updateFeedback();
            return IVisitor.CONTINUE_TRAVERSAL;
          }
        }
);
      }
      if (component instanceof IFeedback) {
        ((IFeedback)component).updateFeedback();
      }
    }
    it=markupIdToComponent.entrySet().iterator();
    while (it.hasNext()) {
      final Component component=(Component)((Entry)it.next()).getValue();
      component.internalAttach();
    }
    it=markupIdToComponent.entrySet().iterator();
    while (it.hasNext()) {
      final Map.Entry entry=(Entry)it.next();
      final Component component=(Component)entry.getValue();
      final String markupId=(String)entry.getKey();
      respondComponent(response,markupId,component);
    }
  }
  finally {
    it=markupIdToComponent.entrySet().iterator();
    while (it.hasNext()) {
      final Component component=(Component)((Entry)it.next()).getValue();
      component.getPage().internalDetach();
      break;
    }
  }
}
