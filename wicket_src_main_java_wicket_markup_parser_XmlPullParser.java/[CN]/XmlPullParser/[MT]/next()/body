{
  if (this.input.getPosition() >= this.input.size()) {
    return false;
  }
  if (this.skipUntilText != null) {
    skipUntil();
    return true;
  }
  final int openBracketIndex=this.input.find('<');
  if (this.input.charAt(this.input.getPosition()) != '<') {
    if (openBracketIndex == -1) {
      this.lastText=this.input.getSubstring(-1);
      this.input.setPosition(this.input.size());
      this.lastType=Type.BODY;
      return true;
    }
    this.lastText=this.input.getSubstring(openBracketIndex);
    this.input.setPosition(openBracketIndex);
    this.lastType=Type.BODY;
    return true;
  }
  this.input.countLinesTo(openBracketIndex);
  int closeBracketIndex=this.input.find('>',openBracketIndex + 1);
  if (closeBracketIndex == -1) {
    throw new ParseException("No matching close bracket at position " + openBracketIndex,this.input.getPosition());
  }
  this.lastText=this.input.getSubstring(openBracketIndex,closeBracketIndex + 1);
  String tagText=this.lastText.subSequence(1,this.lastText.length() - 1).toString();
  if (tagText.length() == 0) {
    throw new ParseException("Found empty tag: '<>' at position " + openBracketIndex,this.input.getPosition());
  }
  final char firstChar=tagText.charAt(0);
  if ((firstChar == '!') || (firstChar == '?')) {
    specialTagHandling(tagText,openBracketIndex,closeBracketIndex);
    return true;
  }
  final XmlTag.Type type;
  if (tagText.endsWith("/")) {
    type=XmlTag.Type.OPEN_CLOSE;
    tagText=tagText.substring(0,tagText.length() - 1);
  }
 else   if (tagText.startsWith("/")) {
    type=XmlTag.Type.CLOSE;
    tagText=tagText.substring(1);
  }
 else {
    type=XmlTag.Type.OPEN;
    if ((tagText.length() > 5) && ((tagText.charAt(0) == 's') || (tagText.charAt(0) == 'S'))) {
      final String lowerCase=tagText.substring(0,6).toLowerCase();
      if (lowerCase.startsWith("script")) {
        this.skipUntilText="script";
      }
 else       if (lowerCase.startsWith("style")) {
        this.skipUntilText="style";
      }
    }
  }
  this.lastTag=parseTagText(tagText);
  if (this.lastTag != null) {
    this.lastTag.type=type;
    this.lastTag.pos=openBracketIndex;
    this.lastTag.length=this.lastText.length();
    this.lastTag.text=this.lastText;
    this.lastTag.lineNumber=this.input.getLineNumber();
    this.lastTag.columnNumber=this.input.getColumnNumber();
    this.input.setPosition(closeBracketIndex + 1);
    this.lastType=Type.TAG;
    return true;
  }
 else {
    throw new ParseException("Malformed tag (line " + this.input.getLineNumber() + ", column "+ this.input.getColumnNumber()+ ")",openBracketIndex);
  }
}
