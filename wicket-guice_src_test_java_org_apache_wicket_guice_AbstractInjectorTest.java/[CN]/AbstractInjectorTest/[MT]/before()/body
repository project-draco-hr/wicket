{
  app.setServletContext(new MockServletContext(app,null));
  ThreadContext.setApplication(app);
  app.setName(getClass().getName());
  app.initApplication();
  Session session=new WebSession(new MockWebRequest(Url.parse("/")));
  app.getSessionStore().bind(null,session);
  ThreadContext.setSession(session);
  GuiceComponentInjector injector=new GuiceComponentInjector(app,new Module(){
    @Override public void configure(    final Binder binder){
      binder.bind(ITestService.class).to(TestService.class);
      binder.bind(ITestService.class).annotatedWith(Red.class).to(TestServiceRed.class);
      binder.bind(ITestService.class).annotatedWith(Blue.class).to(TestServiceBlue.class);
      binder.bind(new TypeLiteral<Map<String,String>>(){
      }
).toProvider(new Provider<Map<String,String>>(){
        @Override public Map<String,String> get(){
          Map<String,String> strings=new HashMap<>();
          strings.put(ITestService.RESULT,ITestService.RESULT);
          return strings;
        }
      }
);
      binder.bind(String.class).annotatedWith(Names.named("named1")).toInstance("NAMED_1");
      binder.bind(String.class).annotatedWith(Names.named("named2")).toInstance("NAMED_2");
      binder.bind(String.class).annotatedWith(new Jsr330Named("named1")).toInstance("NAMED_1");
      binder.bind(String.class).annotatedWith(new Jsr330Named("named2")).toInstance("NAMED_2");
      binder.bind(EvilTestService.class).toInstance(new EvilTestService("evil123",5));
    }
  }
);
  app.getComponentInstantiationListeners().add(injector);
}
