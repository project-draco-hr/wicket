{
  IncrementingListener incrementingListener=new IncrementingListener();
  Application.get().getRequestCycleListeners().add(incrementingListener);
  RequestCycle cycle=newRequestCycle((RuntimeException)null);
  incrementingListener.assertValues(0,0,0,0,0,0);
  assertValues(0,0,0);
  cycle.processRequestAndDetach();
  incrementingListener.assertValues(1,1,1,1,0,1);
  assertValues(0,1,1);
  cycle=newRequestCycle((RuntimeException)null);
  cycle.getListeners().add(incrementingListener);
  cycle.processRequestAndDetach();
  incrementingListener.assertValues(2,2,2,2,0,2);
  assertValues(0,1,1);
  cycle=newRequestCycle(new RuntimeException("testing purposes only"));
  cycle.getListeners().add(incrementingListener);
  cycle.processRequestAndDetach();
  incrementingListener.assertValues(2,2,2,0,2,2);
  assertValues(1,0,1);
  IRequestHandler replacement=new IRequestHandler(){
    @Override public void respond(    IRequestCycle requestCycle){
      responses++;
    }
    @Override public void detach(    IRequestCycle requestCycle){
      detaches++;
    }
  }
;
  cycle=newRequestCycle(new ReplaceHandlerException(replacement,true));
  cycle.scheduleRequestHandlerAfterCurrent(new IRequestHandler(){
    @Override public void respond(    IRequestCycle requestCycle){
      throw new UnsupportedOperationException();
    }
    @Override public void detach(    IRequestCycle requestCycle){
      throw new UnsupportedOperationException();
    }
  }
);
  cycle.processRequestAndDetach();
  incrementingListener.assertValues(1,1,2,1,0,1);
  assertValues(0,1,2);
  cycle=newRequestCycle(new ReplaceHandlerException(replacement,false));
  cycle.scheduleRequestHandlerAfterCurrent(new IRequestHandler(){
    @Override public void respond(    IRequestCycle requestCycle){
      responses++;
    }
    @Override public void detach(    IRequestCycle requestCycle){
      detaches++;
    }
  }
);
  cycle.processRequestAndDetach();
  incrementingListener.assertValues(1,1,3,2,0,1);
  assertValues(0,2,3);
}
