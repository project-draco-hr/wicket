{
  try {
    Date dateFieldInput=dateField.getConvertedInput();
    Integer hours=hoursField.getConvertedInput();
    Integer minutes=minutesField.getConvertedInput();
    AM_PM amOrPm=amOrPmChoice.getConvertedInput();
    final MutableDateTime date;
    if (dateFieldInput != null) {
      date=new MutableDateTime(dateFieldInput);
    }
 else {
      date=new MutableDateTime();
    }
    boolean use12HourFormat=use12HourFormat();
    if (use12HourFormat) {
      date.set(DateTimeFieldType.halfdayOfDay(),amOrPm == AM_PM.PM ? 1 : 0);
    }
    if ((hoursField.isVisibleInHierarchy() == false) || (hours == null)) {
      date.setHourOfDay(0);
    }
 else {
      date.set(DateTimeFieldType.hourOfDay(),hours % getMaximumHours(use12HourFormat));
    }
    if ((minutesField.isVisibleInHierarchy() == false) || (minutes == null)) {
      date.setMinuteOfHour(0);
    }
 else {
      date.setMinuteOfHour(minutes);
    }
    TimeZone zone=getClientTimeZone();
    if (zone != null) {
      date.setZoneRetainFields(DateTimeZone.forTimeZone(zone));
    }
    setConvertedInput(new Date(date.getMillis()));
  }
 catch (  RuntimeException e) {
    DateTimeField.this.error(e.getMessage());
    invalid();
  }
}
