{
  super(id,model);
  setType(Date.class);
  PropertyModel<Date> dateFieldModel=new PropertyModel<>(this,DATE);
  add(dateField=newDateTextField(DATE,dateFieldModel));
  dateField.add(newDatePicker());
  add(hoursField=new TextField<Integer>(HOURS,new PropertyModel<Integer>(this,HOURS),Integer.class));
  hoursField.add(getMaximumHours() == 24 ? RangeValidator.range(0,23) : RangeValidator.range(1,12));
  hoursField.setLabel(new Model<>(HOURS));
  add(minutesField=new TextField<Integer>(MINUTES,new PropertyModel<Integer>(this,MINUTES),Integer.class){
    private static final long serialVersionUID=1L;
    @SuppressWarnings("unchecked") @Override public <C>IConverter<C> getConverter(    Class<C> type){
      if (Integer.class.isAssignableFrom(type)) {
        return (IConverter<C>)MINUTES_CONVERTER;
      }
 else {
        return super.getConverter(type);
      }
    }
  }
);
  minutesField.add(new RangeValidator<>(0,59));
  minutesField.setLabel(new Model<>(MINUTES));
  add(amOrPmChoice=new DropDownChoice<AM_PM>(AM_OR_PM_CHOICE,new PropertyModel<AM_PM>(this,AM_OR_PM),Arrays.asList(AM_PM.values())));
  add(new WebMarkupContainer("hoursSeparator"){
    private static final long serialVersionUID=1L;
    @Override public boolean isVisible(){
      return minutesField.determineVisibility();
    }
  }
);
}
