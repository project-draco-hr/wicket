{
  final List<Rectangle> newRectangles=new ArrayList<>();
  for (  final Rectangle rectangle : rectangles) {
    final int y=rectangle.y;
    final List<Rectangle> workList=new ArrayList<>();
    workList.add(new Rectangle(rectangle));
    for (    final Rectangle remove : removeRegion.rectangles) {
      final Rectangle offsetRemove=new Rectangle(remove);
      offsetRemove.translate(offset.x,offset.y);
      if (offsetRemove.y > y) {
        break;
      }
      if (offsetRemove.y == y) {
        int rx1=offsetRemove.x;
        int rx2=offsetRemove.x + offsetRemove.width;
        for (int i=0; i < workList.size(); i++) {
          final Rectangle work=workList.get(i);
          int x1=work.x;
          int x2=work.x + work.width;
          if ((rx1 <= x1) && (rx2 >= x2)) {
            workList.remove(i);
            i-=1;
          }
 else {
            boolean leftIn=(rx1 >= x1) && (rx1 < x2);
            boolean rightIn=(rx2 > x1) && (rx2 <= x2);
            if (leftIn) {
              if (rightIn) {
                if (rx1 - x1 > 0) {
                  workList.set(i,new Rectangle(x1,y,rx1 - x1,1));
                }
                if (x2 - rx2 > 0) {
                  workList.add(i + 1,new Rectangle(rx2,y,x2 - rx2,1));
                }
              }
 else {
                if (rx1 - x1 > 0) {
                  workList.set(i,new Rectangle(x1,y,rx1 - x1,1));
                }
              }
            }
 else             if (rightIn) {
              if (x2 - rx2 > 0) {
                workList.set(i,new Rectangle(rx2,y,x2 - rx2,1));
              }
            }
          }
        }
      }
    }
    newRectangles.addAll(workList);
  }
  return new OpaqueRegion(newRectangles);
}
