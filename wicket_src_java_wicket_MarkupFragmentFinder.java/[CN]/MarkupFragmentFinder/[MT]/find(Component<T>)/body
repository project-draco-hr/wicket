{
  MarkupContainer parentWithAssociatedMarkup=component.findParentWithAssociatedMarkup();
  MarkupStream markupStream=null;
  while (true) {
    markupStream=parentWithAssociatedMarkup.getAssociatedMarkupStream(true);
    if (component.markupIndex != -1) {
      try {
        markupStream.setCurrentIndex(component.markupIndex);
        MarkupElement elem=markupStream.get();
        if (elem instanceof ComponentTag) {
          ComponentTag tag=(ComponentTag)elem;
          if (tag.getId().equals(component.getId())) {
            return markupStream;
          }
        }
      }
 catch (      IndexOutOfBoundsException ex) {
      }
    }
    String relativePath=getComponentRelativePath(component,parentWithAssociatedMarkup);
    int index=markupStream.findComponentIndex(relativePath,component.getId());
    if (index != -1) {
      markupStream.setCurrentIndex(index);
      return markupStream;
    }
    if (parentWithAssociatedMarkup instanceof Border) {
      parentWithAssociatedMarkup=parentWithAssociatedMarkup.findParentWithAssociatedMarkup();
    }
 else {
      MarkupContainer mc=component.findParent(Fragment.class);
      if (mc != null) {
        String fragmentId=((Fragment)mc).getFragmentMarkupId();
        String componentId=getComponentRelativePath(mc,parentWithAssociatedMarkup) + mc.getId();
        relativePath=relativePath.replace(componentId,fragmentId);
        index=markupStream.findComponentIndex(relativePath,component.getId());
        if (index != -1) {
          markupStream.setCurrentIndex(index);
          return markupStream;
        }
      }
      throw new WicketRuntimeException("Unable to find the markup for the component. That may be due to transparent containers or components implementing IComponentResolver: " + component.getId());
    }
    markupStream=null;
  }
}
