{
  Object result=null;
  if (value != null) {
    if (value.getClass().isArray() && toType.isArray()) {
      Class componentType=toType.getComponentType();
      result=Array.newInstance(componentType,Array.getLength(value));
      for (int i=0, icount=Array.getLength(value); i < icount; i++) {
        Array.set(result,i,convertValue(Array.get(value,i),componentType));
      }
    }
 else {
      if ((toType == Integer.class) || (toType == Integer.TYPE))       result=new Integer((int)longValue(value));
      if ((toType == Double.class) || (toType == Double.TYPE))       result=new Double(doubleValue(value));
      if ((toType == Boolean.class) || (toType == Boolean.TYPE))       result=booleanValue(value) ? Boolean.TRUE : Boolean.FALSE;
      if ((toType == Byte.class) || (toType == Byte.TYPE))       result=new Byte((byte)longValue(value));
      if ((toType == Character.class) || (toType == Character.TYPE))       result=new Character((char)longValue(value));
      if ((toType == Short.class) || (toType == Short.TYPE))       result=new Short((short)longValue(value));
      if ((toType == Long.class) || (toType == Long.TYPE))       result=new Long(longValue(value));
      if ((toType == Float.class) || (toType == Float.TYPE))       result=new Float(doubleValue(value));
      if (toType == BigInteger.class)       result=bigIntValue(value);
      if (toType == BigDecimal.class)       result=bigDecValue(value);
      if (toType == String.class)       result=stringValue(value);
    }
  }
 else {
    if (toType.isPrimitive()) {
      result=primitiveDefaults.get(toType);
    }
  }
  return result;
}
