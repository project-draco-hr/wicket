{
  return new AbstractSet<Entry<K,V>>(){
    @Override public Iterator<Entry<K,V>> iterator(){
      return new Iterator<Entry<K,V>>(){
        @Override public boolean hasNext(){
          return index < size;
        }
        @Override public Entry<K,V> next(){
          if (!hasNext()) {
            throw new NoSuchElementException();
          }
          keyIndex=nextKey(nextIndex(keyIndex));
          index++;
          return new Map.Entry<K,V>(){
            @Override public K getKey(){
              return keys[keyIndex];
            }
            @Override public V getValue(){
              return values[keyIndex];
            }
            @Override public V setValue(            final V value){
              final V oldValue=values[keyIndex];
              values[keyIndex]=value;
              return oldValue;
            }
          }
;
        }
        @Override public void remove(){
          keys[keyIndex]=null;
          values[keyIndex]=null;
        }
        int keyIndex=-1;
        int index=0;
      }
;
    }
    @Override public int size(){
      return size;
    }
  }
;
}
