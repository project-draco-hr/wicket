{
  final ComponentTag tag=(ComponentTag)getParent().nextTag();
  if (tag == null) {
    while (stack.size() > 0) {
      final XmlTag top=(XmlTag)stack.peek();
      if (!requiresCloseTag(top.getName())) {
        stack.pop();
      }
 else {
        throw new ParseException("Tag " + top + " at "+ top.getPos()+ " did not have a close tag",top.getPos());
      }
    }
    return tag;
  }
  if (log.isDebugEnabled()) {
    log.debug("tag: " + tag.toUserDebugString() + ", stack: "+ stack);
  }
  if (tag.isOpen()) {
    stack.push(tag);
  }
 else   if (tag.isClose()) {
    if (stack.size() > 0) {
      ComponentTag top=(ComponentTag)stack.pop();
      boolean mismatch=!top.hasEqualTagName(tag);
      if (mismatch) {
        while (mismatch && !requiresCloseTag(top.getName())) {
          top=(ComponentTag)stack.pop();
          mismatch=!top.hasEqualTagName(tag);
        }
        if (mismatch) {
          throw new MarkupException("Tag " + top.toUserDebugString() + " has a mismatched close tag at "+ tag.toUserDebugString());
        }
      }
      tag.setOpenTag(top);
    }
 else {
      throw new MarkupException("Tag " + tag.toUserDebugString() + " does not have a matching open tag");
    }
  }
 else   if (tag.isOpenClose()) {
    tag.setOpenTag(tag);
  }
  return tag;
}
