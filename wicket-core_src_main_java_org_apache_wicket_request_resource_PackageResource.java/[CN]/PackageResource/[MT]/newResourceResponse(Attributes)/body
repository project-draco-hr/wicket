{
  final ResourceResponse resourceResponse=new ResourceResponse();
  final IResourceStream resourceStream=getResourceStream();
  if (resourceStream == null) {
    return sendResourceError(resourceResponse,HttpServletResponse.SC_NOT_FOUND,"Unable to find resource");
  }
  final Time lastModified=resourceStream.lastModifiedTime();
  resourceResponse.setLastModified(lastModified);
  if (resourceResponse.dataNeedsToBeWritten(attributes)) {
    String contentType=resourceStream.getContentType();
    if (contentType == null && Application.exists()) {
      contentType=Application.get().getMimeType(path);
    }
    resourceResponse.setContentType(contentType);
    resourceResponse.setTextEncoding(getTextEncoding());
    resourceResponse.setAcceptRange(ContentRangeType.BYTES);
    try {
      long contentLength=IOUtils.toByteArray(resourceStream.getInputStream()).length;
      resourceResponse.setContentLength(contentLength);
      Long startbyte=RequestCycle.get().getMetaData(CONTENT_RANGE_STARTBYTE);
      Long endbyte=RequestCycle.get().getMetaData(CONTENT_RANGE_ENDBYTE);
      resourceResponse.setWriteCallback(new PartWriterCallback(resourceStream.getInputStream(),contentLength,startbyte,endbyte));
    }
 catch (    IOException e) {
      log.debug(e.getMessage(),e);
      return sendResourceError(resourceResponse,500,"Unable to read resource stream");
    }
catch (    ResourceStreamNotFoundException e) {
      log.debug(e.getMessage(),e);
      return sendResourceError(resourceResponse,500,"Unable to open resource stream");
    }
 finally {
      try {
        resourceStream.close();
      }
 catch (      IOException e) {
        log.warn("Unable to close the resource stream",e);
      }
    }
  }
  return resourceResponse;
}
