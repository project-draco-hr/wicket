{
  /** 
 * Iterator that knows how to change between a single child, list of children and map of
 * children. Keeps track when the iterator was last sync'd with the markup container's
 * tracking of changes to the list of children.
 */
class MarkupChildIterator implements Iterator<Component> {
    private int indexInRemovalsSinceLastUpdate=removals_size();
    private int expectedModCounter=-1;
    private Component currentComponent=null;
    private Iterator<Component> internalIterator=null;
    @Override public boolean hasNext(){
      refreshInternalIteratorIfNeeded();
      return internalIterator.hasNext();
    }
    @Override public Component next(){
      refreshInternalIteratorIfNeeded();
      return currentComponent=internalIterator.next();
    }
    @Override public void remove(){
      MarkupContainer.this.remove(currentComponent);
      refreshInternalIteratorIfNeeded();
    }
    private void refreshInternalIteratorIfNeeded(){
      if (modCounter != 0 && expectedModCounter >= modCounter)       return;
      if (children == null) {
        internalIterator=Collections.emptyIterator();
      }
 else       if (children instanceof Component) {
        internalIterator=Collections.singleton((Component)children).iterator();
      }
 else       if (children instanceof List) {
        List<Component> childrenList=children();
        internalIterator=childrenList.iterator();
      }
 else {
        Map<String,Component> childrenMap=children();
        internalIterator=childrenMap.values().iterator();
      }
      currentComponent=findLastExistingChildAlreadyReturned(currentComponent);
      expectedModCounter=modCounter;
      indexInRemovalsSinceLastUpdate=removals_size();
      if (currentComponent != null) {
        while (internalIterator.hasNext() && internalIterator.next() != currentComponent)         ;
      }
    }
    private Component findLastExistingChildAlreadyReturned(    Component target){
      while (true) {
        if (target == null)         return null;
        RemovedChild removedChild=null;
        for (int i=indexInRemovalsSinceLastUpdate; i < removals_size(); i++) {
          RemovedChild curRemovedChild=removals_get(i);
          if (curRemovedChild.removedChild == target || curRemovedChild.removedChild == null) {
            removedChild=curRemovedChild;
            break;
          }
        }
        if (removedChild == null) {
          return target;
        }
 else {
          target=removedChild.previousSibling;
        }
      }
    }
  }
  ;
  return new MarkupChildIterator();
}
