{
  final MarkupStream associatedMarkupStream=new MarkupStream(getMarkup(null));
  MarkupElement elem=associatedMarkupStream.get();
  if ((elem instanceof ComponentTag) == false) {
    associatedMarkupStream.throwMarkupException("Expected the open tag. " + exceptionMessage);
  }
  ComponentTag associatedMarkupOpenTag=(ComponentTag)elem;
  if (!((associatedMarkupOpenTag != null) && associatedMarkupOpenTag.isOpen() && (associatedMarkupOpenTag instanceof WicketTag))) {
    associatedMarkupStream.throwMarkupException(exceptionMessage);
  }
  try {
    setIgnoreAttributeModifier(true);
    renderComponentTag(associatedMarkupOpenTag);
    associatedMarkupStream.next();
    String className=null;
    final boolean outputClassName=getApplication().getDebugSettings().isOutputMarkupContainerClassName();
    if (outputClassName) {
      className=Classes.name(getClass());
      getResponse().write("<!-- MARKUP FOR ");
      getResponse().write(className);
      getResponse().write(" BEGIN -->");
    }
    renderComponentTagBody(associatedMarkupStream,associatedMarkupOpenTag);
    if (outputClassName) {
      getResponse().write("<!-- MARKUP FOR ");
      getResponse().write(className);
      getResponse().write(" END -->");
    }
    renderClosingComponentTag(associatedMarkupStream,associatedMarkupOpenTag,false);
  }
  finally {
    setIgnoreAttributeModifier(false);
  }
}
