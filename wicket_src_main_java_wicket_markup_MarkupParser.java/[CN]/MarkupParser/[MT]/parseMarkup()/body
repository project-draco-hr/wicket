{
  final Stack<MarkupFragment> fragmentStack=new Stack<MarkupFragment>();
  this.currentFragment=this.rootFragment;
  try {
    int size=currentFragment.size();
    for (ComponentTag tag; null != (tag=(ComponentTag)this.markupFilterChain.nextTag()); ) {
      boolean add=(tag.getId() != null);
      if (!add && tag.getXmlTag().isClose()) {
        add=((tag.getOpenTag() != null) && (tag.getOpenTag().getId() != null));
      }
      if (add || tag.isModified()) {
        final CharSequence text=this.xmlParser.getInputFromPositionMarker(tag.getPos());
        if (text.length() > 0) {
          String rawMarkup=text.toString();
          if (this.stripComments) {
            rawMarkup=removeComment(rawMarkup);
          }
          if (this.compressWhitespace) {
            rawMarkup=compressWhitespace(rawMarkup);
          }
          currentFragment.addMarkupElement(size,new RawMarkup(rawMarkup));
        }
        if (add) {
          if (!WicketRemoveTagHandler.IGNORE.equals(tag.getId())) {
            if (tag.isOpen() || tag.isOpenClose()) {
              fragmentStack.push(currentFragment);
              MarkupFragment newFragment=new MarkupFragment(this.markup);
              currentFragment.addMarkupElement(newFragment);
              currentFragment=newFragment;
            }
            currentFragment.addMarkupElement(tag);
            if (tag.isClose() || tag.isOpenClose() || tag.hasNoCloseTag()) {
              currentFragment=fragmentStack.pop();
            }
          }
        }
 else         if (tag.isModified()) {
          currentFragment.addMarkupElement(new RawMarkup(tag.toCharSequence()));
        }
        this.xmlParser.setPositionMarker();
      }
      size=currentFragment.size();
    }
  }
 catch (  final ParseException ex) {
    final CharSequence text=this.xmlParser.getInputFromPositionMarker(-1);
    if (text.length() > 0) {
      currentFragment.addMarkupElement(new RawMarkup(text));
    }
    this.markup.setEncoding(this.xmlParser.getEncoding());
    this.markup.setXmlDeclaration(this.xmlParser.getXmlDeclaration());
    MarkupElement element=currentFragment.get(currentFragment.size() - 1);
    MarkupStream markupStream=new MarkupStream(this.rootFragment);
    while (markupStream.hasMore()) {
      if (markupStream.next() == element) {
        break;
      }
    }
    throw new MarkupException(markupStream,ex.getMessage(),ex);
  }
  final CharSequence text=this.xmlParser.getInputFromPositionMarker(-1);
  if (text.length() > 0) {
    String rawMarkup=text.toString();
    if (this.stripComments) {
      rawMarkup=removeComment(rawMarkup);
    }
    if (this.compressWhitespace) {
      rawMarkup=compressWhitespace(rawMarkup);
    }
    currentFragment.addMarkupElement(new RawMarkup(rawMarkup));
  }
  if (fragmentStack.size() > 0) {
    currentFragment.handleUnclosedTags();
    currentFragment=this.rootFragment;
  }
  if ((currentFragment.size() == 1) && (currentFragment.get(0) instanceof MarkupFragment)) {
    currentFragment=(MarkupFragment)currentFragment.get(0);
  }
  return currentFragment;
}
