{
  this.markupElements=new ArrayList<MarkupElement>(20);
  try {
    int size=this.markupElements.size();
    for (ComponentTag tag; null != (tag=(ComponentTag)this.markupFilterChain.nextTag()); ) {
      boolean add=(tag.getId() != null);
      if (!add && tag.getXmlTag().isClose()) {
        add=((tag.getOpenTag() != null) && (tag.getOpenTag().getId() != null));
      }
      if (add || tag.isModified()) {
        final CharSequence text=this.xmlParser.getInputFromPositionMarker(tag.getPos());
        if (text.length() > 0) {
          String rawMarkup=text.toString();
          if (this.stripComments) {
            rawMarkup=removeComment(rawMarkup);
          }
          if (this.compressWhitespace) {
            rawMarkup=compressWhitespace(rawMarkup);
          }
          this.markupElements.add(size,new RawMarkup(rawMarkup));
        }
        if (add) {
          if (!WicketRemoveTagHandler.IGNORE.equals(tag.getId())) {
            this.markupElements.add(tag);
          }
        }
 else         if (tag.isModified()) {
          this.markupElements.add(new RawMarkup(tag.toCharSequence()));
        }
        this.xmlParser.setPositionMarker();
      }
      size=this.markupElements.size();
    }
  }
 catch (  final ParseException ex) {
    int size=this.markupElements.size();
    final CharSequence text=this.xmlParser.getInputFromPositionMarker(-1);
    if (text.length() > 0) {
      this.markupElements.add(new RawMarkup(text));
    }
    this.markup.setEncoding(this.xmlParser.getEncoding());
    this.markup.setXmlDeclaration(this.xmlParser.getXmlDeclaration());
    for (    MarkupElement elem : this.markupElements) {
      this.rootFragment.addMarkupElement(elem);
    }
    MarkupStream markupStream=new MarkupStream(this.rootFragment);
    markupStream.setCurrentIndex(size);
    throw new MarkupException(markupStream,ex.getMessage(),ex);
  }
  final CharSequence text=this.xmlParser.getInputFromPositionMarker(-1);
  if (text.length() > 0) {
    String rawMarkup=text.toString();
    if (this.stripComments) {
      rawMarkup=removeComment(rawMarkup);
    }
    if (this.compressWhitespace) {
      rawMarkup=compressWhitespace(rawMarkup);
    }
    this.markupElements.add(new RawMarkup(rawMarkup));
  }
  if (this.markupElements.size() > 0) {
    Stack<MarkupFragment> stack=new Stack<MarkupFragment>();
    stack.push(this.rootFragment);
    MarkupFragment currentFragment=this.rootFragment;
    for (    MarkupElement elem : this.markupElements) {
      if (elem instanceof RawMarkup) {
        currentFragment.addMarkupElement(elem);
      }
 else {
        ComponentTag tag=(ComponentTag)elem;
        if (tag.isOpen() || tag.isOpenClose()) {
          stack.push(currentFragment);
          MarkupFragment newFragment=new MarkupFragment(this.rootFragment.getMarkup());
          currentFragment.addMarkupElement(newFragment);
          currentFragment=newFragment;
        }
        currentFragment.addMarkupElement(tag);
        if (tag.isOpenClose() || tag.isClose() || tag.hasNoCloseTag()) {
          currentFragment=stack.pop();
        }
      }
    }
    if (this.rootFragment.size() == 1) {
      MarkupElement elem=this.rootFragment.get(0);
      if (elem instanceof MarkupFragment) {
        return (MarkupFragment)elem;
      }
    }
  }
  return this.rootFragment;
}
