{
  final boolean ajaxRequest=getRequest() instanceof WebRequest && ((WebRequest)getRequest()).isAjax();
  final boolean stripWicketTags=ajaxRequest || Application.get().getMarkupSettings().getStripWicketTags();
  if (!(tag instanceof WicketTag) || !stripWicketTags) {
    List<IBehavior> behaviors=getBehaviors();
    if ((behaviors != null) && !behaviors.isEmpty() && !tag.isClose()&& (isIgnoreAttributeModifier() == false)) {
      tag=tag.mutable();
      for (Iterator<IBehavior> i=behaviors.iterator(); i.hasNext(); ) {
        IBehavior behavior=i.next();
        if (isBehaviorAccepted(behavior)) {
          behavior.onComponentTag(this,tag);
        }
      }
    }
    if (tag.hasBehaviors()) {
      Iterator<? extends IBehavior> tagBehaviors=tag.getBehaviors();
      while (tagBehaviors.hasNext()) {
        final IBehavior behavior=tagBehaviors.next();
        if (behavior.isEnabled(this)) {
          behavior.onComponentTag(this,tag);
        }
        behavior.detach(this);
      }
    }
    tag.writeOutput(getResponse(),stripWicketTags,findMarkupStream().getWicketNamespace());
  }
}
