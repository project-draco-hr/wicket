{
  MarkupContainer parent=getParent();
  IMarkupFragment markup=getMarkup();
  if ((parent != null) && (markup != null)) {
    IMarkupFragment parentMarkup=parent.getMarkup(null);
    if ((parentMarkup != null) && (markup != parentMarkup)) {
      if (markup.getMarkupResourceStream() == parentMarkup.getMarkupResourceStream()) {
        MarkupStream stream=new MarkupStream(markup);
        stream.skipUntil(ComponentTag.class);
        ComponentTag openTag=stream.getTag();
        if (openTag != null) {
          MarkupStream parentStream=new MarkupStream(parentMarkup);
          if (parentStream.skipUntil(ComponentTag.class)) {
            parentStream.next();
          }
          Stack<ComponentTag> stack=new Stack<ComponentTag>();
          while (parentStream.skipUntil(ComponentTag.class)) {
            ComponentTag tag=parentStream.getTag();
            if (openTag == tag) {
              if (stack.isEmpty() == false) {
                final ComponentTag lastTag=stack.pop();
                parent.visitChildren(MarkupContainer.class,new IVisitor<MarkupContainer>(){
                  public Object component(                  final MarkupContainer component){
                    IMarkupFragment m=component.getMarkup();
                    MarkupStream ms=new MarkupStream(m);
                    ms.skipUntil(ComponentTag.class);
                    if (ms.hasMore() && (lastTag == ms.getTag())) {
                      component.add(Component.this);
                      return IVisitor.STOP_TRAVERSAL;
                    }
                    return IVisitor.CONTINUE_TRAVERSAL;
                  }
                }
);
              }
              return false;
            }
            if (tag.isOpen()) {
              if (tag.hasNoCloseTag() == false) {
                stack.push(tag);
              }
            }
 else             if (tag.isOpenClose()) {
            }
 else             if (tag.isClose()) {
              if (stack.isEmpty() == false) {
                stack.pop();
              }
            }
            parentStream.next();
          }
        }
      }
    }
  }
  return false;
}
