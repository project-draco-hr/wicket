{
  List<Object> l1=new ArrayList<Object>();
  l1.add("test 1.1");
  l1.add("test 1.2");
  List<Object> l2=new ArrayList<Object>();
  l2.add("test 2.1");
  l2.add("test 2.2");
  l2.add("test 2.3");
  List<String> l3=new ArrayList<String>();
  l3.add("test 3.1");
  l2.add(l3);
  l2.add("test 2.4");
  l1.add(l2);
  l1.add("test 1.3");
  new NestedList(this,"nestedList",l1);
  TreeModel treeModel=convertToTreeModel(l1);
  final Tree tree=new Tree(this,"tree",treeModel){
    @Override protected String getNodeLabel(    DefaultMutableTreeNode node){
      Object userObject=node.getUserObject();
      return (userObject instanceof List) ? "<sub>" : String.valueOf(node.getUserObject());
    }
  }
;
  new Link(this,"expandAll"){
    @Override public void onClick(){
      tree.expandAll(true);
    }
  }
;
  new Link(this,"collapseAll"){
    @Override public void onClick(){
      tree.expandAll(false);
    }
  }
;
  Tree tree2=new MyTree(this,"tree2",treeModel);
  Tree tree3=new AnotherTree(this,"tree3",treeModel);
}
