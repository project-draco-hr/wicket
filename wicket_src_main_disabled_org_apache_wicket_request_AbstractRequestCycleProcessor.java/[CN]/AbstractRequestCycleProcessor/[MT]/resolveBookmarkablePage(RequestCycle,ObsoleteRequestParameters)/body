{
  String bookmarkablePageClass=requestParameters.getBookmarkablePageClass();
  Session session=requestCycle.getSession();
  Class<? extends Page> pageClass;
  try {
    pageClass=(Class<? extends Page>)session.getClassResolver().resolveClass(bookmarkablePageClass);
  }
 catch (  ClassNotFoundException e) {
    return new WebErrorCodeResponseHandler(HttpServletResponse.SC_NOT_FOUND,"Unable to load Bookmarkable Page");
  }
  try {
    PageParameters params=new PageParameters(requestParameters.getParameters());
    if (requestParameters.getComponentPath() != null && requestParameters.getInterfaceName() != null) {
      final String componentPath=requestParameters.getComponentPath();
      final String id=Strings.firstPathComponent(componentPath,Component.PATH_SEPARATOR);
      final Page page=(Page)session.getPageManager().getPage(Integer.valueOf(id));
      if (page != null && page.getClass() == pageClass) {
        return resolveListenerInterfaceTarget(requestCycle,page,componentPath,requestParameters.getInterfaceName(),requestParameters);
      }
 else {
        return new BookmarkableListenerInterfaceRequestTarget(requestParameters.getPageMapName(),pageClass,params,requestParameters.getComponentPath(),requestParameters.getInterfaceName(),requestParameters.getVersionNumber());
      }
    }
 else {
      return new BookmarkablePageRequestTarget(pageClass,params);
    }
  }
 catch (  RuntimeException e) {
    throw new WicketRuntimeException("Unable to instantiate Page class: " + bookmarkablePageClass + ". See below for details.",e);
  }
}
