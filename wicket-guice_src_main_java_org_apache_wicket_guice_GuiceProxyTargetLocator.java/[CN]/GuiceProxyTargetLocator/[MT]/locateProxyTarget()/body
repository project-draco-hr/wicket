{
  final GuiceInjectorHolder holder=Application.get().getMetaData(GuiceInjectorHolder.INJECTOR_KEY);
  final Type type;
  try {
    Class<?> clazz=Classes.resolveClass(data[0]);
    if (argIndex < 0) {
      final Field field=clazz.getDeclaredField(data[1]);
      type=field.getGenericType();
    }
 else {
      Class<?>[] paramTypes=new Class[data.length - 2];
      for (int i=2; i < data.length; i++) {
        paramTypes[i - 2]=Classes.resolveClass(data[i]);
      }
      final Method method=clazz.getDeclaredMethod(data[1],paramTypes);
      type=method.getGenericParameterTypes()[argIndex];
    }
  }
 catch (  Exception e) {
    throw new WicketRuntimeException("Error accessing member: " + data[1] + " of class: "+ data[0],e);
  }
  final Key<?> key;
  if (bindingAnnotation == null) {
    key=Key.get(TypeLiteral.get(type));
  }
 else {
    key=Key.get(TypeLiteral.get(type),bindingAnnotation);
  }
  Injector injector=holder.getInjector();
  if (optional) {
    try {
      if (injector.getBinding(key) == null) {
        return null;
      }
    }
 catch (    RuntimeException e) {
      return null;
    }
  }
  return injector.getInstance(key);
}
