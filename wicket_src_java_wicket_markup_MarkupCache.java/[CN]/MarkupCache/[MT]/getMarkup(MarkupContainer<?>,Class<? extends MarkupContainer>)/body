{
  Class<? extends MarkupContainer> containerClass=clazz;
  if (clazz == null) {
    containerClass=container.getClass();
  }
 else {
    if (!clazz.isAssignableFrom(container.getClass())) {
      throw new WicketRuntimeException("Parameter clazz must be instance of container");
    }
  }
  final CharSequence key=markupKey(container,clazz);
  Markup markup=markupCache.get(key);
  if (markup == null) {
synchronized (markupCache) {
      markup=markupCache.get(key);
      if (markup == null) {
        final MarkupResourceStreamLookupResult lookupResult=container.newMarkupResourceStream(containerClass);
        if (lookupResult != null) {
          if (lookupResult.getCacheKey() == null) {
            lookupResult.setCacheKey(key);
          }
          final IResourceStream resourceStream=lookupResult.getResourceStream();
          if (!(resourceStream instanceof MarkupResourceStream)) {
            lookupResult.setResourceStream(new MarkupResourceStream(resourceStream,new ContainerInfo(container),containerClass));
          }
          markup=loadMarkupAndWatchForChanges(container,lookupResult);
        }
 else {
          markup=Markup.NO_MARKUP;
          markupCache.put(key,markup);
        }
      }
    }
  }
  return markup;
}
