{
  final int extendIndex=requiresBaseMarkup(markup);
  if (extendIndex == -1) {
    return markup;
  }
  final Class<? extends MarkupContainer> markupClass=markup.getResource().getMarkupClass();
  final IMarkup baseMarkup=getMarkup(container,(Class<? extends MarkupContainer>)markupClass.getSuperclass());
  if (baseMarkup == IMarkup.NO_MARKUP) {
    throw new MarkupNotFoundException("Parent markup of inherited markup not found. Component class: " + markup.getResource().getContainerInfo().getContainerClass().getName() + " Enable debug messages for wicket.util.resource.Resource to get a list of all filenames tried.");
  }
  afterLoadListeners.add(baseMarkup.getResource(),new IChangeListener(){
    public void onChange(){
      if (log.isDebugEnabled()) {
        log.debug("Remove derived markup from cache: " + markup.getResource());
      }
      removeMarkup(lookupResult);
    }
    /** 
 * Make sure there is only one listener per derived markup
 * @see java.lang.Object#equals(java.lang.Object)
 */
    @Override public boolean equals(    final Object obj){
      return true;
    }
    /** 
 * Make sure there is only one listener per derived markup
 * @see java.lang.Object#hashCode()
 */
    @Override public int hashCode(){
      return lookupResult.getCacheKey().hashCode();
    }
  }
);
  final IMarkup mergedMarkup=new MergedMarkup(markup,baseMarkup,extendIndex);
  return mergedMarkup;
}
