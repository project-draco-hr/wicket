{
  int extendIndex=requiresBaseMarkup(markup);
  if (extendIndex == -1) {
    return markup;
  }
  final Markup baseMarkup=getMarkup(container,clazz.getSuperclass());
  if (baseMarkup == Markup.NO_MARKUP) {
    throw new MarkupNotFoundException("Markup not found. Component class: " + (clazz != null ? clazz.getName() : container.getClass().getName()) + " Enable debug messages for wicket.util.resource.Resource to get a list of all filenames tried.");
  }
  afterLoadListeners.add(baseMarkup.getResource(),new IChangeListener(){
    public void onChange(){
      log.info("Reloading derived markup from " + markup.getResource());
      loadMarkup(key,markup.getResource(),clazz,container);
    }
    /** 
 * Make sure there is only one listener per derived markup
 * @see java.lang.Object#equals(java.lang.Object)
 */
    public boolean equals(    Object obj){
      return true;
    }
    /** 
 * Make sure there is only one listener per derived markup
 * @see java.lang.Object#hashCode()
 */
    public int hashCode(){
      return key.hashCode();
    }
  }
);
  Markup mergedMarkup=InheritedMarkupMerger.mergeMarkups(markup,baseMarkup,extendIndex);
  return mergedMarkup;
}
