{
  Component<?> linkComponent=getComponentFromLastRenderedPage(path);
  if (linkComponent instanceof AjaxLink) {
    if (isAjax == false) {
      fail("Link " + path + "is an AjaxLink and will "+ "not be invoked when AJAX (javascript) is disabled.");
    }
    AjaxLink<?> link=(AjaxLink<?>)linkComponent;
    setupRequestAndResponse(true);
    WebRequestCycle requestCycle=createRequestCycle();
    callOnBeginRequest(requestCycle);
    AjaxRequestTarget target=new AjaxRequestTarget(link.getPage());
    requestCycle.setRequestTarget(target);
    link.onClick(target);
    processRequestCycle(requestCycle);
  }
 else   if (linkComponent instanceof AjaxFallbackLink && isAjax) {
    AjaxFallbackLink<?> link=(AjaxFallbackLink<?>)linkComponent;
    setupRequestAndResponse(true);
    WebRequestCycle requestCycle=createRequestCycle();
    AjaxRequestTarget target=new AjaxRequestTarget(link.getPage());
    requestCycle.setRequestTarget(target);
    link.onClick(target);
    processRequestCycle(requestCycle);
  }
 else   if (linkComponent instanceof AjaxSubmitLink) {
    if (isAjax == false) {
      fail("Link " + path + "is an AjaxSubmitLink and "+ "will not be invoked when AJAX (javascript) is disabled.");
    }
    AjaxSubmitLink<?> link=(AjaxSubmitLink<?>)linkComponent;
    List<IBehavior> behaviors=link.getBehaviors();
    AjaxFormSubmitBehavior ajaxFormSubmitBehavior=null;
    for (    IBehavior behavior : behaviors) {
      if (behavior instanceof AjaxFormSubmitBehavior) {
        AjaxFormSubmitBehavior submitBehavior=(AjaxFormSubmitBehavior)behavior;
        ajaxFormSubmitBehavior=submitBehavior;
      }
    }
    String failMessage="No form submit behavior found on the submit link. Strange!!";
    notNull(failMessage,ajaxFormSubmitBehavior);
    setupRequestAndResponse(true);
    WebRequestCycle requestCycle=createRequestCycle();
    submitAjaxFormSubmitBehavior(ajaxFormSubmitBehavior);
    ajaxFormSubmitBehavior.onRequest();
    processRequestCycle(requestCycle);
  }
 else   if (linkComponent instanceof SubmitLink) {
    SubmitLink<?> submitLink=(SubmitLink<?>)linkComponent;
    String pageRelativePath=submitLink.getInputName();
    getParametersForNextRequest().put(pageRelativePath,"x");
    submitForm(submitLink.getForm().getPageRelativePath());
  }
 else   if (linkComponent instanceof AbstractLink) {
    AbstractLink<?> link=(AbstractLink<?>)linkComponent;
    if (link instanceof BookmarkablePageLink) {
      BookmarkablePageLink bookmarkablePageLink=(BookmarkablePageLink)link;
      try {
        Field parametersField=BookmarkablePageLink.class.getDeclaredField("parameters");
        Method getParametersMethod=BookmarkablePageLink.class.getDeclaredMethod("getPageParameters",(Class[])null);
        getParametersMethod.setAccessible(true);
        PageParameters parameters=(PageParameters)getParametersMethod.invoke(bookmarkablePageLink,(Object[])null);
        setParametersForNextRequest(parameters);
      }
 catch (      Exception e) {
        fail("Internal error in WicketTester. " + "Please report this in Wickets Issue Tracker.");
      }
    }
    executeListener(link);
  }
 else {
    fail("Link " + path + " is not a Link, AjaxLink, AjaxFallbackLink or AjaxSubmitLink");
  }
}
