{
  if (requestHandler instanceof ResourceReferenceRequestHandler) {
    ResourceReferenceRequestHandler referenceRequestHandler=(ResourceReferenceRequestHandler)requestHandler;
    ResourceReference reference=referenceRequestHandler.getResourceReference();
    Url url;
    if (reference instanceof MetaInfStaticResourceReference) {
      url=((MetaInfStaticResourceReference)reference).mapHandler(referenceRequestHandler);
      if (url != null) {
        return url;
      }
    }
    url=new Url();
    List<String> segments=url.getSegments();
    segments.add(getContext().getNamespace());
    segments.add(getContext().getResourceIdentifier());
    segments.add(getClassName(reference.getScope()));
    PageParameters parameters=referenceRequestHandler.getPageParameters();
    if (parameters != null) {
      parameters=new PageParameters(parameters);
      parameters.clearIndexed();
    }
    encodeResourceReferenceAttributes(url,reference);
    StringTokenizer tokens=new StringTokenizer(reference.getName(),"/");
    while (tokens.hasMoreTokens()) {
      String token=tokens.nextToken();
      if (tokens.hasMoreTokens() == false) {
        ResourceUrl resourceUrl=new ResourceUrl(token,parameters);
        getCachingStrategy().decorateUrl(resourceUrl,reference);
        token=resourceUrl.getFileName();
        if (Strings.isEmpty(token))         throw new NullPointerException("caching strategy must not return an empty filename");
        if (parameters.getIndexedCount() > 0)         throw new IllegalStateException("caching strategy must not add indexed parameters");
      }
      segments.add(token);
    }
    if (parameters != null) {
      url=encodePageParameters(url,parameters,pageParametersEncoder);
    }
    return url;
  }
  return null;
}
