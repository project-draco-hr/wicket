{
  super(componentName);
  this.data=new ArrayList();
  this.data.addAll(list);
  final PagedTableWithAlternatingRowStyle table=new PagedTableWithAlternatingRowStyle("rows",list,10){
    public void populateItem(    final ListItem listItem){
      super.populateItem(listItem);
      final ListObject value=(ListObject)listItem.getModelObject();
      listItem.add(new Label("id",Integer.toString(value.getId())));
      listItem.add(new Label("name",value.getName()));
      listItem.add(new Label("email",value.getEmail()));
      listItem.add(new Label("status",value.getStatus()));
      listItem.add(new Label("comments",value.getDescription()));
    }
  }
;
  add(table);
  add(new SortableListViewHeaders("header",table){
    protected int compareTo(    SortableListViewHeader header,    Object o1,    Object o2){
      if (header.getId().equals("id")) {
        return ((ListObject)o1).getId() - ((ListObject)o2).getId();
      }
      return super.compareTo(header,o1,o2);
    }
    protected Comparable getObjectToCompare(    final SortableListViewHeader header,    final Object object){
      final String name=header.getId();
      if (name.equals("name")) {
        return ((ListObject)object).getName();
      }
      if (name.equals("email")) {
        return ((ListObject)object).getEmail();
      }
      if (name.equals("status")) {
        return ((ListObject)object).getStatus();
      }
      if (name.equals("comment")) {
        return ((ListObject)object).getDescription();
      }
      return "";
    }
  }
);
  add(new Label("headline",new Model(null)){
    protected void onComponentTagBody(    final MarkupStream markupStream,    final ComponentTag openTag){
      int firstCell=table.getCurrentPage() * table.getRowsPerPage();
      String text=String.valueOf(list.size()) + " items found, displaying " + String.valueOf(firstCell + 1)+ " to "+ String.valueOf(firstCell + table.getRowsPerPage())+ ".";
      replaceComponentTagBody(markupStream,openTag,text);
    }
  }
);
  final PageableListViewNavigation tableNavigation=new PageableListViewNavigation("navigation",table);
  add(tableNavigation);
  add(new PageableListViewNavigationLink("first",table,0));
  add(new PageableListViewNavigationIncrementLink("prev",table,-1));
  add(new PageableListViewNavigationIncrementLink("next",table,1));
  add(new PageableListViewNavigationLink("last",table,table.getPageCount() - 1));
}
