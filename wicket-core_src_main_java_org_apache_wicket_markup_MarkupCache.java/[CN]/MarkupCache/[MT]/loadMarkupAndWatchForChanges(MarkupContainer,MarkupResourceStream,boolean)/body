{
  final String cacheKey=markupResourceStream.getCacheKey();
  if (cacheKey != null) {
    if (enforceReload == false) {
      String locationString=markupResourceStream.locationAsString();
      if (locationString == null) {
        locationString=cacheKey;
      }
      Markup markup=markupCache.get(locationString);
      if (markup != null) {
        markupKeyCache.put(cacheKey,locationString);
        return markup;
      }
    }
    final IModificationWatcher watcher=application.getResourceSettings().getResourceWatcher(true);
    if (watcher != null) {
      watcher.add(markupResourceStream,new IChangeListener<IModifiable>(){
        @Override public void onChange(        IModifiable modifiable){
          if (log.isDebugEnabled()) {
            log.debug("Remove markup from watcher: " + markupResourceStream);
          }
          watcher.remove(markupResourceStream);
          removeMarkup(cacheKey);
        }
      }
);
    }
  }
  if (log.isDebugEnabled()) {
    log.debug("Loading markup from " + markupResourceStream);
  }
  return loadMarkup(container,markupResourceStream,enforceReload);
}
