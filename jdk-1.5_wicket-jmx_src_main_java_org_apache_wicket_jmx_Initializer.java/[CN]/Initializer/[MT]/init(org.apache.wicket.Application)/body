{
  try {
    String name=application.getName();
    String agentId=System.getProperty("org.apache.wicket.mbean.server.agentid");
    if (agentId != null) {
      ArrayList<MBeanServer> mbeanServers=(ArrayList<MBeanServer>)MBeanServerFactory.findMBeanServer(agentId);
      if (!mbeanServers.isEmpty()) {
        mbeanServer=mbeanServers.get(0);
      }
 else {
        log.error("unable to find mbean server with agent id " + agentId);
      }
    }
    if (mbeanServer == null) {
      String impl=System.getProperty("org.apache.wicket.mbean.server.class");
      if (impl != null) {
        ArrayList<MBeanServer> mbeanServers=(ArrayList<MBeanServer>)MBeanServerFactory.findMBeanServer(null);
        if (!mbeanServers.isEmpty()) {
          for (          MBeanServer mbs : mbeanServers) {
            if (mbs.getClass().getName().equals(impl)) {
              mbeanServer=mbs;
              break;
            }
          }
        }
        if (mbeanServer == null) {
          log.error("unable to find mbean server of type " + impl);
        }
      }
    }
    if (mbeanServer == null) {
      mbeanServer=ManagementFactory.getPlatformMBeanServer();
    }
    log.info("registering Wicket mbeans with server " + mbeanServer);
    String domain="org.apache.wicket.app." + name;
    ObjectName appBeanName=new ObjectName(domain + ":type=Application");
    String tempDomain=domain;
    int i=0;
    while (mbeanServer.isRegistered(appBeanName)) {
      tempDomain=name + "-" + i++;
      appBeanName=new ObjectName(tempDomain + ":type=Application");
    }
    domain=tempDomain;
    Application appBean=new Application(application);
    register(appBean,appBeanName);
    register(new ApplicationSettings(application),new ObjectName(domain + ":type=Application,name=ApplicationSettings"));
    register(new DebugSettings(application),new ObjectName(domain + ":type=Application,name=DebugSettings"));
    register(new MarkupSettings(application),new ObjectName(domain + ":type=Application,name=MarkupSettings"));
    register(new ResourceSettings(application),new ObjectName(domain + ":type=Application,name=ResourceSettings"));
    register(new PageSettings(application),new ObjectName(domain + ":type=Application,name=PageSettings"));
    register(new RequestCycleSettings(application),new ObjectName(domain + ":type=Application,name=RequestCycleSettings"));
    register(new SecuritySettings(application),new ObjectName(domain + ":type=Application,name=SecuritySettings"));
    register(new SessionSettings(application),new ObjectName(domain + ":type=Application,name=SessionSettings"));
    register(new CookieValuePersisterSettings(application),new ObjectName(domain + ":type=Application,name=CookieValuePersisterSettings"));
    RequestLogger sessionsBean=new RequestLogger(application);
    ObjectName sessionsBeanName=new ObjectName(domain + ":type=RequestLogger");
    register(sessionsBean,sessionsBeanName);
  }
 catch (  MalformedObjectNameException e) {
    throw new WicketRuntimeException(e);
  }
catch (  InstanceAlreadyExistsException e) {
    throw new WicketRuntimeException(e);
  }
catch (  MBeanRegistrationException e) {
    throw new WicketRuntimeException(e);
  }
catch (  NotCompliantMBeanException e) {
    throw new WicketRuntimeException(e);
  }
}
